<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Mon Mar 25 12:20:08 EDT 2013 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Google API Client Library for Java 1.13.2-beta"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/jdiff.jar:/usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/xerces.jar -d /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/javadoc/google-api-java-client/1.14.1-beta/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-apache-xalan2.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/junit.jar:/usr/share/ant/lib/ant-junit4.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/local/buildtools/java/jdk7-google-v5-32/lib/tools.jar -sourcepath /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/old/google-api-java-client/google-api-client/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/old/google-api-java-client/google-api-client-android/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/old/google-api-java-client/google-api-client-appengine/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/old/google-api-java-client/google-api-client-java6/src/main/java -apiname Google API Client Library for Java 1.13.2-beta -baseURI http://www.w3.org -apidir /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/javadoc/google-api-java-client/1.14.1-beta/jdiff -source 1.5 -->
<package name="com.google.api.client.googleapis">
  <!-- start class com.google.api.client.googleapis.GoogleHeaders -->
  <class name="GoogleHeaders" extends="HttpHeaders"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.14) Use {@link HttpHeaders}">
    <constructor name="GoogleHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty GoogleHeaders object.]]>
      </doc>
    </constructor>
    <constructor name="GoogleHeaders" type="HttpHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a GoogleHeaders object using the headers present in the specified {@link HttpHeaders}.

 @param headers HTTP headers object including set headers
 @since 1.11]]>
      </doc>
    </constructor>
    <method name="setSlugFromFileName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Slug"} header for the given file name, properly escaping the header value. See
 <a href="http://tools.ietf.org/html/rfc5023#section-9.7">The Slug Header</a>.]]>
      </doc>
    </method>
    <method name="setApplicationName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "User-Agent"} header of the form
 {@code "[company-id]-[app-name]/[app-version]"}, for example {@code "Google-Sample/1.0"}.]]>
      </doc>
    </method>
    <method name="setDeveloperId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="developerId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link #gdataKey} header using the given developer ID.]]>
      </doc>
    </method>
    <method name="setGoogleLogin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the Google Login {@code "Authorization"} header for the given authentication token.]]>
      </doc>
    </method>
    <method name="getUploadContentLength" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "X-Upload-Content-Length"} header or {@code null} for none.

 <p>
 Upgrade warning: this method now returns a {@link Long}. In prior version 1.11 it returned a
 {@code long}.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="setUploadContentLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="uploadContentLength" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the {@code "X-Upload-Content-Length"} header or {@code null} for none.

 @since 1.12]]>
      </doc>
    </method>
    <method name="setUploadContentLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="uploadContentLength" type="long"/>
      <doc>
      <![CDATA[Sets the {@code "X-Upload-Content-Length"} header.

 @since 1.7]]>
      </doc>
    </method>
    <method name="getUploadContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "X-Upload-Content-Type"} header or {@code null} for none.

 @since 1.7]]>
      </doc>
    </method>
    <method name="setUploadContentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="uploadContentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "X-Upload-Content-Type"} header or {@code null} for none.

 @since 1.7]]>
      </doc>
    </method>
    <method name="getGoogleLoginValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.14) Use
             {@code ClientLogin.getAuthorizationHeaderValue}">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns Google Login {@code "Authorization"} header value based on the given authentication
 token.
 @deprecated (scheduled to be removed in 1.14) Use
             {@code ClientLogin.getAuthorizationHeaderValue}]]>
      </doc>
    </method>
    <method name="getGDataVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "GData-Version"} header.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setGDataVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="gdataVersion" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "GData-Version"} header.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getSlug" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the escaped {@code "Slug"} header value, which must be escaped using
 {@link #SLUG_ESCAPER}.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setSlug"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="slug" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the escaped {@code "Slug"} header value, which must be escaped using
 {@link #SLUG_ESCAPER}.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getGDataClient" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "X-GData-Client"} header.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setGDataClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="gdataClient" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "X-GData-Client"} header.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getGDataKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "X-GData-Key"} header, which must be of the form {@code "key=[developerId]"}
 .

 @since 1.8]]>
      </doc>
    </method>
    <method name="setGDataKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="gdataKey" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "X-GData-Key"} header, which must be of the form {@code "key=[developerId]"}.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getMethodOverride" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code "X-HTTP-Method-Override"} header.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setMethodOverride"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="methodOverride" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "X-HTTP-Method-Override"} header.

 @since 1.8]]>
      </doc>
    </method>
    <field name="SLUG_ESCAPER" type="PercentEscaper"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Escaper for the {@link #slug} header.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP headers for Google API's.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.14) Use {@link HttpHeaders}]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleHeaders -->
  <!-- start class com.google.api.client.googleapis.GoogleUrl -->
  <class name="GoogleUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.14) Use {@link GenericUrl}">
    <constructor name="GoogleUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUrl encoded URL, including any existing query parameters that should be parsed]]>
      </doc>
    </constructor>
    <method name="clone" return="com.google.api.client.googleapis.GoogleUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPrettyPrint" return="java.lang.Boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to pretty print the output.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setPrettyPrint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prettyPrint" type="java.lang.Boolean"/>
      <doc>
      <![CDATA[Sets whether to pretty print the output.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getAlt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the alternate wire format.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setAlt"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="alt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the alternate wire format.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getFields" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the partial fields mask.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the partial fields mask.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the API key as described in the <a
 href="https://code.google.com/apis/console-help/">Google APIs Console documentation</a>.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the API key as described in the <a
 href="https://code.google.com/apis/console-help/">Google APIs Console documentation</a>.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getUserIp" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user IP used to enforce per-user limits for server-side applications, as described
 in the <a href="https://code.google.com/apis/console-help/#EnforceUserLimits">Google APIs
 Console documentation</a>.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setUserIp"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="userip" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the user IP used to enforce per-user limits for server-side applications, as described in
 the <a href="https://code.google.com/apis/console-help/#EnforceUserLimits">Google APIs Console
 documentation</a>.

 @since 1.8]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generic Google URL providing for some common query parameters used in Google API's such as the
 {@link #alt} and {@link #fields} parameters.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.14) Use {@link GenericUrl}]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUrl -->
  <!-- start class com.google.api.client.googleapis.GoogleUtils -->
  <class name="GoogleUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current version of the Google API Client Library for Java.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utility class for the Google API Client Library.

 @since 1.12
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUtils -->
  <!-- start class com.google.api.client.googleapis.MethodOverride -->
  <class name="MethodOverride" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MethodOverride"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Only overrides HTTP methods that the HTTP transport does not support.]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the method override header.

 @since 1.13]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Thread-safe HTTP request execute interceptor for Google API's that wraps HTTP requests inside of
 a POST request and uses {@link #HEADER} header to specify the actual HTTP method.

 <p>
 Use this for example for an HTTP transport that doesn't support PATCH like
 {@code NetHttpTransport} or {@code UrlFetchTransport}. By default, only the methods not supported
 by the transport will be overridden. When running behind a firewall that does not support certain
 verbs like PATCH, use the {@link MethodOverride.Builder#setOverrideAllMethods(boolean)}
 constructor instead to specify to override all methods. POST is never overridden.
 </p>

 <p>
 This class also allows GET requests with a long URL (> 2048 chars) to be instead sent using
 method override as a POST request.
 </p>

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new MethodOverride());
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverride -->
  <!-- start class com.google.api.client.googleapis.MethodOverride.Builder -->
  <class name="MethodOverride.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MethodOverride.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.MethodOverride"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds the {@link MethodOverride}.]]>
      </doc>
    </method>
    <method name="getOverrideAllMethods" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to allow all methods (except GET and POST) to be overridden regardless of
 whether the transport supports them.]]>
      </doc>
    </method>
    <method name="setOverrideAllMethods" return="com.google.api.client.googleapis.MethodOverride.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="overrideAllMethods" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to allow all methods (except GET and POST) to be overridden regardless of
 whether the transport supports them.

 <p>
 Default is {@code false}.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link MethodOverride}.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverride.Builder -->
</package>
<package name="com.google.api.client.googleapis.auth.clientlogin">
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <class name="ClientLogin" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="authenticate" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Authenticates based on the provided field values.

 @throws ClientLoginResponseException if the authentication response has an error code, such as
         for a CAPTCHA challenge.]]>
      </doc>
    </method>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns Google Login {@code "Authorization"} header value based on the given authentication
 token.

 @since 1.13]]>
      </doc>
    </method>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for executing request in {@link #authenticate()}.

 @since 1.3]]>
      </doc>
    </field>
    <field name="serverUrl" type="GenericUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL for the Client Login authorization server.

 <p>
 By default this is {@code "https://www.google.com"}, but it may be overridden for testing
 purposes.
 </p>

 @since 1.3]]>
      </doc>
    </field>
    <field name="applicationName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Short string identifying your application for logging purposes of the form:
 "companyName-applicationName-versionID".]]>
      </doc>
    </field>
    <field name="authTokenType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the Google service you're requesting authorization for, for example {@code "cl"} for
 Google Calendar.]]>
      </doc>
    </field>
    <field name="username" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's full email address.]]>
      </doc>
    </field>
    <field name="password" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's password.]]>
      </doc>
    </field>
    <field name="accountType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Type of account to request authorization for. Possible values are:

 <ul>
 <li>GOOGLE (get authorization for a Google account only)</li>
 <li>HOSTED (get authorization for a hosted account only)</li>
 <li>HOSTED_OR_GOOGLE (get authorization first for a hosted account; if attempt fails, get
 authorization for a Google account)</li>
 </ul>

 Use HOSTED_OR_GOOGLE if you're not sure which type of account you want authorization for. If
 the user information matches both a hosted and a Google account, only the hosted account is
 authorized.

 @since 1.1]]>
      </doc>
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Token representing the specific CAPTCHA challenge.]]>
      </doc>
    </field>
    <field name="captchaAnswer" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) String entered by the user as an answer to a CAPTCHA challenge.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Client Login authentication method as described in <a
 href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html" >ClientLogin for
 Installed Applications</a>.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <class name="ClientLogin.ErrorInfo" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="error" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="url" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse an error response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <class name="ClientLogin.Response" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.Response"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization header value to use based on the authentication token.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <field name="auth" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Authentication token.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
    public static HttpRequestFactory createRequestFactory(
        HttpTransport transport, Response response) {
      return transport.createRequestFactory(response);
    }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLoginResponseException -->
  <class name="ClientLoginResponseException" extends="HttpResponseException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDetails" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the error details or {@code null} for none.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Exception thrown when an error status code is detected in an HTTP response to a Google
 ClientLogin request in {@link ClientLogin} .

 <p>
 To get the structured details, use {@link #getDetails()}.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLoginResponseException -->
</package>
<package name="com.google.api.client.googleapis.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow -->
  <class name="GoogleAuthorizationCodeFlow" extends="AuthorizationCodeFlow"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeFlow" type="AccessMethod, HttpTransport, JsonFactory, GenericUrl, HttpExecuteInterceptor, java.lang.String, java.lang.String, CredentialStore, HttpRequestInitializer, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken#authorizationHeaderAccessMethod})
 @param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerUrl token server URL
 @param clientAuthentication client authentication or {@code null} for none (see
        {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)})
 @param clientId client identifier
 @param authorizationServerEncodedUrl authorization server encoded URL
 @param credentialStore credential persistence store or {@code null} for none
 @param requestInitializer HTTP request initializer or {@code null} for none
 @param scopes space-separated list of scopes or {@code null} for none
 @param accessType access type ({@code "online"} to request online access or {@code "offline"}
        to request offline access) or {@code null} for the default behavior
 @param approvalPrompt Prompt for consent behavior ({@code "auto"} to request auto-approval or
        {@code "force"} to force the approval UI to show) or {@code null} for the default
        behavior]]>
      </doc>
    </constructor>
    <method name="newTokenRequest" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationCode" type="java.lang.String"/>
    </method>
    <method name="newAuthorizationUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google OAuth 2.0 authorization code flow that manages and persists end-user
 credentials.

 <p>
 This is designed to simplify the flow in which an end-user authorizes the application to access
 their protected data, and then the application has access to their data based on an access token
 and a refresh token to refresh that access token when it expires.
 </p>

 <p>
 The first step is to call {@link #loadCredential(String)} based on the known user ID to check if
 the end-user's credentials are already known. If not, call {@link #newAuthorizationUrl()} and
 direct the end-user's browser to an authorization page. The web browser will then redirect to the
 redirect URL with a {@code "code"} query parameter which can then be used to request an access
 token using {@link #newTokenRequest(String)}. Finally, use
 {@link #createAndStoreCredential(TokenResponse, String)} to store and obtain a credential for
 accessing protected resources.
 </p>

 <p>
 The default for the {@code approval_prompt} and {@code access_type} parameters is {@code null}.
 For web applications that means {@code "approval_prompt=auto&access_type=online"} and for
 installed applications that means {@code "approval_prompt=force&access_type=offline"}. To
 override the default, you need to explicitly call {@link Builder#setApprovalPrompt(String)} and
 {@link Builder#setAccessType(String)}.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder -->
  <class name="GoogleAuthorizationCodeFlow.Builder" extends="AuthorizationCodeFlow.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeFlow.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientId client identifier
 @param clientSecret client secret
 @param scopes list of scopes to be joined by a space separator (or a single value containing
        multiple space-separated scopes)]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeFlow.Builder" type="HttpTransport, JsonFactory, com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientSecrets Google client secrets
 @param scopes list of scopes to be joined by a space separator (or a single value containing
        multiple space-separated scopes)]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCredentialStore" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credentialStore" type="CredentialStore"/>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.String[]"/>
    </method>
    <method name="setMethod" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="AccessMethod"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setTransport" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setAuthorizationServerEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationServerEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior ({@code "auto"}
 for web applications and {@code "force"} for installed applications).

 <p>
 By default this has the value {@code null}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setAccessType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior ({@code "online"} for web
 applications and {@code "offline"} for installed applications).

 <p>
 By default this has the value {@code null}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google authorization code flow builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl -->
  <class name="GoogleAuthorizationCodeRequestUrl" extends="AuthorizationCodeRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="java.lang.String, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Iterable)})]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerEncodedUrl authorization server encoded URL
 @param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Iterable)})

 @since 1.12]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientSecrets OAuth 2.0 client secrets JSON model as specified in <a
        href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">
        client_secrets.json file format</a>
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Iterable)})]]>
      </doc>
    </constructor>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior of {@code "auto"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <method name="setAccessType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access type ({@code "online"} to request online access or {@code "offline"} to request
 offline access) or {@code null} for the default behavior of {@code "online"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.lang.String[]"/>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.String[]"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 URL builder for an authorization web page to
 allow the end user to authorize the application to access their protected resources and that
 returns an authorization code, as specified in <a
 href="http://code.google.com/apis/accounts/docs/OAuth2WebServer.html">Using OAuth 2.0 for Web
 Server Applications (Experimental)</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "code"}. Use
 {@link AuthorizationCodeResponseUrl} to parse the redirect response after the end user
 grants/denies the request. Using the authorization code in this response, use
 {@link GoogleAuthorizationCodeTokenRequest} to request the access token.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url =
        new GoogleAuthorizationCodeRequestUrl("812741506391.apps.googleusercontent.com",
            "https://oauth2-login-demo.appspot.com/code", Arrays.asList(
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/userinfo.profile")).setState("/profile").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest -->
  <class name="GoogleAuthorizationCodeTokenRequest" extends="AuthorizationCodeTokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret
 @param code authorization code generated by the authorization server
 @param redirectUri redirect URL parameter matching the redirect URL parameter in the
        authorization request (see {@link #setRedirectUri(String)}]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerEncodedUrl token server encoded URL
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret
 @param code authorization code generated by the authorization server
 @param redirectUri redirect URL parameter matching the redirect URL parameter in the
        authorization request (see {@link #setRedirectUri(String)}

 @since 1.12]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.String[]"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="setCode" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="java.lang.String"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="execute" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 request for an access token based on an
 authorization code (as specified in <a
 href="http://code.google.com/apis/accounts/docs/OAuth2WebServer.html">Using OAuth 2.0 for Web
 Server Applications</a>).

 <p>
 Use {@link GoogleCredential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      GoogleTokenResponse response =
          new GoogleAuthorizationCodeTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              "812741506391.apps.googleusercontent.com", "{client_secret}",
              "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7", "https://oauth2-login-demo.appspot.com/code")
              .execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl -->
  <class name="GoogleBrowserClientRequestUrl" extends="BrowserClientRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleBrowserClientRequestUrl" type="java.lang.String, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Iterable)})]]>
      </doc>
    </constructor>
    <constructor name="GoogleBrowserClientRequestUrl" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientSecrets OAuth 2.0 client secrets JSON model as specified in <a
        href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">
        client_secrets.json file format</a>
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Iterable)})]]>
      </doc>
    </constructor>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior of {@code "auto"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.lang.String[]"/>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.String[]"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 URL builder for an authorization web page to
 allow the end user to authorize the application to access their protected resources and that
 returns the access token to a browser client using a scripting language such as JavaScript, as
 specified in <a href="http://code.google.com/apis/accounts/docs/OAuth2UserAgent.html">Using OAuth
 2.0 for Client-side Applications (Experimental)</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "token"}.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url = new GoogleBrowserClientRequestUrl("812741506391.apps.googleusercontent.com",
        "https://oauth2-login-demo.appspot.com/oauthcallback", Arrays.asList(
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile")).setState("/profile").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets -->
  <class name="GoogleClientSecrets" extends="GenericJson"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleClientSecrets"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getInstalled" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for installed applications.]]>
      </doc>
    </method>
    <method name="setInstalled" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="installed" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"/>
      <doc>
      <![CDATA[Sets the details for installed applications.]]>
      </doc>
    </method>
    <method name="getWeb" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for web applications.]]>
      </doc>
    </method>
    <method name="setWeb" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="web" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"/>
      <doc>
      <![CDATA[Sets the details for web applications.]]>
      </doc>
    </method>
    <method name="getDetails" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for either installed or web applications.]]>
      </doc>
    </method>
    <method name="load" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="inputStream" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the {@code client_secrets.json} file from the given input stream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 client secrets JSON model as specified in <a
 href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">client_secrets.json
 file format</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  static GoogleClientSecrets loadClientSecretsResource(JsonFactory jsonFactory) throws IOException {
    return GoogleClientSecrets.load(
        jsonFactory, SampleClass.class.getResourceAsStream("/client_secrets.json"));
  }
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details -->
  <class name="GoogleClientSecrets.Details" extends="GenericJson"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleClientSecrets.Details"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client ID.]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client ID.]]>
      </doc>
    </method>
    <method name="getClientSecret" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client secret.]]>
      </doc>
    </method>
    <method name="setClientSecret" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client secret.]]>
      </doc>
    </method>
    <method name="getRedirectUris" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the redirect URIs.]]>
      </doc>
    </method>
    <method name="setRedirectUris" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUris" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the redirect URIs.]]>
      </doc>
    </method>
    <method name="getAuthUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization server URI.]]>
      </doc>
    </method>
    <method name="setAuthUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorization server URI.]]>
      </doc>
    </method>
    <method name="getTokenUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server URI.]]>
      </doc>
    </method>
    <method name="setTokenUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the token server URI.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Client credential details.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleCredential -->
  <class name="GoogleCredential" extends="Credential"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleCredential"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with the ability to access protected resources, but not refresh tokens.

 <p>
 To use with the ability to refresh tokens, use {@link Builder}.
 </p>]]>
      </doc>
    </constructor>
    <constructor name="GoogleCredential" type="AccessMethod, HttpTransport, JsonFactory, java.lang.String, HttpExecuteInterceptor, HttpRequestInitializer, java.util.List&lt;CredentialRefreshListener&gt;, java.lang.String, java.lang.String, java.security.PrivateKey, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken#authorizationHeaderAccessMethod})
 @param transport HTTP transport for executing refresh token request or {@code null} if not
        refreshing tokens
 @param jsonFactory JSON factory to use for parsing response for refresh token request or
        {@code null} if not refreshing tokens
 @param tokenServerEncodedUrl encoded token server URL or {@code null} if not refreshing tokens
 @param clientAuthentication client authentication or {@code null} for none (see
        {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)})
 @param requestInitializer HTTP request initializer for refresh token requests to the token
        server or {@code null} for none.
 @param refreshListeners listeners for refresh token results or {@code null} for none
 @param serviceAccountId service account ID (typically an e-mail address) or {@code null} if not
        using the service account flow
 @param serviceAccountScopes space-separated OAuth scopes to use with the the service account
        flow or {@code null} if not using the service account flow
 @param serviceAccountPrivateKey private key to use with the the service account flow or
        {@code null} if not using the service account flow
 @param serviceAccountUser email address of the user the application is trying to impersonate in
        the service account flow or {@code null} for none or if not using the service account
        flow]]>
      </doc>
    </constructor>
    <constructor name="GoogleCredential" type="AccessMethod, HttpTransport, JsonFactory, java.lang.String, HttpExecuteInterceptor, HttpRequestInitializer, java.util.List&lt;CredentialRefreshListener&gt;, java.lang.String, java.lang.String, java.security.PrivateKey, java.lang.String, Clock"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param method method of presenting the access token to the resource server (for example
        {@link BearerToken#authorizationHeaderAccessMethod})
 @param transport HTTP transport for executing refresh token request or {@code null} if not
        refreshing tokens
 @param jsonFactory JSON factory to use for parsing response for refresh token request or
        {@code null} if not refreshing tokens
 @param tokenServerEncodedUrl encoded token server URL or {@code null} if not refreshing tokens
 @param clientAuthentication client authentication or {@code null} for none (see
        {@link TokenRequest#setClientAuthentication(HttpExecuteInterceptor)})
 @param requestInitializer HTTP request initializer for refresh token requests to the token
        server or {@code null} for none.
 @param refreshListeners listeners for refresh token results or {@code null} for none
 @param serviceAccountId service account ID (typically an e-mail address) or {@code null} if not
        using the service account flow
 @param serviceAccountScopes space-separated OAuth scopes to use with the the service account
        flow or {@code null} if not using the service account flow
 @param serviceAccountPrivateKey private key to use with the the service account flow or
        {@code null} if not using the service account flow
 @param serviceAccountUser email address of the user the application is trying to impersonate in
        the service account flow or {@code null} for none or if not using the service account
        flow
 @param clock The clock to use for expiration check
 @since 1.9]]>
      </doc>
    </constructor>
    <method name="setAccessToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="setExpirationTimeMilliseconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeMilliseconds" type="java.lang.Long"/>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
    </method>
    <method name="setFromTokenResponse" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenResponse" type="TokenResponse"/>
    </method>
    <method name="executeRefreshToken" return="TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getServiceAccountId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the service account ID (typically an e-mail address) or {@code null} if not using the
 service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountScopes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the space-separated OAuth scopes to use with the the service account flow or
 {@code null} if not using the service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the private key to use with the the service account flow or {@code null} if not using
 the service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none or if not using the service account flow.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google-specific implementation of the OAuth 2.0 helper for accessing protected
 resources using an access token, as well as optionally refreshing the access token when it
 expires using a refresh token.

 <p>
 There are three modes supported: access token only, refresh token flow, and service account flow
 (with or without impersonating a user).
 </p>

 <p>
 If all you have is an access token, you simply pass the {@link TokenResponse} to the credential
 using {@link Builder#setFromTokenResponse(TokenResponse)}. Google credential uses
 {@link BearerToken#authorizationHeaderAccessMethod()} as the access method. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialWithAccessTokenOnly(
      HttpTransport transport, JsonFactory jsonFactory, TokenResponse tokenResponse) {
    return new GoogleCredential().setFromTokenResponse(tokenResponse);
  }
 </pre>

 <p>
 If you have a refresh token, it is similar to the case of access token only, but you additionally
 need to pass the credential the client secrets using
 {@link Builder#setClientSecrets(GoogleClientSecrets)} or
 {@link Builder#setClientSecrets(String, String)}. Google credential uses
 {@link GoogleOAuthConstants#TOKEN_SERVER_URL} as the token server URL, and
 {@link ClientParametersAuthentication} with the client ID and secret as the client
 authentication. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialWithRefreshToken(HttpTransport transport,
      JsonFactory jsonFactory, GoogleClientSecrets clientSecrets, TokenResponse tokenResponse) {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setClientSecrets(clientSecrets)
        .build()
        .setFromTokenResponse(tokenResponse);
  }
 </pre>

 <p>
 The <a href="https://developers.google.com/accounts/docs/OAuth2ServiceAccount">service account
 flow</a> is used when you want to access data owned by your client application. You download the
 private key in a {@code .p12} file from the Google APIs Console. Use
 {@link Builder#setServiceAccountId(String)},
 {@link Builder#setServiceAccountPrivateKeyFromP12File(File)}, and
 {@link Builder#setServiceAccountScopes(String...)}. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialForServiceAccount(
      HttpTransport transport,
      JsonFactory jsonFactory,
      String serviceAccountId,
      Iterable&lt;String&gt; serviceAccountScopes,
      File p12File) throws GeneralSecurityException, IOException {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setServiceAccountId(serviceAccountId)
        .setServiceAccountScopes(serviceAccountScopes)
        .setServiceAccountPrivateKeyFromP12File(p12File)
        .build();
  }
 </pre>

 <p>
 You can also use the service account flow to impersonate a user in a domain that you own. This is
 very similar to the service account flow above, but you additionally call
 {@link Builder#setServiceAccountUser(String)}. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialForServiceAccountImpersonateUser(
      HttpTransport transport,
      JsonFactory jsonFactory,
      String serviceAccountId,
      Iterable&lt;String&gt; serviceAccountScopes,
      File p12File,
      String serviceAccountUser) throws GeneralSecurityException, IOException {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setServiceAccountId(serviceAccountId)
        .setServiceAccountScopes(serviceAccountScopes)
        .setServiceAccountPrivateKeyFromP12File(p12File)
        .setServiceAccountUser(serviceAccountUser)
        .build();
  }
 </pre>

 <p>
 If you need to persist the access token in a data store, use {@link CredentialStore} and
 {@link Builder#addRefreshListener(CredentialRefreshListener)}.
 </p>

 <p>
 If you have a custom request initializer, request execute interceptor, or unsuccessful response
 handler, take a look at the sample usage for {@link HttpExecuteInterceptor} and
 {@link HttpUnsuccessfulResponseHandler}, which are interfaces that this class also implements.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleCredential -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder -->
  <class name="GoogleCredential.Builder" extends="Credential.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleCredential.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTransport" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[@since 1.9]]>
      </doc>
    </method>
    <method name="setClientSecrets" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <param name="clientSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client identifier and secret.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setClientSecrets" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientSecrets" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"/>
      <doc>
      <![CDATA[Sets the client secrets.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServiceAccountId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the service account ID (typically an e-mail address) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountId" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the service account ID (typically an e-mail address) or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServiceAccountScopes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the space-separated OAuth scopes to use with the the service account flow or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountScopes" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Sets the space-separated OAuth scopes to use with the the service account flow or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param serviceAccountScopes list of scopes to be joined by a space separator (or a single
        value containing multiple space-separated scopes)]]>
      </doc>
    </method>
    <method name="setServiceAccountScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountScopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the space-separated OAuth scopes to use with the the service account flow or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param serviceAccountScopes list of scopes to be joined by a space separator (or a single
        value containing multiple space-separated scopes)]]>
      </doc>
    </method>
    <method name="getServiceAccountPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the private key to use with the the service account flow or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKey" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountPrivateKey" type="java.security.PrivateKey"/>
      <doc>
      <![CDATA[Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKeyFromP12File" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p12File" type="java.io.File"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param p12File input stream to the p12 file (closed at the end of this method in a finally
        block)]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKeyFromPemFile" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pemFile" type="java.io.File"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param pemFile input stream to the PEM file (closed at the end of this method in a finally
        block)
 @since 1.13]]>
      </doc>
    </method>
    <method name="getServiceAccountUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountUser" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountUser" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="CredentialRefreshListener"/>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.List&lt;CredentialRefreshListener&gt;"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setTokenServerEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerEncodedUrl" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <doc>
    <![CDATA[Google credential builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken -->
  <class name="GoogleIdToken" extends="JsonWebSignature"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdToken" type="Header, com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload, byte[], byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param header header
 @param payload payload
 @param signatureBytes bytes of the signature
 @param signedContentBytes bytes of the signature content]]>
      </doc>
    </constructor>
    <method name="parse" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="idTokenString" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given ID token string and returns the parsed {@link GoogleIdToken}.

 @param jsonFactory JSON factory
 @param idTokenString ID token string
 @return parsed Google ID token]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verifier" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that this ID token is valid using {@link GoogleIdTokenVerifier#verify(GoogleIdToken)}.]]>
      </doc>
    </method>
    <method name="getPayload" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Google ID tokens.

 <p>
 Google ID tokens contain useful information such as the {@link Payload#getUserId() obfuscated
 Google user ID}. Google ID tokens are signed and the signature must be verified using
 {@link #verify(GoogleIdTokenVerifier)}, which also checks that your application's client ID is
 the intended audience.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload -->
  <class name="GoogleIdToken.Payload" extends="JsonWebToken.Payload"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdToken.Payload"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new Payload using default settings.]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdToken.Payload" type="Clock"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new Payload and uses the specified {@link Clock}.
 @param clock Clock to use for expiration checks.
 @since 1.9]]>
      </doc>
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the obfuscated Google user id or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setUserId" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the obfuscated Google user id or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getIssuee" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client ID of issuee or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setIssuee" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuee" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client ID of issuee or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getAccessTokenHash" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the hash of access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setAccessTokenHash" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessTokenHash" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the hash of access token or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getHostedDomain" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the hosted domain name if asserted user is a domain managed user or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setHostedDomain" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hostedDomain" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the hosted domain name if asserted user is a domain managed user or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="getEmail" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the e-mail address of the user or {@code null} if it was not requested.

 <p>
 Requires the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="setEmail" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="email" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the e-mail address of the user or {@code null} if it was not requested.

 <p>
 Used in conjunction with the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="getEmailVerified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} if the users e-mail address has been verified by Google.

 <p>
 Requires the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="setEmailVerified" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="emailVerified" type="boolean"/>
      <doc>
      <![CDATA[Sets whether the users e-mail address has been verified by Google or not.

 <p>
 Used in conjunction with the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google ID token payload.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier -->
  <class name="GoogleIdTokenVerifier" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdTokenVerifier" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with required parameters.

 <p>
 Use {@link GoogleIdTokenVerifier.Builder} to specify client IDs.
 </p>

 @param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdTokenVerifier" type="java.util.Set&lt;java.lang.String&gt;, HttpTransport, JsonFactory"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link GoogleIdTokenVerifier}.

 @param clientIds set of client IDs or {@code null} for none
 @param transport HTTP transport
 @param jsonFactory JSON factory
 @since 1.9]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdTokenVerifier" type="java.util.Set&lt;java.lang.String&gt;, HttpTransport, JsonFactory, Clock"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link GoogleIdTokenVerifier}.

 @param clientIds set of client IDs or {@code null} for none
 @param transport HTTP transport
 @param jsonFactory JSON factory
 @param clock Clock for expiration checks
 @since 1.9]]>
      </doc>
    </constructor>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getClientIds" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the set of client IDs.

 @since 1.9]]>
      </doc>
    </method>
    <method name="getPublicKeys" return="java.util.List&lt;java.security.PublicKey&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the public keys or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getExpirationTimeMilliseconds" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expiration time in milliseconds to be used with {@link Clock#currentTimeMillis()}
 or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid using {@link #verify(GoogleIdToken, String)} with the
 {@link #getClientIds()}.

 @param idToken Google ID token
 @return {@code true} if verified successfully or {@code false} if failed]]>
      </doc>
    </method>
    <method name="verify" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idTokenString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a Google ID token if the given ID token string is valid using
 {@link #verify(GoogleIdToken, String)} with the {@link #getClientIds()}.

 @param idTokenString Google ID token string
 @return Google ID token if verified successfully or {@code null} if failed
 @since 1.9]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"/>
      <param name="clientId" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid, using the given client ID.

 It verifies:

 <ul>
 <li>The RS256 signature, which uses RSA and SHA-256 based on the public keys downloaded from
 the public certificate endpoint.</li>
 <li>The current time against the issued at and expiration time (allowing for a 5 minute clock
 skew).</li>
 <li>The issuer is {@code "accounts.google.com"}.</li>
 <li>The audience and issuee match the client ID (skipped if {@code clientId} is {@code null}.
 </li>
 <li>
 </ul>

 @param idToken Google ID token
 @param clientId client ID or {@code null} to skip checking it
 @return {@code true} if verified successfully or {@code false} if failed
 @since 1.8]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientIds" type="java.util.Set&lt;java.lang.String&gt;"/>
      <param name="idToken" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid, using the given set of client IDs.

 It verifies:

 <ul>
 <li>The RS256 signature, which uses RSA and SHA-256 based on the public keys downloaded from
 the public certificate endpoint.</li>
 <li>The current time against the issued at and expiration time (allowing for a 5 minute clock
 skew).</li>
 <li>The issuer is {@code "accounts.google.com"}.</li>
 <li>The audience and issuee match one of the client IDs (skipped if {@code clientIds} is
 {@code null}.</li>
 <li>
 </ul>

 @param idToken Google ID token
 @param clientIds set of client IDs
 @return {@code true} if verified successfully or {@code false} if failed
 @since 1.9]]>
      </doc>
    </method>
    <method name="loadPublicCerts" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Downloads the public keys from the public certificates endpoint at
 {@code "https://www.googleapis.com/oauth2/v1/certs"}.

 <p>
 This method is automatically called if the public keys have not yet been initialized or if the
 expiration time is very close, so normally this doesn't need to be called. Only call this
 method explicitly to force the public keys to be updated.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google ID token verifier.

 <p>
 The public keys are loaded Google's public certificate endpoint at
 {@code "https://www.googleapis.com/oauth2/v1/certs"}. The public keys are cached in this instance
 of {@link GoogleIdTokenVerifier}. Therefore, for maximum efficiency, applications should use a
 single globally-shared instance of the {@link GoogleIdTokenVerifier}. Use
 {@link #verify(GoogleIdToken)} or {@link GoogleIdToken#verify(GoogleIdTokenVerifier)} to verify a
 Google ID token.
 </p>

 <p>
 Samples usage:
 </p>

 <pre>
  public static GoogleIdTokenVerifier verifier;

  public static void initVerifier(
      HttpTransport transport, JsonFactory jsonFactory, String clientId) {
    verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
        .setClientId(clientId)
        .build();
  }

  public static boolean verifyToken(GoogleIdToken idToken)
      throws GeneralSecurityException, IOException {
    return verifier.verify(idToken);
  }
 </pre>
 @since 1.7]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder -->
  <class name="GoogleIdTokenVerifier.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdTokenVerifier.Builder" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link GoogleIdTokenVerifier}.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getClientIds" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the set of client IDs.]]>
      </doc>
    </method>
    <method name="setClientIds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientIds" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets a list of client IDs.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setClientIds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Sets a list of client IDs.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link GoogleIdTokenVerifier}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants -->
  <class name="GoogleOAuthConstants" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="AUTHORIZATION_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Encoded URL of Google's end-user authorization server.]]>
      </doc>
    </field>
    <field name="TOKEN_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Encoded URL of Google's token server.]]>
      </doc>
    </field>
    <field name="OOB_REDIRECT_URI" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Redirect URI to use for an installed application as specified in <a
 href="http://code.google.com/apis/accounts/docs/OAuth2InstalledApp.html">Using OAuth 2.0 for
 Installed Applications</a>.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for Google's OAuth 2.0 implementation.

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest -->
  <class name="GoogleRefreshTokenRequest" extends="RefreshTokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleRefreshTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param refreshToken refresh token issued to the client
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.String[]"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="execute" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 request to refresh an access token using a
 refresh token as specified in <a
 href="http://tools.ietf.org/html/draft-ietf-oauth-v2-23#section-6">Refreshing an Access
 Token</a>.

 <p>
 Use {@link GoogleCredential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void refreshAccessToken() throws IOException {
    try {
      TokenResponse response =
          new GoogleRefreshTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              "tGzv3JOkF0XG5Qx2TlKWIA", "s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw").execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse -->
  <class name="GoogleTokenResponse" extends="IdTokenResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleTokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setIdToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="java.lang.String"/>
    </method>
    <method name="setAccessToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
    </method>
    <method name="setTokenType" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="java.lang.String"/>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="setScope" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
    </method>
    <method name="parseIdToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="verifyIdToken" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verifier" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies the ID token as specified in {@link GoogleIdTokenVerifier#verify} by passing it
 {@link #parseIdToken}.

 @param verifier Google ID token verifier]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google OAuth 2.0 JSON model for a successful access token response as specified in <a
 href="http://tools.ietf.org/html/draft-ietf-oauth-v2-23#section-5.1">Successful Response</a>,
 including an ID token as specified in <a
 href="http://openid.net/specs/openid-connect-session-1_0.html">OpenID Connect Session Management
 1.0</a>.

 <p>
 This response object is the result of {@link GoogleAuthorizationCodeTokenRequest#execute()} and
 {@link GoogleRefreshTokenRequest#execute()}. Use {@link #parseIdToken()} to parse the
 {@link GoogleIdToken} and then call {@link GoogleIdToken#verify(GoogleIdTokenVerifier)} to verify
 it (or just call {@link #verifyIdToken(GoogleIdTokenVerifier)}).
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse -->
</package>
<package name="com.google.api.client.googleapis.batch">
  <!-- start interface com.google.api.client.googleapis.batch.BatchCallback -->
  <interface name="BatchCallback"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onSuccess"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="T"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is successful.

 <p>
 Upgrade warning: this method now throws an {@link IOException}. In prior version 1.11 it did
 not throw an exception.
 </p>

 <p>
 Upgrade warning: in prior version 1.12 the response headers were of type
 {@code GoogleHeaders}, but as of version 1.13 that type is deprecated, so we now use type
 {@link HttpHeaders}.
 </p>

 @param t instance of the parsed data model class
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <method name="onFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="E"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is unsuccessful.

 <p>
 Upgrade warning: in prior version 1.12 the response headers were of type
 {@code GoogleHeaders}, but as of version 1.13 that type is deprecated, so we now use type
 {@link HttpHeaders}.
 </p>

 @param e instance of data class representing the error response content
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Callback for an individual batch response.

 <p>
 Sample use:
 </p>

 <pre>
   batch.queue(volumesList.buildHttpRequest(), Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
 </pre>

 @param <T> Type of the data model class
 @param <E> Type of the error data model class
 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.batch.BatchCallback -->
  <!-- start class com.google.api.client.googleapis.batch.BatchRequest -->
  <class name="BatchRequest" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="BatchRequest" type="HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link BatchRequest}.

 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="setBatchUrl" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="batchUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the URL that will be hit when {@link #execute()} is called. The default value is
 {@code https://www.googleapis.com/batch}.]]>
      </doc>
    </method>
    <method name="getBatchUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL that will be hit when {@link #execute()} is called.]]>
      </doc>
    </method>
    <method name="queue" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequest" type="HttpRequest"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="errorClass" type="java.lang.Class&lt;E&gt;"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.BatchCallback&lt;T, E&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the specified {@link HttpRequest} for batched execution. Batched requests are executed
 when {@link #execute()} is called.

 @param <T> destination class type
 @param <E> error class type
 @param httpRequest HTTP Request
 @param dataClass Data class the response will be parsed into or {@code Void.class} to ignore
        the content
 @param errorClass Data class the unsuccessful response will be parsed into or
        {@code Void.class} to ignore the content
 @param callback Batch Callback
 @return this Batch request
 @throws IOException If building the HTTP Request fails]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of queued requests in this batch request.]]>
      </doc>
    </method>
    <method name="execute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes all queued HTTP requests in a single call, parses the responses and invokes callbacks.

 <p>
 Calling {@link #execute()} executes and clears the queued requests. This means that the
 {@link BatchRequest} object can be reused to {@link #queue} and {@link #execute()} requests
 again.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An instance of this class represents a single batch of requests.

 <p>
 Sample use:
 </p>

 <pre>
   BatchRequest batch = new BatchRequest(transport, httpRequestInitializer);
   batch.queue(volumesList, Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
   batch.queue(volumesList, Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
   batch.execute();
 </pre>

 <p>
 The content of each individual response is stored in memory. There is thus a potential of
 encountering an {@link OutOfMemoryError} for very large responses.
 </p>

 <p>
 Redirects are currently not followed in {@link BatchRequest}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.batch.BatchRequest -->
</package>
<package name="com.google.api.client.googleapis.batch.json">
  <!-- start class com.google.api.client.googleapis.batch.json.JsonBatchCallback -->
  <class name="JsonBatchCallback" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.batch.BatchCallback&lt;T, com.google.api.client.googleapis.json.GoogleJsonErrorContainer&gt;"/>
    <constructor name="JsonBatchCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="onFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="com.google.api.client.googleapis.json.GoogleJsonErrorContainer"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="onFailure"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="com.google.api.client.googleapis.json.GoogleJsonError"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is unsuccessful.

 <p>
 Upgrade warning: in prior version 1.12 the response headers were of type
 {@code GoogleHeaders}, but as of version 1.13 that type is deprecated, so we now use type
 {@link HttpHeaders}.
 </p>

 @param e Google JSON error response content
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Callback for an individual batch JSON response.

 <p>
 Sample use:
 </p>

 <pre>
   batch.queue(volumesList.buildHttpRequest(), Volumes.class, GoogleJsonErrorContainer.class,
       new JsonBatchCallback&lt;Volumes&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {
       log(e.getMessage());
     }
   });
 </pre>

 @param <T> Type of the data model class
 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.batch.json.JsonBatchCallback -->
</package>
<package name="com.google.api.client.googleapis.extensions.android.accounts">
  <!-- start class com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager -->
  <class name="GoogleAccountManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccountManager" type="AccountManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param accountManager account manager]]>
      </doc>
    </constructor>
    <constructor name="GoogleAccountManager" type="Context"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param context context from which to retrieve the account manager]]>
      </doc>
    </constructor>
    <method name="getAccountManager" return="AccountManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the account manager.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getAccounts" return="Account[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all Google accounts.

 @return array of Google accounts]]>
      </doc>
    </method>
    <method name="getAccountByName" return="Account"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accountName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the Google account of the given {@link Account#name}.

 @param accountName Google account name or {@code null} for {@code null} result
 @return Google account or {@code null} for none found or for {@code null} input]]>
      </doc>
    </method>
    <method name="invalidateAuthToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Invalidates the given Google auth token by removing it from the account manager's cache (if
 necessary) for example if the auth token has expired or otherwise become invalid.

 @param authToken auth token]]>
      </doc>
    </method>
    <field name="ACCOUNT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Google account type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Account manager wrapper for Google accounts.

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager -->
</package>
<package name="com.google.api.client.googleapis.extensions.android.gms.auth">
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential -->
  <class name="GoogleAccountCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccountCredential" type="Context, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param context context
 @param scope scope to use on {@link GoogleAuthUtil#getToken}]]>
      </doc>
    </constructor>
    <method name="usingOAuth2" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="Context"/>
      <param name="scope" type="java.lang.String"/>
      <param name="extraScopes" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Constructor a new instance using OAuth 2.0 scopes.

 @param context context
 @param scope first OAuth 2.0 scope
 @param extraScopes any additional OAuth 2.0 scopes
 @return new instance]]>
      </doc>
    </method>
    <method name="usingAudience" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="Context"/>
      <param name="audience" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the audience scope to use with Google Cloud Endpoints.

 @param context context
 @param audience audience
 @return new instance]]>
      </doc>
    </method>
    <method name="setSelectedAccountName" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="accountName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the selected Google account name (e-mail address) -- for example
 {@code "johndoe@gmail.com"} -- or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="getContext" return="Context"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the context.]]>
      </doc>
    </method>
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scope to use on {@link GoogleAuthUtil#getToken}.]]>
      </doc>
    </method>
    <method name="getGoogleAccountManager" return="com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google account manager.]]>
      </doc>
    </method>
    <method name="getAllAccounts" return="Account[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all Google accounts or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getSelectedAccount" return="Account"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the selected Google account or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getSelectedAccountName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the selected Google account name (e-mail address), for example
 {@code "johndoe@gmail.com"}, or {@code null} for none.]]>
      </doc>
    </method>
    <method name="newChooseAccountIntent" return="Intent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an intent to show the user to select a Google account, or create a new one if there are
 none on the device yet.

 <p>
 Must be run from the main UI thread.
 </p>]]>
      </doc>
    </method>
    <method name="getToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GoogleAuthException" type="GoogleAuthException"/>
      <doc>
      <![CDATA[Returns an OAuth 2.0 access token.

 <p>
 Must be run from a background thread, not the main UI thread.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Manages authorization and account selection for Google accounts.

 <p>
 When fetching a token, any thrown {@link GoogleAuthException} would be wrapped:
 <ul>
 <li>{@link GooglePlayServicesAvailabilityException} would be wrapped inside of
 {@link GooglePlayServicesAvailabilityIOException}</li>
 <li>{@link UserRecoverableAuthException} would be wrapped inside of
 {@link UserRecoverableAuthIOException}</li>
 <li>{@link GoogleAuthException} when be wrapped inside of {@link GoogleAuthIOException}</li>
 </ul>
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException -->
  <class name="GoogleAuthIOException" extends="java.io.IOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="GoogleAuthException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Wraps a {@link GoogleAuthException} into an {@link IOException} so it can be caught directly.

 <p>
 Use {@link #getCause()} to get the wrapped {@link GoogleAuthException}.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException -->
  <class name="GooglePlayServicesAvailabilityIOException" extends="com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="GooglePlayServicesAvailabilityException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConnectionStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error code to use with
 {@link GooglePlayServicesUtil#getErrorDialog(int, Activity, int)}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Wraps a {@link GooglePlayServicesAvailabilityException} into an {@link IOException} so it can be
 caught directly.

 <p>
 Use {@link #getConnectionStatusCode()} to display the error dialog. Alternatively, use
 {@link #getCause()} to get the wrapped {@link GooglePlayServicesAvailabilityException}. Example
 usage:
 </p>

 <pre>
    } catch (final GooglePlayServicesAvailabilityIOException availabilityException) {
      myActivity.runOnUiThread(new Runnable() {
        public void run() {
          Dialog dialog = GooglePlayServicesUtil.getErrorDialog(
              availabilityException.getConnectionStatusCode(),
              myActivity,
              MyActivity.REQUEST_GOOGLE_PLAY_SERVICES);
          dialog.show();
        }
      });
 </pre>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException -->
  <class name="UserRecoverableAuthIOException" extends="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="UserRecoverableAuthException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntent" return="Intent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Intent} that when supplied to
 {@link Activity#startActivityForResult(Intent, int)} will allow user intervention.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Wraps a {@link UserRecoverableAuthException} into an {@link IOException} so it can be caught
 directly.

 <p>
 Use {@link #getIntent()} to allow user interaction to recover. Alternatively, use
 {@link #getCause()} to get the wrapped {@link UserRecoverableAuthException}. Example usage:
 </p>

 <pre>
    } catch (UserRecoverableAuthIOException userRecoverableException) {
      myActivity.startActivityForResult(
          userRecoverableException.getIntent(), MyActivity.REQUEST_AUTHORIZATION);
    }
 </pre>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException -->
</package>
<package name="com.google.api.client.googleapis.extensions.appengine.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential -->
  <class name="AppIdentityCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppIdentityCredential" type="java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param scopes OAuth scopes]]>
      </doc>
    </constructor>
    <constructor name="AppIdentityCredential" type="java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param scopes OAuth scopes]]>
      </doc>
    </constructor>
    <constructor name="AppIdentityCredential" type="AppIdentityService, java.util.List&lt;java.lang.String&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param appIdentityService App Identity Service that provides the access token
 @param scopes OAuth scopes

 @since 1.12]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Intercept the request by using the access token obtained from the {@link AppIdentityService}.

 <p>
 Upgrade warning: in prior version 1.11 {@link AppIdentityServiceFailureException} was wrapped
 with an {@link IOException}, but now it is no longer wrapped because it is a
 {@link RuntimeException}.
 </p>]]>
      </doc>
    </method>
    <method name="getAppIdentityService" return="AppIdentityService"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the App Identity Service that provides the access token.

 @since 1.12]]>
      </doc>
    </method>
    <method name="getScopes" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the OAuth scopes.

 @since 1.12]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 credential in which a client Google App Engine application needs to access data that it
 owns, based on <a href="http://code.google.com/appengine/docs/java/appidentity/overview.html
 #Asserting_Identity_to_Google_APIs">Asserting Identity to Google APIs</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(
      HttpTransport transport, JsonFactory jsonFactory, TokenResponse tokenResponse) {
    return transport.createRequestFactory(
        new AppIdentityCredential("https://www.googleapis.com/auth/urlshortener"));
  }
 </pre>

 <p>
 Implementation is immutable and thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential -->
  <!-- start class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder -->
  <class name="AppIdentityCredential.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppIdentityCredential.Builder" type="java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param scopes OAuth scopes]]>
      </doc>
    </constructor>
    <constructor name="AppIdentityCredential.Builder" type="java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param scopes OAuth scopes]]>
      </doc>
    </constructor>
    <method name="setAppIdentityService" return="com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appIdentityService" type="AppIdentityService"/>
      <doc>
      <![CDATA[Sets the App Identity Service that provides the access token.
 <p>
 If not explicitly set, the {@link AppIdentityServiceFactory#getAppIdentityService()} method
 will be used to provide the App Identity Service.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new {@link AppIdentityCredential}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link AppIdentityCredential}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.12]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder -->
</package>
<package name="com.google.api.client.googleapis.extensions.java6.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.extensions.java6.auth.oauth2.GooglePromptReceiver -->
  <class name="GooglePromptReceiver" extends="AbstractPromptReceiver"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GooglePromptReceiver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google OAuth 2.0 abstract verification code receiver that prompts user to paste the code copied
 from the browser.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.java6.auth.oauth2.GooglePromptReceiver -->
</package>
<package name="com.google.api.client.googleapis.json">
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError -->
  <class name="GoogleJsonError" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given error HTTP response using the given JSON factory.

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of the Google JSON error information
 @throws IllegalArgumentException if content type is not {@link Json#MEDIA_TYPE} or if
         expected {@code "data"} or {@code "error"} key is not found]]>
      </doc>
    </method>
    <method name="getErrors" return="java.util.List&lt;com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of detailed errors or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setErrors"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="errors" type="java.util.List&lt;com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo&gt;"/>
      <doc>
      <![CDATA[Sets the list of detailed errors or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status code of this response or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="int"/>
      <doc>
      <![CDATA[Sets the HTTP status code of this response or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human-readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human-readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Data class representing the Google JSON error response content, as documented for example in <a
 href="https://code.google.com/apis/urlshortener/v1/getting_started.html#errors">Error
 responses</a>.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <class name="GoogleJsonError.ErrorInfo" extends="GenericJson"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDomain" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error classification or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setDomain"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="domain" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error classification or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getReason" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error reason or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setReason"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="reason" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error reason or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the location in the request that caused the error or {@code null} for none or
 {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the location in the request that caused the error or {@code null} for none or
 {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getLocationType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of location in the request that caused the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setLocationType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="locationType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type of location in the request that caused the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Detailed error information.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonErrorContainer -->
  <class name="GoogleJsonErrorContainer" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonErrorContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getError" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link GoogleJsonError}.]]>
      </doc>
    </method>
    <method name="setError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="com.google.api.client.googleapis.json.GoogleJsonError"/>
      <doc>
      <![CDATA[Sets the {@link GoogleJsonError}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Data class representing a container of {@link GoogleJsonError}.

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonErrorContainer -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonResponseException -->
  <class name="GoogleJsonResponseException" extends="HttpResponseException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDetails" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google JSON error details or {@code null} for none (for example if response is not
 JSON).]]>
      </doc>
    </method>
    <method name="from" return="com.google.api.client.googleapis.json.GoogleJsonResponseException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <doc>
      <![CDATA[Returns a new instance of {@link GoogleJsonResponseException}.

 <p>
 If there is a JSON error response, it is parsed using {@link GoogleJsonError}, which can be
 inspected using {@link #getDetails()}. Otherwise, the full response content is read and
 included in the exception message.
 </p>

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of {@link GoogleJsonResponseException}]]>
      </doc>
    </method>
    <method name="execute" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="request" type="HttpRequest"/>
      <exception name="GoogleJsonResponseException" type="com.google.api.client.googleapis.json.GoogleJsonResponseException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes an HTTP request using {@link HttpRequest#execute()}, but throws a
 {@link GoogleJsonResponseException} on error instead of {@link HttpResponseException}.

 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = GoogleJsonResponseException.execute(jsonFactory, request);
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @param jsonFactory JSON factory
 @param request HTTP request
 @return HTTP response for an HTTP success code (or error code if
         {@link HttpRequest#getThrowExceptionOnExecuteError()})
 @throws GoogleJsonResponseException for an HTTP error code (only if not
         {@link HttpRequest#getThrowExceptionOnExecuteError()})
 @throws IOException some other kind of I/O exception
 @since 1.7]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Exception thrown when an error status code is detected in an HTTP response to a Google API that
 uses the JSON format, using the format specified in <a
 href="http://code.google.com/apis/urlshortener/v1/getting_started.html#errors">Error
 Responses</a>.

 <p>
 To execute a request, call {@link #execute(JsonFactory, HttpRequest)}. This will throw a
 {@link GoogleJsonResponseException} on an error response. To get the structured details, use
 {@link #getDetails()}.
 </p>

 <pre>
  static void executeShowingError(JsonFactory factory, HttpRequest request) throws IOException {
    try {
      GoogleJsonResponseException.execute(factory, request);
    } catch (GoogleJsonResponseException e) {
      System.err.println(e.getDetails());
    }
  }
 </pre>

 @since 1.6
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonResponseException -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport -->
  <class name="GoogleJsonRpcHttpTransport" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonRpcHttpTransport" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link GoogleJsonRpcHttpTransport} with default values for RPC server, and
 Content type and Accept headers.

 @param httpTransport HTTP transport required for building requests.
 @param jsonFactory JSON factory to use for building requests.

 @since 1.9]]>
      </doc>
    </constructor>
    <constructor name="GoogleJsonRpcHttpTransport" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link GoogleJsonRpcHttpTransport}.

 @param httpTransport HTTP transport required for building requests.
 @param jsonFactory JSON factory to use for building requests.
 @param rpcServerUrl RPC server URL.
 @param mimeType Content type header to use for requests.
 @param accept Accept header to use for requests.

 @since 1.9]]>
      </doc>
    </constructor>
    <method name="getHttpTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport used for building requests.

 @since 1.9]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory used for building requests.

 @since 1.9]]>
      </doc>
    </method>
    <method name="getRpcServerUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the RPC server URL.

 @since 1.9]]>
      </doc>
    </method>
    <method name="getMimeType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the MIME type header used for requests.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getAccept" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Accept header used for requests.

 @since 1.9]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="JsonRpcRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a POST HTTP request for the JSON-RPC requests objects specified in the given JSON-RPC
 request object.
 <p>
 You may use {@link JsonFactory#createJsonParser(java.io.InputStream)} to get the
 {@link JsonParser}, and {@link JsonParser#parseAndClose(Class, CustomizeJsonParser)}.
 </p>

 @param request JSON-RPC request object
 @return HTTP request]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requests" type="java.util.List&lt;JsonRpcRequest&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a POST HTTP request for the JSON-RPC requests objects specified in the given JSON-RPC
 request objects.
 <p>
 Note that the request will always use batching -- i.e. JSON array of requests -- even if there
 is only one request. You may use {@link JsonFactory#createJsonParser(java.io.InputStream)} to
 get the {@link JsonParser}, and
 {@link JsonParser#parseArrayAndClose(Collection, Class, CustomizeJsonParser)} .
 </p>

 @param requests JSON-RPC request objects
 @return HTTP request]]>
      </doc>
    </method>
    <doc>
    <![CDATA[JSON-RPC 2.0 HTTP transport for RPC requests for Google API's, including both singleton and
 batched requests.

 <p>
 This implementation is thread-safe.
 </p>

 <p>
 Warning: this is based on an undocumented experimental Google functionality that may stop working
 or change in behavior at any time. Beware of this risk if running this in production code.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport.Builder -->
  <class name="GoogleJsonRpcHttpTransport.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonRpcHttpTransport.Builder" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param httpTransport HTTP transport required for building requests.
 @param jsonFactory JSON factory to use for building requests.]]>
      </doc>
    </constructor>
    <method name="setRpcServerUrl" return="com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rpcServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the RPC server URL.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param rpcServerUrl RPC server URL.]]>
      </doc>
    </method>
    <method name="setMimeType" return="com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="mimeType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the MIME type of the Content type header to use for requests. By default this is
 {@code "application/json-rpc"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param mimeType MIME type to use for requests.
 @since 1.10]]>
      </doc>
    </method>
    <method name="setAccept" return="com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="accept" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the Accept header to use for requests. By default this is {@code "application/json-rpc"}
 .

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param accept Accept header to use for requests.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new {@link GoogleJsonRpcHttpTransport} instance.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getHttpTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport used for building requests.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory used for building requests.]]>
      </doc>
    </method>
    <method name="getRpcServerUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the RPC server.]]>
      </doc>
    </method>
    <method name="getMimeType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the MIME type used for requests.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getAccept" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Accept header used for requests.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link GoogleJsonRpcHttpTransport} Builder.

 <p>
 Implementation is not thread safe.
 </p>

 @since 1.9]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport.Builder -->
  <!-- start class com.google.api.client.googleapis.json.JsonCContent -->
  <class name="JsonCContent" extends="JsonHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonCContent" type="JsonFactory, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory JSON factory to use
 @param data JSON key name/value data
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.googleapis.json.JsonCContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="HttpMediaType"/>
    </method>
    <doc>
    <![CDATA[Serializes JSON-C content based on the data key/value mapping object for an item, wrapped in a
 {@code "data"} envelope.

 <p>
 Warning: this should only be used by some older Google APIs that wrapped the response in a
 {@code "data"} envelope. All newer Google APIs don't use this envelope, and for those APIs
 {@link JsonHttpContent} should be used instead.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void setContent(HttpRequest request, Object data) {
    JsonCContent content = new JsonCContent(new JacksonFactory(), data);
    request.setContent(content);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonCContent -->
  <!-- start class com.google.api.client.googleapis.json.JsonCParser -->
  <class name="JsonCParser" extends="JsonObjectParser"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonCParser" type="JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory non-null JSON factory used for parsing
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="getFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory used for parsing.

 @since 1.10]]>
      </doc>
    </method>
    <method name="initializeParser" return="JsonParser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a JSON parser to use for parsing by skipping over the {@code "data"} or
 {@code "error"} envelope.

 <p>
 The parser will be closed if any throwable is thrown. The current token will be the value of
 the {@code "data"} or {@code "error} key.
 </p>

 @param parser the parser which should be initialized for normal parsing
 @throws IllegalArgumentException if content type is not {@link Json#MEDIA_TYPE} or if expected
         {@code "data"} or {@code "error"} key is not found
 @return the parser which was passed as a parameter
 @since 1.10]]>
      </doc>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Parses JSON-C response content into an data class of key/value pairs, assuming the data is
 wrapped in a {@code "data"} envelope.

 <p>
 Warning: this should only be used by some older Google APIs that wrapped the response in a
 {@code "data"} envelope. All newer Google APIs don't use this envelope, and for those APIs
 {@link JsonObjectParser} should be used instead.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
 <code>
  static void setParser(HttpRequest request) {
    request.setParser(new JsonCParser(new JacksonFactory()));
  }
 </code>
 </pre>

 <p>
 Implementation is thread-safe.
 </p>

 <p>
 Upgrade warning: this class now extends {@link JsonObjectParser}, whereas in prior version 1.11
 it extended {@link com.google.api.client.http.json.JsonHttpParser}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonCParser -->
</package>
<package name="com.google.api.client.googleapis.media">
  <!-- start class com.google.api.client.googleapis.media.MediaHttpDownloader -->
  <class name="MediaHttpDownloader" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MediaHttpDownloader" type="HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link MediaHttpDownloader}.

 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="download"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestUrl" type="GenericUrl"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media download or a resumable media download.

 <p>
 This method does not close the given output stream.
 </p>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpDownloader} must be
 instantiated before download called be called again.
 </p>

 @param requestUrl The request URL where the download requests will be sent
 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="download"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestUrl" type="GenericUrl"/>
      <param name="requestHeaders" type="HttpHeaders"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media download or a resumable media download.

 <p>
 This method does not close the given output stream.
 </p>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpDownloader} must be
 instantiated before download called be called again.
 </p>

 @param requestUrl The request URL where the download requests will be sent
 @param requestHeaders request headers or {@code null} to ignore
 @param outputStream destination output stream
 @since 1.12]]>
      </doc>
    </method>
    <method name="setBytesDownloaded" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytesDownloaded" type="long"/>
      <doc>
      <![CDATA[Sets the total number of bytes that have been downloaded of the media resource.

 <p>
 If a download was aborted mid-way due to a connection failure then users can resume the
 download from the point where it left off.
 </p>

 <p>
 Use {@link #setContentRange} if you need to specify both the bytes downloaded and the last byte
 position.
 </p>

 @param bytesDownloaded The total number of bytes downloaded]]>
      </doc>
    </method>
    <method name="setContentRange" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="firstBytePos" type="long"/>
      <param name="lastBytePos" type="int"/>
      <doc>
      <![CDATA[Sets the content range of the next download request. Eg: bytes=firstBytePos-lastBytePos.

 <p>
 If a download was aborted mid-way due to a connection failure then users can resume the
 download from the point where it left off.
 </p>

 <p>
 Use {@link #setBytesDownloaded} if you only need to specify the first byte position.
 </p>

 @param firstBytePos The first byte position in the content range string
 @param lastBytePos The last byte position in the content range string.
 @since 1.13]]>
      </doc>
    </method>
    <method name="isDirectDownloadEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether direct media download is enabled or disabled. If value is set to {@code true}
 then a direct download will be done where the whole media content is downloaded in a single
 request. If value is set to {@code false} then the download uses the resumable media download
 protocol to download in data chunks. Defaults to {@code false}.]]>
      </doc>
    </method>
    <method name="setDirectDownloadEnabled" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="directDownloadEnabled" type="boolean"/>
      <doc>
      <![CDATA[Returns whether direct media download is enabled or disabled. If value is set to {@code true}
 then a direct download will be done where the whole media content is downloaded in a single
 request. If value is set to {@code false} then the download uses the resumable media download
 protocol to download in data chunks. Defaults to {@code false}.]]>
      </doc>
    </method>
    <method name="setProgressListener" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="progressListener" type="com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener"/>
      <doc>
      <![CDATA[Sets the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getProgressListener" return="com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setBackOffPolicyEnabled" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="backOffPolicyEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether the back off policy is enabled or disabled. If value is set to {@code false} then
 server errors are not handled and the download process will fail if a server error is
 encountered. Defaults to {@code true}.]]>
      </doc>
    </method>
    <method name="isBackOffPolicyEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the back off policy is enabled or disabled. If value is set to {@code false}
 then server errors are not handled and the download process will fail if a server error is
 encountered. Defaults to {@code true}.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the transport to use for requests.]]>
      </doc>
    </method>
    <method name="setChunkSize" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chunkSize" type="int"/>
      <doc>
      <![CDATA[Sets the maximum size of individual chunks that will get downloaded by single HTTP requests.
 The default value is {@link #MAXIMUM_CHUNK_SIZE}.

 <p>
 The maximum allowable value is {@link #MAXIMUM_CHUNK_SIZE}.
 </p>]]>
      </doc>
    </method>
    <method name="getChunkSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum size of individual chunks that will get downloaded by single HTTP requests.
 The default value is {@link #MAXIMUM_CHUNK_SIZE}.]]>
      </doc>
    </method>
    <method name="getNumBytesDownloaded" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the total number of bytes downloaded by this downloader.

 @return the number of bytes downloaded]]>
      </doc>
    </method>
    <method name="getLastBytePosition" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the last byte position of the media file we want to download or {@code -1} if there is no
 upper limit on the byte position.

 @return the last byte position
 @since 1.13]]>
      </doc>
    </method>
    <method name="getDownloadState" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current download state of the downloader.

 @return the download state]]>
      </doc>
    </method>
    <method name="getProgress" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the download progress denoting the percentage of bytes that have been downloaded,
 represented between 0.0 (0%) and 1.0 (100%).

 @return the download progress]]>
      </doc>
    </method>
    <field name="MAXIMUM_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default maximum number of bytes that will be downloaded from the server in any single HTTP
 request. Set to 32MB because that is the maximum App Engine request size.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Media HTTP Downloader, with support for both direct and resumable media downloads. Documentation
 is available <a
 href='http://code.google.com/p/google-api-java-client/wiki/MediaDownload'>here</a>.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9

 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpDownloader -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState -->
  <class name="MediaHttpDownloader.DownloadState" extends="java.lang.Enum&lt;com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Download state associated with the Media HTTP downloader.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState -->
  <!-- start interface com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener -->
  <interface name="MediaHttpDownloaderProgressListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="progressChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="downloader" type="com.google.api.client.googleapis.media.MediaHttpDownloader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called to notify that progress has been changed.

 <p>
 This method is called multiple times depending on how many chunks are downloaded. Once the
 download completes it is called one final time.
 </p>

 <p>
 The download state can be queried by calling {@link MediaHttpDownloader#getDownloadState} and
 the progress by calling {@link MediaHttpDownloader#getProgress}.
 </p>

 @param downloader Media HTTP downloader]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for receiving progress notifications for downloads.

 <p>
 Sample usage:
 </p>

 <pre>
  public static class MyDownloadProgressListener implements MediaHttpDownloaderProgressListener {

    public void progressChanged(MediaHttpDownloader downloader) throws IOException {
      switch (downloader.getDownloadState()) {
        case MEDIA_IN_PROGRESS:
          System.out.println("Download in progress");
          System.out.println("Download percentage: " + downloader.getProgress());
          break;
        case MEDIA_COMPLETE:
          System.out.println("Download Completed!");
          break;
      }
    }
  }
 </pre>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpUploader -->
  <class name="MediaHttpUploader" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MediaHttpUploader" type="AbstractInputStreamContent, HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link MediaHttpUploader}.

 <p>
 The input stream received by calling {@link AbstractInputStreamContent#getInputStream} is
 closed when the upload process is successfully completed. For resumable uploads, when the
 media content length is known, if the input stream has {@link InputStream#markSupported} as
 {@code false} then it is wrapped in an {@link BufferedInputStream} to support the
 {@link InputStream#mark} and {@link InputStream#reset} methods required for handling server
 errors. If the media content length is unknown then each chunk is stored temporarily in memory.
 This is required to determine when the last chunk is reached.
 </p>

 @param mediaContent The Input stream content of the media to be uploaded
 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="upload" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationRequestUrl" type="GenericUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media upload or resumable media upload conforming to the specifications
 listed <a href='http://code.google.com/apis/gdata/docs/resumable_upload.html'>here.</a>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpUploader} must be instantiated
 before upload called be called again.
 </p>

 <p>
 If an error is encountered during the request execution the caller is responsible for parsing
 the response correctly. For example for JSON errors:

 <pre>
    if (!response.isSuccessStatusCode()) {
      throw GoogleJsonResponseException.from(jsonFactory, response);
    }
 </pre>
 </p>

 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = batch.upload(initiationRequestUrl);
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @param initiationRequestUrl The request URL where the initiation request will be sent
 @return HTTP response]]>
      </doc>
    </method>
    <method name="serverErrorCallback"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The call back method that will be invoked by
 {@link MediaUploadExponentialBackOffPolicy#getNextBackOffMillis} if it encounters a server
 error. This method should only be used as a call back method after {@link #upload} is invoked.

 <p>
 This method will query the current status of the upload to find how many bytes were
 successfully uploaded before the server error occurred. It will then adjust the HTTP Request
 object used by the BackOffPolicy to contain the correct range header and media content chunk.
 </p>]]>
      </doc>
    </method>
    <method name="getMetadata" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns HTTP content metadata for the media request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setMetadata" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadata" type="HttpContent"/>
      <doc>
      <![CDATA[Sets HTTP content metadata for the media request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getMediaContent" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content of the media to be uploaded.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the transport to use for requests.]]>
      </doc>
    </method>
    <method name="setBackOffPolicyEnabled" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="backOffPolicyEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether the back off policy is enabled or disabled. If value is set to {@code false} then
 server errors are not handled and the upload process will fail if a server error is
 encountered. Defaults to {@code true}.]]>
      </doc>
    </method>
    <method name="isBackOffPolicyEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the back off policy is enabled or disabled. If value is set to {@code false}
 then server errors are not handled and the upload process will fail if a server error is
 encountered. Defaults to {@code true}.]]>
      </doc>
    </method>
    <method name="setDirectUploadEnabled" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="directUploadEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether direct media upload is enabled or disabled. If value is set to {@code true} then a
 direct upload will be done where the whole media content is uploaded in a single request. If
 value is set to {@code false} then the upload uses the resumable media upload protocol to
 upload in data chunks. Defaults to {@code false}.

 @since 1.9]]>
      </doc>
    </method>
    <method name="isDirectUploadEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether direct media upload is enabled or disabled. If value is set to {@code true}
 then a direct upload will be done where the whole media content is uploaded in a single
 request. If value is set to {@code false} then the upload uses the resumable media upload
 protocol to upload in data chunks. Defaults to {@code false}.

 @since 1.9]]>
      </doc>
    </method>
    <method name="setProgressListener" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="progressListener" type="com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener"/>
      <doc>
      <![CDATA[Sets the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getProgressListener" return="com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setChunkSize" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chunkSize" type="int"/>
      <doc>
      <![CDATA[Sets the maximum size of individual chunks that will get uploaded by single HTTP requests. The
 default value is {@link #DEFAULT_CHUNK_SIZE}.

 <p>
 The minimum allowable value is {@link #MINIMUM_CHUNK_SIZE} and the specified chunk size must
 be a multiple of {@link #MINIMUM_CHUNK_SIZE}.
 </p>

 <p>
 Upgrade warning: Prior to version 1.13.0-beta {@link #setChunkSize} accepted any chunk size
 above {@link #MINIMUM_CHUNK_SIZE}, it now accepts only multiples of
 {@link #MINIMUM_CHUNK_SIZE}.
 </p>]]>
      </doc>
    </method>
    <method name="getChunkSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum size of individual chunks that will get uploaded by single HTTP requests.
 The default value is {@link #DEFAULT_CHUNK_SIZE}.]]>
      </doc>
    </method>
    <method name="getDisableGZipContent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to disable GZip compression of HTTP content.

 @since 1.13]]>
      </doc>
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to disable GZip compression of HTTP content.

 <p>
 By default it is {@code false}.
 </p>

 <p>
 If {@link #setDisableGZipContent(boolean)} is set to false (the default value) then content is
 gzipped for direct media upload and resumable media uploads when content length is not known.
 Due to a current limitation, content is not gzipped for resumable media uploads when content
 length is known; this limitation will be removed in the future.
 </p>

 @since 1.13]]>
      </doc>
    </method>
    <method name="getInitiationRequestMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP method used for the initiation request.

 <p>
 The default value is {@link HttpMethods#POST}.
 </p>

 @since 1.12]]>
      </doc>
    </method>
    <method name="setInitiationRequestMethod" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationRequestMethod" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP method used for the initiation request.

 <p>
 Can only be {@link HttpMethods#POST} (for media upload) or {@link HttpMethods#PUT} (for media
 update). The default value is {@link HttpMethods#POST}.
 </p>

 @since 1.12]]>
      </doc>
    </method>
    <method name="setInitiationHeaders" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationHeaders" type="HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP headers used for the initiation request.

 <p>
 Upgrade warning: in prior version 1.12 the initiation headers were of type
 {@code GoogleHeaders}, but as of version 1.13 that type is deprecated, so we now use type
 {@link HttpHeaders}.
 </p>]]>
      </doc>
    </method>
    <method name="getInitiationHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers used for the initiation request.

 <p>
 Upgrade warning: in prior version 1.12 the initiation headers were of type
 {@code GoogleHeaders}, but as of version 1.13 that type is deprecated, so we now use type
 {@link HttpHeaders}.
 </p>]]>
      </doc>
    </method>
    <method name="getNumBytesUploaded" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the total number of bytes uploaded by this uploader or {@code 0} for direct uploads when
 the content length is not known.

 @return the number of bytes uploaded]]>
      </doc>
    </method>
    <method name="getUploadState" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current upload state of the uploader.

 @return the upload state]]>
      </doc>
    </method>
    <method name="getProgress" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Gets the upload progress denoting the percentage of bytes that have been uploaded, represented
 between 0.0 (0%) and 1.0 (100%).

 <p>
 Do not use if the specified {@link AbstractInputStreamContent} has no content length specified.
 Instead, consider using {@link #getNumBytesUploaded} to denote progress.
 </p>

 @throws IllegalArgumentException if the specified {@link AbstractInputStreamContent} has no
         content length
 @return the upload progress]]>
      </doc>
    </method>
    <field name="CONTENT_LENGTH_HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Upload content type header.

 @since 1.13]]>
      </doc>
    </field>
    <field name="CONTENT_TYPE_HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Upload content length header.

 @since 1.13]]>
      </doc>
    </field>
    <field name="MINIMUM_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum number of bytes that can be uploaded to the server (set to 256KB).]]>
      </doc>
    </field>
    <field name="DEFAULT_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default maximum number of bytes that will be uploaded to the server in any single HTTP request
 (set to 10 MB).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Media HTTP Uploader, with support for both direct and resumable media uploads. Documentation is
 available <a href='http://code.google.com/p/google-api-java-client/wiki/MediaUpload'>here</a>.

 <p>
 For resumable uploads, when the media content length is known, if the provided
 {@link InputStream} has {@link InputStream#markSupported} as {@code false} then it is wrapped in
 an {@link BufferedInputStream} to support the {@link InputStream#mark} and
 {@link InputStream#reset} methods required for handling server errors. If the media content
 length is unknown then each chunk is stored temporarily in memory. This is required to determine
 when the last chunk is reached.
 </p>

 <p>
 See {@link #setDisableGZipContent(boolean)} for information on when content is gzipped
 and how to control that behavior.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9

 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpUploader -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpUploader.UploadState -->
  <class name="MediaHttpUploader.UploadState" extends="java.lang.Enum&lt;com.google.api.client.googleapis.media.MediaHttpUploader.UploadState&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Upload state associated with the Media HTTP uploader.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpUploader.UploadState -->
  <!-- start interface com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener -->
  <interface name="MediaHttpUploaderProgressListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="progressChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uploader" type="com.google.api.client.googleapis.media.MediaHttpUploader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called to notify that progress has been changed.

 <p>
 This method is called once before and after the initiation request. For media uploads it is
 called multiple times depending on how many chunks are uploaded. Once the upload completes it
 is called one final time.
 </p>

 <p>
 The upload state can be queried by calling {@link MediaHttpUploader#getUploadState} and the
 progress by calling {@link MediaHttpUploader#getProgress}.
 </p>

 @param uploader Media HTTP uploader]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for receiving progress notifications for uploads.

 <p>
 Sample usage (if media content length is provided, else consider using
 {@link MediaHttpUploader#getNumBytesUploaded} instead of {@link MediaHttpUploader#getProgress}:
 </p>

 <pre>
  public static class MyUploadProgressListener implements MediaHttpUploaderProgressListener {

    public void progressChanged(MediaHttpUploader uploader) throws IOException {
      switch (uploader.getUploadState()) {
        case INITIATION_STARTED:
          System.out.println("Initiation Started");
          break;
        case INITIATION_COMPLETE:
          System.out.println("Initiation Completed");
          break;
        case MEDIA_IN_PROGRESS:
          System.out.println("Upload in progress");
          System.out.println("Upload percentage: " + uploader.getProgress());
          break;
        case MEDIA_COMPLETE:
          System.out.println("Upload Completed!");
          break;
      }
    }
  }
 </pre>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener -->
</package>
<package name="com.google.api.client.googleapis.services">
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClient -->
  <class name="AbstractGoogleClient" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, ObjectParser"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with required parameters.

 <p>
 Use {@link Builder} if you need to specify any of the optional parameters.
 </p>

 @param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param objectParser object parser]]>
      </doc>
    </constructor>
    <constructor name="AbstractGoogleClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, ObjectParser, com.google.api.client.googleapis.services.GoogleClientRequestInitializer, java.lang.String, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param objectParser object parser or {@code null} for none
 @param googleClientRequestInitializer Google request initializer or {@code null} for none
 @param applicationName application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @param suppressPatternChecks whether discovery pattern checks should be suppressed on required
        parameters]]>
      </doc>
    </constructor>
    <method name="getRootUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded root URL of the service, for example
 {@code "https://www.googleapis.com/"}.

 <p>
 Must end with a "/".
 </p>]]>
      </doc>
    </method>
    <method name="getServicePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 Must end with a "/" and not begin with a "/". It is allowed to be an empty string {@code ""} or
 a forward slash {@code "/"}, if it is a forward slash then it is treated as an empty string
 </p>]]>
      </doc>
    </method>
    <method name="getBaseUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded base URL of the service, for example
 {@code "https://www.googleapis.com/tasks/v1/"}.

 <p>
 Must end with a "/". It is guaranteed to be equal to {@code getRootUrl() + getServicePath()}.
 </p>]]>
      </doc>
    </method>
    <method name="getApplicationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the application name to be sent in the User-Agent header of each request or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="getRequestFactory" return="HttpRequestFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request factory.]]>
      </doc>
    </method>
    <method name="getGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getObjectParser" return="ObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the object parser or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="httpClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a {@link AbstractGoogleClientRequest} using a
 {@link GoogleClientRequestInitializer}.

 <p>
 Must be called before the Google client request is executed, preferably right after the request
 is instantiated. Sample usage:
 </p>

 <pre>
    public class Get extends HttpClientRequest {
      ...
    }

    public Get get(String userId) throws IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param httpClientRequest Google client request type]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch()
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch(httpRequestInitializer)
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @param httpRequestInitializer The initializer to use when creating the top-level batch HTTP
        request or {@code null} for none
 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract thread-safe Google client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClient -->
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClient.Builder -->
  <class name="AbstractGoogleClient.Builder" extends="java.lang.Object"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, ObjectParser, HttpRequestInitializer"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport The transport to use for requests
 @param rootUrl root URL of the service. Must end with a "/"
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.services.AbstractGoogleClient"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link AbstractGoogleClient}.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getObjectParser" return="ObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the object parser used or {@code null} if not specified. *

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRootUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded root URL of the service, for example
 {@code https://www.googleapis.com/}.

 <p>
 Must be URL-encoded and must end with a "/".
 </p>]]>
      </doc>
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URL-encoded root URL of the service, for example {@code https://www.googleapis.com/}
 .
 <p>
 If the specified root URL does not end with a "/" then a "/" is added to the end.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServicePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 Must be URL-encoded and must end with a "/" and not begin with a "/". It is allowed to be an
 empty string {@code ""}.
 </p>]]>
      </doc>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 It is allowed to be an empty string {@code ""} or a forward slash {@code "/"}, if it is a
 forward slash then it is treated as an empty string. This is determined when the library is
 generated and normally should not be changed.
 </p>

 <p>
 If the specified service path does not end with a "/" then a "/" is added to the end. If the
 specified service path begins with a "/" then the "/" is removed.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
      <doc>
      <![CDATA[Sets the Google client request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getHttpRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Sets the HTTP request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getApplicationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the application name to be used in the UserAgent header of each request or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the application name to be used in the UserAgent header of each request or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.]]>
      </doc>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
      <doc>
      <![CDATA[Sets whether discovery pattern checks should be suppressed on required parameters.

 <p>
 Default value is {@code false}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link AbstractGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClient.Builder -->
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClientRequest -->
  <class name="AbstractGoogleClientRequest" extends="GenericData"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClient, java.lang.String, java.lang.String, HttpContent, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractGoogleClient Google client
 @param requestMethod HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param httpContent HTTP content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getDisableGZipContent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to disable GZip compression of HTTP content.]]>
      </doc>
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to disable GZip compression of HTTP content.

 <p>
 By default it is {@code false}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRequestMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP method.]]>
      </doc>
    </method>
    <method name="getUriTemplate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI template for the path relative to the base URL.]]>
      </doc>
    </method>
    <method name="getHttpContent" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.services.AbstractGoogleClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRequestHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers used for the Google client request.]]>
      </doc>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP headers used for the Google client request.

 <p>
 These headers are set on the request after {@link #buildHttpRequest} is called, this means that
 {@link HttpRequestInitializer#initialize} is called first.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getLastResponseHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers of the last response or {@code null} before request has been executed.]]>
      </doc>
    </method>
    <method name="getLastStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status code of the last response or {@code -1} before request has been executed.]]>
      </doc>
    </method>
    <method name="getLastStatusMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status message of the last response or {@code null} before request has been
 executed.]]>
      </doc>
    </method>
    <method name="getResponseClass" return="java.lang.Class&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the response class to parse into.]]>
      </doc>
    </method>
    <method name="getMediaHttpUploader" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the media HTTP Uploader or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initializeMediaUpload"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="mediaContent" type="AbstractInputStreamContent"/>
      <doc>
      <![CDATA[Initializes the media HTTP uploader based on the media content.

 @param mediaContent media content]]>
      </doc>
    </method>
    <method name="getMediaHttpDownloader" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the media HTTP downloader or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initializeMediaDownload"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the media HTTP downloader.]]>
      </doc>
    </method>
    <method name="buildHttpRequestUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new instance of {@link GenericUrl} suitable for use against this service.

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return newly created {@link GenericUrl}]]>
      </doc>
    </method>
    <method name="buildHttpRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a request suitable for use against this service.

 <p>
 Subclasses may override by calling the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="buildHttpRequestUsingHead" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a request suitable for use against this service, but using HEAD instead of GET.

 <p>
 Only supported when the original request method is GET.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="executeUnparsed" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the raw metadata {@link HttpResponse}.

 <p>
 Callers are responsible for disconnecting the HTTP response by calling
 {@link HttpResponse#disconnect}. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeUnparsed();
     try {
       // process response..
     } finally {
       response.disconnect();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="executeMedia" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and returns the raw media {@link HttpResponse}.

 <p>
 Callers are responsible for disconnecting the HTTP response by calling
 {@link HttpResponse#disconnect}. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeMedia();
     try {
       // process response..
     } finally {
       response.disconnect();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="executeUsingHead" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request using HEAD to the server and returns the raw metadata
 {@link HttpResponse} for the response headers.

 <p>
 Only supported when the original request method is GET. The response content is assumed to be
 empty and ignored. Calls {@link HttpResponse#ignore()} so there is no need to disconnect the
 response. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeUsingHead();
     // look at response.getHeaders()
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="newExceptionOnError" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <doc>
      <![CDATA[Returns the exception to throw on an HTTP error response as defined by
 {@link HttpResponse#isSuccessStatusCode()}.

 <p>
 It is guaranteed that {@link HttpResponse#isSuccessStatusCode()} is {@code false}. Default
 implementation is to call {@link HttpResponseException#HttpResponseException(HttpResponse)},
 but subclasses may override.
 </p>

 @param response HTTP response
 @return exception to throw]]>
      </doc>
    </method>
    <method name="execute" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the parsed metadata response.

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return parsed HTTP response]]>
      </doc>
    </method>
    <method name="executeAsInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the metadata content input stream of
 {@link HttpResponse}.

 <p>
 Callers are responsible for closing the input stream after it is processed. Example sample:
 </p>

 <pre>
     InputStream is = request.executeAsInputStream();
     try {
       // Process input stream..
     } finally {
       is.close();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return input stream of the response content]]>
      </doc>
    </method>
    <method name="executeMediaAsInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and returns the media content input stream of
 {@link HttpResponse}.

 <p>
 Callers are responsible for closing the input stream after it is processed. Example sample:
 </p>

 <pre>
     InputStream is = request.executeMediaAsInputStream();
     try {
       // Process input stream..
     } finally {
       is.close();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return input stream of the response content]]>
      </doc>
    </method>
    <method name="executeAndDownloadTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and writes the metadata content input stream of
 {@link HttpResponse} into the given destination output stream.

 <p>
 This method closes the content of the HTTP response from {@link HttpResponse#getContent()}.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="executeMediaAndDownloadTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and writes the media content input stream of
 {@link HttpResponse} into the given destination output stream.

 <p>
 This method closes the content of the HTTP response from {@link HttpResponse#getContent()}.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="queue"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="batchRequest" type="com.google.api.client.googleapis.batch.BatchRequest"/>
      <param name="errorClass" type="java.lang.Class&lt;E&gt;"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.BatchCallback&lt;T, E&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the request into the specified batch request container using the specified error class.

 <p>
 Batched requests are then executed when {@link BatchRequest#execute()} is called.
 </p>

 @param batchRequest batch request container
 @param errorClass data class the unsuccessful response will be parsed into or
        {@code Void.class} to ignore the content
 @param callback batch callback]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract Google client request for a {@link AbstractGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> type of the response

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClientRequest -->
  <!-- start class com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer -->
  <class name="CommonGoogleClientRequestInitializer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    <constructor name="CommonGoogleClientRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CommonGoogleClientRequestInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <constructor name="CommonGoogleClientRequestInitializer" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged
 @param userIp user IP or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Subclasses should call super implementation in order to set the key and userIp.

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="getKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the API key or {@code null} to leave it unchanged.]]>
      </doc>
    </method>
    <method name="getUserIp" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user IP or {@code null} to leave it unchanged.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google common client request initializer implementation for setting properties like key and
 userIp.

 <p>
 The simplest usage is to use it to set the key parameter:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new CommonGoogleClientRequestInitializer(KEY);
 </pre>

 <p>
 There is also a constructor to set both the key and userIp parameters:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new CommonGoogleClientRequestInitializer(KEY, USER_IP);
 </pre>

 <p>
 If you want to implement custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer extends CommonGoogleClientRequestInitializer {

    {@literal @}Override
    public void initialize(AbstractGoogleClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer2 extends CommonGoogleClientRequestInitializer {

    public MyRequestInitializer2() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initialize(AbstractGoogleClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      super.initialize(request); // must be called to set the key and userIp parameters
      // insert some additional logic
    }
  }
 </pre>

 <p>
 Subclasses should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer -->
  <!-- start class com.google.api.client.googleapis.services.GoogleClient -->
  <class name="GoogleClient" extends="JsonHttpClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.14) Use {@code
             com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient} instead.">
    <constructor name="GoogleClient" type="HttpTransport, JsonFactory, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with required parameters.

 <p>
 Use {@link Builder} if you need to specify any of the optional parameters.
 </p>

 @param transport The transport to use for requests
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param baseUrl The base URL of the service. Must end with a "/"]]>
      </doc>
    </constructor>
    <constructor name="GoogleClient" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with required parameters.

 <p>
 Use {@link Builder} if you need to specify any of the optional parameters.
 </p>

 @param transport The transport to use for requests
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param rootUrl The root URL of the service. Must end with a "/"
 @param servicePath The service path of the service. Must end with a "/" and not begin with a
        "/". It is allowed to be an empty string {@code ""}
 @param httpRequestInitializer The HTTP request initializer or {@code null} for none
 @since 1.10]]>
      </doc>
    </constructor>
    <constructor name="GoogleClient" type="HttpTransport, JsonHttpRequestInitializer, HttpRequestInitializer, JsonFactory, JsonObjectParser, java.lang.String, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link GoogleClient}.

 @param transport The transport to use for requests
 @param jsonHttpRequestInitializer The initializer to use when creating an
        {@link JsonHttpRequest} or {@code null} for none
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param jsonObjectParser JSON parser to use or {@code null} if unused
 @param baseUrl The base URL of the service. Must end with a "/"
 @param applicationName The application name to be sent in the User-Agent header of requests or
        {@code null} for none]]>
      </doc>
    </constructor>
    <constructor name="GoogleClient" type="HttpTransport, JsonHttpRequestInitializer, HttpRequestInitializer, JsonFactory, JsonObjectParser, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link GoogleClient}.

 @param transport The transport to use for requests
 @param jsonHttpRequestInitializer The initializer to use when creating an
        {@link JsonHttpRequest} or {@code null} for none
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param jsonObjectParser JSON parser to use or {@code null} if unused
 @param rootUrl The root URL of the service. Must end with a "/"
 @param servicePath The service path of the service. Must end with a "/" and not begin with a
        "/". It is allowed to be an empty string {@code ""}
 @param applicationName The application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @since 1.10]]>
      </doc>
    </constructor>
    <constructor name="GoogleClient" type="HttpTransport, JsonHttpRequestInitializer, HttpRequestInitializer, JsonFactory, JsonObjectParser, java.lang.String, java.lang.String, java.lang.String, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link GoogleClient}.

 @param transport The transport to use for requests
 @param jsonHttpRequestInitializer The initializer to use when creating an
        {@link JsonHttpRequest} or {@code null} for none
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param jsonObjectParser JSON parser to use or {@code null} if unused
 @param rootUrl The root URL of the service. Must end with a "/"
 @param servicePath The service path of the service. Must end with a "/" and not begin with a
        "/". It is allowed to be an empty string {@code ""}
 @param applicationName The application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @since 1.11]]>
      </doc>
    </constructor>
    <method name="buildHttpRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="HttpMethod"/>
      <param name="url" type="GenericUrl"/>
      <param name="body" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create an {@link HttpRequest} suitable for use against this service.

 @param method HTTP Method type
 @param url The complete URL of the service where requests should be sent. It includes the base
        path along with the URI template
 @param body A POJO that can be serialized into JSON or {@code null} for none
 @return newly created {@link HttpRequest}]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch()
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch(httpRequestInitializer)
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @param httpRequestInitializer The initializer to use when creating the top-level batch HTTP
        request or {@code null} for none
 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="executeUnparsed" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="HttpMethod"/>
      <param name="url" type="GenericUrl"/>
      <param name="body" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="executeUnparsed" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.

 @since 1.11]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google API client.

 @since 1.6
 @author Ravi Mistry
 @deprecated (scheduled to be removed in 1.14) Use {@code
             com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient} instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.GoogleClient -->
  <!-- start class com.google.api.client.googleapis.services.GoogleClient.Builder -->
  <class name="GoogleClient.Builder" extends="JsonHttpClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.14) Use
             {@link com.google.api.client.googleapis.services.AbstractGoogleClient.Builder}
             instead.">
    <constructor name="GoogleClient.Builder" type="HttpTransport, JsonFactory, GenericUrl"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport The transport to use for requests
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param baseUrl The base URL of the service. Must end with a "/"]]>
      </doc>
    </constructor>
    <constructor name="GoogleClient.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport The transport to use for requests
 @param jsonFactory A factory for creating JSON parsers and serializers
 @param rootUrl The root URL of the service. Must end with a "/"
 @param servicePath The service path of the service. Must end with a "/" and not begin with a
        "/". It is allowed to be an empty string {@code ""}
 @param httpRequestInitializer The HTTP request initializer or {@code null} for none
 @since 1.10]]>
      </doc>
    </constructor>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.

 @since 1.11]]>
      </doc>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.GoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
      <doc>
      <![CDATA[Sets whether discovery pattern checks should be suppressed on required parameters.

 <p>
 Default value is {@code false}.
 </p>

 @since 1.11]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.services.GoogleClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link GoogleClient}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link GoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.6
 @deprecated (scheduled to be removed in 1.14) Use
             {@link com.google.api.client.googleapis.services.AbstractGoogleClient.Builder}
             instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.GoogleClient.Builder -->
  <!-- start interface com.google.api.client.googleapis.services.GoogleClientRequestInitializer -->
  <interface name="GoogleClientRequestInitializer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a Google client request.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google client request initializer.

 <p>
 For example, this might be used to set a key URL query parameter on all requests:
 </p>

 <pre>
  public class KeyRequestInitializer implements GoogleClientRequestInitializer {
    public void initialize(GoogleClientRequest<?> request) {
      request.put("key", KEY);
    }
  }
 </pre>

 <p>
 Implementations should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.services.GoogleClientRequestInitializer -->
  <!-- start class com.google.api.client.googleapis.services.GoogleKeyInitializer -->
  <class name="GoogleKeyInitializer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.14) Instead use either
             {@link CommonGoogleClientRequestInitializer} or a subclass of it.">
    <implements name="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    <constructor name="GoogleKeyInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="JsonHttpRequest"/>
    </method>
    <doc>
    <![CDATA[Google client request initializer that specifies a Google API key for all requests.

 <p>
 This is needed when doing unauthenticated access to Google APIs. Otherwise, you will only be able
 to make a small number of queries. When you exceed this limit, you will receive a "403 Forbidden"
 error with the message "Daily Limit Exceeded. Please sign up". See <a
 href="http://code.google.com/p/google-api-java-client/wiki/OAuth2#Unauthenticated_access"
 >Unauthenticated access</a> for more details.
 </p>

 <p>
 Note that this is not needed when doing authenticated access with an OAuth 2.0 access token,
 because the OAuth 2.0 client ID is already associated with the same project as the API key.
 </p>

 @since 1.8
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.14) Instead use either
             {@link CommonGoogleClientRequestInitializer} or a subclass of it.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.GoogleKeyInitializer -->
</package>
<package name="com.google.api.client.googleapis.services.json">
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient -->
  <class name="AbstractGoogleJsonClient" extends="com.google.api.client.googleapis.services.AbstractGoogleClient"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClient" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <constructor name="AbstractGoogleJsonClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, JsonObjectParser, com.google.api.client.googleapis.services.GoogleClientRequestInitializer, java.lang.String, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param jsonObjectParser JSON object parser
 @param googleClientRequestInitializer Google request initializer or {@code null} for none
 @param applicationName application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @param suppressPatternChecks whether discovery pattern checks should be suppressed on required
        parameters]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Factory.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google JSON client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient -->
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder -->
  <class name="AbstractGoogleJsonClient.Builder" extends="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClient.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Factory.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Builder for {@link AbstractGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder -->
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest -->
  <class name="AbstractGoogleJsonClientRequest" extends="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClientRequest" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient, java.lang.String, java.lang.String, java.lang.Object, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractGoogleJsonClient Google JSON client
 @param requestMethod HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param jsonContent POJO that can be serialized into JSON content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <method name="queue"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="batchRequest" type="com.google.api.client.googleapis.batch.BatchRequest"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.json.JsonBatchCallback&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the request into the specified batch request container.

 <p>
 Batched requests are then executed when {@link BatchRequest#execute()} is called.
 </p>
 <p>
 Example usage:
 </p>

 <pre>
     request.queue(batchRequest, new JsonBatchCallback&lt;SomeResponseType&gt;() {

       public void onSuccess(SomeResponseType content, HttpHeaders responseHeaders) {
         log("Success");
       }

       public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {
         log(e.getMessage());
       }
     });
 </pre>


 @param batchRequest batch request container
 @param callback batch callback]]>
      </doc>
    </method>
    <method name="newExceptionOnError" return="com.google.api.client.googleapis.json.GoogleJsonResponseException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
    </method>
    <method name="getJsonContent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns POJO that can be serialized into JSON content or {@code null} for none.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google JSON request for a {@link AbstractGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest -->
  <!-- start class com.google.api.client.googleapis.services.json.CommonGoogleJsonClientRequestInitializer -->
  <class name="CommonGoogleJsonClientRequestInitializer" extends="com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonGoogleJsonClientRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CommonGoogleJsonClientRequestInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <constructor name="CommonGoogleJsonClientRequestInitializer" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged
 @param userIp user IP or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="initializeJsonRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a Google JSON client request.

 <p>
 Default implementation does nothing. Called from
 {@link #initialize(AbstractGoogleClientRequest)}.
 </p>

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google JSON client request initializer implementation for setting properties like key and userIp.

 <p>
 The simplest usage is to use it to set the key parameter:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new CommonGoogleJsonClientRequestInitializer(KEY);
 </pre>

 <p>
 There is also a constructor to set both the key and userIp parameters:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new CommonGoogleJsonClientRequestInitializer(KEY, USER_IP);
 </pre>

 <p>
 If you want to implement custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer extends CommonGoogleJsonClientRequestInitializer {

    {@literal @}Override
    public void initialize(AbstractGoogleJsonClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer2 extends CommonGoogleJsonClientRequestInitializer {

    public MyKeyRequestInitializer() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initializeJsonRequest(AbstractGoogleJsonClientRequest{
        @literal <}?{@literal >} request) throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Subclasses should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.CommonGoogleJsonClientRequestInitializer -->
</package>
<package name="com.google.api.client.googleapis.testing.services">
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClient -->
  <class name="MockGoogleClient" extends="com.google.api.client.googleapis.services.AbstractGoogleClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, ObjectParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param objectParser object parser]]>
      </doc>
    </constructor>
    <constructor name="MockGoogleClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, ObjectParser, com.google.api.client.googleapis.services.GoogleClientRequestInitializer, java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param objectParser object parser or {@code null} for none
 @param googleClientRequestInitializer Google request initializer or {@code null} for none
 @param applicationName application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @param suppressPatternChecks whether discovery pattern checks should be suppressed on required
        parameters]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Thread-safe mock Google client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClient -->
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder -->
  <class name="MockGoogleClient.Builder" extends="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, ObjectParser, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport The transport to use for requests
 @param rootUrl root URL of the service. Must end with a "/"
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.testing.services.MockGoogleClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Builder for {@link MockGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder -->
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClientRequest -->
  <class name="MockGoogleClientRequest" extends="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClient, java.lang.String, java.lang.String, HttpContent, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param client Google client
 @param method HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param content HTTP content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.testing.services.MockGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.testing.services.MockGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <doc>
    <![CDATA[Thread-safe mock Google request.

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClientRequest -->
</package>
<package name="com.google.api.client.googleapis.testing.services.json">
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient -->
  <class name="MockGoogleJsonClient" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClient" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <constructor name="MockGoogleJsonClient" type="HttpTransport, HttpRequestInitializer, java.lang.String, java.lang.String, JsonObjectParser, com.google.api.client.googleapis.services.GoogleClientRequestInitializer, java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param rootUrl root URL of the service
 @param servicePath service path
 @param jsonObjectParser JSON object parser
 @param googleClientRequestInitializer Google request initializer or {@code null} for none
 @param applicationName application name to be sent in the User-Agent header of requests or
        {@code null} for none
 @param suppressPatternChecks whether discovery pattern checks should be suppressed on required
        parameters]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Thread-safe mock Google JSON client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient -->
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder -->
  <class name="MockGoogleJsonClient.Builder" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClient.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Builder for {@link MockGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder -->
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest -->
  <class name="MockGoogleJsonClientRequest" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClientRequest" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient, java.lang.String, java.lang.String, java.lang.Object, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param client Google client
 @param method HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param content A POJO that can be serialized into JSON or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <doc>
    <![CDATA[Thread-safe mock Google JSON request.

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest -->
</package>
<package name="com.google.api.client.googleapis.xml.atom">
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <class name="AtomPatchContent" extends="AtomContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchContent" type="XmlNamespaceDictionary, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @param patchEntry key/value pair data for the Atom PATCH entry
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="setMediaType" return="com.google.api.client.googleapis.xml.atom.AtomPatchContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="HttpMediaType"/>
    </method>
    <doc>
    <![CDATA[Serializes Atom XML PATCH HTTP content based on the data key/value mapping object for an Atom
 entry.

 <p>
 Default value for {@link #getType()} is {@link Xml#MEDIA_TYPE}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
<code>
  static void setContent(
      HttpRequest request, XmlNamespaceDictionary namespaceDictionary, Object patchEntry) {
    request.setContent(new AtomPatchContent(namespaceDictionary, patchEntry));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <class name="AtomPatchRelativeToOriginalContent" extends="AbstractXmlHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchRelativeToOriginalContent" type="XmlNamespaceDictionary, java.lang.Object, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="HttpMediaType"/>
    </method>
    <method name="getPatchedEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key name/value pairs for the updated/patched Atom entry.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getOriginalEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key name/value pairs for the original unmodified Atom entry.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes an optimal Atom XML PATCH HTTP content based on the data key/value mapping object for
 an Atom entry, by comparing the original value to the patched value.

 <p>
 Sample usage:
 </p>

 <pre>
 <code>
  static void setContent(HttpRequest request, XmlNamespaceDictionary namespaceDictionary,
      Object originalEntry, Object patchedEntry) {
    request.setContent(
        new AtomPatchRelativeToOriginalContent(namespaceDictionary, originalEntry, patchedEntry));
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <class name="GoogleAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFieldsFor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs. It cannot be a
 {@link Map}, {@link GenericData} or a {@link Collection}.

 @param dataClass data class of key/value pairs]]>
      </doc>
    </method>
    <method name="getFeedFields" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="feedClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs for the feed class
 and for the entry class. This should only be used if the feed class does not contain the entry
 class as a field. The data classes cannot be a {@link Map}, {@link GenericData} or a
 {@link Collection}.

 @param feedClass feed data class
 @param entryClass entry data class]]>
      </doc>
    </method>
    <method name="computePatch" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="patched" type="java.lang.Object"/>
      <param name="original" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compute the patch object of key/value pairs from the given original and patched objects, adding
 a {@code @gd:fields} key for the fields mask.

 @param patched patched object
 @param original original object
 @return patch object of key/value pairs]]>
      </doc>
    </method>
    <field name="GD_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[GData namespace.

 @since 1.0]]>
      </doc>
    </field>
    <field name="ERROR_CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content type used on an error formatted in XML.

 @since 1.5]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for working with the Atom XML of Google Data APIs.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <!-- start class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
  <class name="MultiKindFeedParser" extends="&lt;any&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="setEntryClasses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entryClasses" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Sets the entry classes to use when parsing.]]>
      </doc>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="create" return="com.google.api.client.googleapis.xml.atom.MultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <param name="namespaceDictionary" type="XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClasses" type="java.lang.Class[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and entry classes.

 @param <T> feed type
 @param <E> entry type
 @param response HTTP response
 @param namespaceDictionary XML namespace dictionary
 @param feedClass feed class
 @param entryClasses entry class
 @return Atom multi-kind feed pull parser
 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[GData Atom feed pull parser when the entry class can be computed from the kind.

 @param <T> feed type

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
</package>

</api>
