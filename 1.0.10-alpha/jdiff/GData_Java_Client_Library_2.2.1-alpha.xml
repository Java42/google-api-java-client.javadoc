<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Wed Aug 25 13:43:11 EDT 2010 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="GData Java Client Library 2.2.1-alpha"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/yanivi/programs/jdiff-1.1.1/jdiff.jar:/home/yanivi/programs/jdiff-1.1.1/xerces.jar -d /home/yanivi/eclipse/workspaces/gdata/javadoc/1.0.10-alpha/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-nodeps.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-trax.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/local/buildtools/java/jdk6-google-v2/lib/tools.jar -sourcepath /tmp/gdata/src -apiname GData Java Client Library 2.2.1-alpha -baseURI http://www.w3.org -apidir /home/yanivi/eclipse/workspaces/gdata/javadoc/1.0.10-alpha/jdiff -source 1.5 -->
<package name="com.google.api.client.android.xml">
  <!-- start class com.google.api.client.android.xml.AndroidXmlParserFactory -->
  <class name="AndroidXmlParserFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.xml.XmlParserFactory"/>
    <constructor name="AndroidXmlParserFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createSerializer" return="XmlSerializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[XML parser factory for Android.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.android.xml.AndroidXmlParserFactory -->
  <doc>
  <![CDATA[Android XML utilities.

<p>This package depends on the {@link com.google.api.client.http}, and
{@link com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.apache">
  <!-- start class com.google.api.client.apache.ApacheHttpTransport -->
  <class name="ApacheHttpTransport" extends="com.google.api.client.http.LowLevelHttpTransport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="supportsPatch" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="buildPostRequest" return="com.google.api.client.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="buildPutRequest" return="com.google.api.client.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <field name="INSTANCE" type="com.google.api.client.apache.ApacheHttpTransport"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Singleton instance of this transport.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP low-level transport based on the Apache HTTP Client library.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.apache.ApacheHttpTransport -->
  <doc>
  <![CDATA[HTTP Transport library for Google API's based on Apache HTTP Client version 4.

<p>This package depends on the {@link com.google.api.client.http} and {@code
org.apache.http.*} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.auth">
  <!-- start class com.google.api.client.auth.RsaSha -->
  <class name="RsaSha" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPrivateKeyFromKeystore" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStream" type="java.io.InputStream"/>
      <param name="storePass" type="java.lang.String"/>
      <param name="alias" type="java.lang.String"/>
      <param name="keyPass" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Retrieves the private key from the specified key store.
 
 @param keyStream input stream to the key store file
 @param storePass password protecting the key store file
 @param alias alias under which the private key is stored
 @param keyPass password protecting the private key
 @return the private key from the specified key store
 @throws GeneralSecurityException if the key store cannot be loaded
 @throws IOException if the file cannot be accessed]]>
      </doc>
    </method>
    <method name="getPrivateKeyFromPk8" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Reads a {@code PKCS#8} format private key from a given file.
 
 @throws Base64DecoderException
 @throws NoSuchAlgorithmException]]>
      </doc>
    </method>
    <method name="sign" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="privateKey" type="java.security.PrivateKey"/>
      <param name="data" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Signs the given data using the given private key.
 
 @throws GeneralSecurityException general security exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility methods for {@code "RSA-SHA1"} signing method.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.RsaSha -->
  <doc>
  <![CDATA[Utilities for authentication and authorization.

<p>This package depends on the {@link com.google.api.client.util} package.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.auth.oauth">
  <!-- start class com.google.api.client.auth.oauth.AbstractOAuthGetToken -->
  <class name="AbstractOAuthGetToken" extends="com.google.api.client.http.GenericUrl"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractOAuthGetToken" type="java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="execute" return="com.google.api.client.auth.oauth.OAuthCredentialsResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes the HTTP request for a temporary or long-lived token.
 
 @return OAuth credentials response object
 @throws HttpResponseException for an HTTP error code
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of the OAuth authentication provider. Subclasses may
 override by calling this super implementation and then adding OAuth
 parameters.]]>
      </doc>
    </method>
    <field name="consumerKey" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required identifier portion of the client credentials (equivalent to a
 username).]]>
      </doc>
    </field>
    <field name="signer" type="com.google.api.client.auth.oauth.OAuthSigner"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required OAuth signature algorithm.]]>
      </doc>
    </field>
    <field name="usePost" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code true} for POST request or the default {@code false} for GET request.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic OAuth 1.0a URL to request a temporary or long-lived token from an
 authorization server.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.AbstractOAuthGetToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl -->
  <class name="OAuthAuthorizeTemporaryTokenUrl" extends="com.google.api.client.http.GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthAuthorizeTemporaryTokenUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUserAuthorizationUrl encoded user authorization URL]]>
      </doc>
    </constructor>
    <field name="temporaryToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The temporary credentials token obtained from temporary credentials request
 in the "oauth_token" parameter. It is found in the
 {@link OAuthCredentialsResponse#token} returned by
 {@link OAuthGetTemporaryToken#execute()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[OAuth 1.0a URL builder for an authorization web page to allow the end user to
 authorize the temporary token.
 <p>
 The {@link #temporaryToken} should be set from the
 {@link OAuthCredentialsResponse#token} returned by
 {@link OAuthGetTemporaryToken#execute()}. Use {@link #build()} to build the
 authorization URL. If a {@link OAuthGetTemporaryToken#callback} was
 specified, after the end user grants the authorization, the authorization
 server will redirect to that callback URL. To parse the response, use
 {@link OAuthCallbackUrl}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl -->
  <!-- start class com.google.api.client.auth.oauth.OAuthCallbackUrl -->
  <class name="OAuthCallbackUrl" extends="com.google.api.client.http.GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthCallbackUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The temporary credentials identifier received from the client.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The verification code.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic URL that parses the callback URL after a temporary token has been
 authorized by the end user.
 <p>
 The {@link #verifier} is required in order to exchange the authorized
 temporary token for a long-lived access token in
 {@link OAuthGetAccessToken#verifier}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthCallbackUrl -->
  <!-- start class com.google.api.client.auth.oauth.OAuthCredentialsResponse -->
  <class name="OAuthCredentialsResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthCredentialsResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Credentials token.]]>
      </doc>
    </field>
    <field name="tokenSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Credentials shared-secret for use with {@code "HMAC-SHA1"} signature
 algorithm. Used for {@link OAuthHmacSigner#tokenSharedSecret}.]]>
      </doc>
    </field>
    <field name="callbackConfirmed" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "true"} for temporary credentials request or {@code null} for a
 token credentials request. The parameter is used to differentiate from
 previous versions of the protocol.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Data to parse a success response to a request for temporary or token
 credentials.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthCredentialsResponse -->
  <!-- start class com.google.api.client.auth.oauth.OAuthGetAccessToken -->
  <class name="OAuthGetAccessToken" extends="com.google.api.client.auth.oauth.AbstractOAuthGetToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthGetAccessToken" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="temporaryToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required temporary token. It is retrieved from the
 {@link OAuthCredentialsResponse#token} returned from
 {@link OAuthGetTemporaryToken#execute()}.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required verifier code received from the server when the temporary token
 was authorized. It is retrieved from {@link OAuthCallbackUrl#verifier}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic OAuth 1.0a URL to request to exchange the temporary credentials token
 (or "request token") for a long-lived credentials token (or "access token")
 from an authorization server.
 <p>
 Use {@link #execute()} to execute the request. The long-lived access token
 acquired with this request is found in {@link OAuthCredentialsResponse#token}
 . This token must be stored. It may then be used to authorize HTTP requests
 to protected resources by setting the {@link OAuthParameters#token}, and
 invoking
 {@link OAuthParameters#signRequestsUsingAuthorizationHeader(HttpTransport)}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthGetAccessToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthGetTemporaryToken -->
  <class name="OAuthGetTemporaryToken" extends="com.google.api.client.auth.oauth.AbstractOAuthGetToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthGetTemporaryToken" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerUrl encoded authorization server URL]]>
      </doc>
    </constructor>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="callback" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional absolute URI back to which the server will redirect the resource
 owner when the Resource Owner Authorization step is completed or {@code
 null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic OAuth 1.0a URL to request a temporary credentials token (or
 "request token") from an authorization server.
 <p>
 Use {@link #execute()} to execute the request. The temporary token acquired
 with this request is found in {@link OAuthCredentialsResponse#token}. This
 temporary token is used in
 {@link OAuthAuthorizeTemporaryTokenUrl#temporaryToken} to direct the end user
 to an authorization page to allow the end user to authorize the temporary
 token.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthGetTemporaryToken -->
  <!-- start class com.google.api.client.auth.oauth.OAuthHmacSigner -->
  <class name="OAuthHmacSigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.auth.oauth.OAuthSigner"/>
    <constructor name="OAuthHmacSigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
    </method>
    <field name="clientSharedSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Client-shared secret or {@code null} for none.]]>
      </doc>
    </field>
    <field name="tokenSharedSecret" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token-shared secret or {@code null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[OAuth {@code "HMAC-SHA1"} signature method.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthHmacSigner -->
  <!-- start class com.google.api.client.auth.oauth.OAuthParameters -->
  <class name="OAuthParameters" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthParameters"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="computeNonce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Computes a nonce based on the hex string of a random non-negative long,
 setting the value of the {@link #nonce} field.]]>
      </doc>
    </method>
    <method name="computeTimestamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Computes a timestamp based on the current system time, setting the value of
 the {@link #timestamp} field.]]>
      </doc>
    </method>
    <method name="computeSignature"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestMethod" type="java.lang.String"/>
      <param name="requestUrl" type="com.google.api.client.http.GenericUrl"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Computes a new signature based on the fields and the given request method
 and URL, setting the values of the {@link #signature} and
 {@link #signatureMethod} fields.
 
 @throws GeneralSecurityException general security exception]]>
      </doc>
    </method>
    <method name="getAuthorizationHeader" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@code Authorization} header value to use with the OAuth
 parameter values found in the fields.]]>
      </doc>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of the given value using OAuth escaping rules.]]>
      </doc>
    </method>
    <method name="signRequestsUsingAuthorizationHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="com.google.api.client.http.HttpTransport"/>
      <doc>
      <![CDATA[Performs OAuth HTTP request signing via the {@code Authorization} header as
 the final HTTP request execute intercepter for the given HTTP transport.]]>
      </doc>
    </method>
    <field name="signer" type="com.google.api.client.auth.oauth.OAuthSigner"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required OAuth signature algorithm.]]>
      </doc>
    </field>
    <field name="callback" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Absolute URI back to which the server will redirect the resource owner when
 the Resource Owner Authorization step is completed.]]>
      </doc>
    </field>
    <field name="consumerKey" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required identifier portion of the client credentials (equivalent to a
 username).]]>
      </doc>
    </field>
    <field name="nonce" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required nonce value. Should be computed using {@link #computeNonce()}.]]>
      </doc>
    </field>
    <field name="realm" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Realm.]]>
      </doc>
    </field>
    <field name="signature" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Signature. Required but normally computed using {@link #computeSignature}.]]>
      </doc>
    </field>
    <field name="signatureMethod" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the signature method used by the client to sign the request.
 Required, but normally computed using {@link #computeSignature}.]]>
      </doc>
    </field>
    <field name="timestamp" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required timestamp value. Should be computed using
 {@link #computeTimestamp()}.]]>
      </doc>
    </field>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token value used to associate the request with the resource owner or
 {@code null} if the request is not associated with a resource owner.]]>
      </doc>
    </field>
    <field name="verifier" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The verification code received from the server.]]>
      </doc>
    </field>
    <field name="version" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Must either be "1.0" or {@code null} to skip. Provides the version of the
 authentication process as defined in this specification.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[OAuth 1.0a parameter manager.
 <p>
 The only required non-computed fields are {@link #signer} and
 {@link #consumerKey}. Use {@link #token} to specify token or temporary
 credentials.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthParameters -->
  <!-- start class com.google.api.client.auth.oauth.OAuthRsaSigner -->
  <class name="OAuthRsaSigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.auth.oauth.OAuthSigner"/>
    <constructor name="OAuthRsaSigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
    </method>
    <field name="privateKey" type="java.security.PrivateKey"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Private key.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[OAuth {@code "RSA-SHA1"} signature method.
 <p>
 The private key may be retrieved using the utilities in {@link RsaSha}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.auth.oauth.OAuthRsaSigner -->
  <!-- start interface com.google.api.client.auth.oauth.OAuthSigner -->
  <interface name="OAuthSigner"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSignatureMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature method.]]>
      </doc>
    </method>
    <method name="computeSignature" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureBaseString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns the signature computed from the given signature base string.
 
 @throws GeneralSecurityException general security exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth signature method.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.auth.oauth.OAuthSigner -->
  <doc>
  <![CDATA[OAuth 1.0 authorization as specified in
<a href="http://tools.ietf.org/html/rfc5849">RFC 5849: The OAuth 1.0
Protocol</a>
.
<p>There are a few features not supported by this implementation:
<ul>
  <li>{@code PLAINTEXT} signature algorithm</li>
  <li>{@code "application/x-www-form-urlencoded"} HTTP request body</li>
  <li>{@code "oauth_*"} parameters specified in the HTTP request URL
  (instead assumes they are specified in the {@code Authorization} header)</li>
</ul>

<p>Before using this library, you may need to set up your application as
follows:</p>
<ol>
  <li>For web applications, you may need to first register your application
  with the authorization server. It may provide two pieces of information you
  need:
  <ul>
    <li>OAuth Consumer Key: use this as the {@code consumerKey} on every
    OAuth request, for example in {@link
    com.google.api.client.auth.oauth.AbstractOAuthGetToken#consumerKey}.</li>
    <li>OAuth Consumer Secret: use this as the {@link
    com.google.api.client.auth.oauth.OAuthHmacSigner#clientSharedSecret} when
    using the {@code "HMAC-SHA1"} signature method.</li>
  </ul>
  </li>
  <li>For an installed application, an unregistered web application, or a
  web application running on localhost, you must use the {@code "HMAC-SHA1"}
  signature method. The documentation for the authorization server will need to
  provide you with the {@code consumerKey} and {@code clientSharedSecret} to
  use.</li>
  <li>For the {@code "HMAC-SHA1"} signature method, use {@link
  com.google.api.client.auth.oauth.OAuthHmacSigner}.</li>
  <li>For the {@code "RSA-SHA1"} signature method, use {@link
  com.google.api.client.auth.oauth.OAuthRsaSigner}.</li>
</ol>
<p>After the set up has been completed, the typical application flow is:</p>
<ol>
  <li>Request a temporary credentials token from the Authorization server
  using {@link com.google.api.client.auth.oauth.OAuthGetTemporaryToken}. A
  callback URL should be specified for web applications, but does not need to be
  specified for installed applications.</li>
  <li>Direct the end user to an authorization web page to allow the end
  user to authorize the temporary token using using {@link
  com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl}.</li>
  <li>After the user has granted the authorization:
  <ul>
    <li>For web applications, the user's browser will be redirected to the
    callback URL which may be parsed using {@link
    com.google.api.client.auth.oauth.OAuthCallbackUrl}.</li>
    <li>For installed applications, see the authorization server's
    documentation for figuring out the verification code.</li>
  </ul>
  </li>
  <li>Request to exchange the temporary token for a long-lived access token
  from the Authorization server using {@link
  com.google.api.client.auth.oauth.OAuthGetAccessToken}. This access token must
  be stored.</li>
  <li>Use the stored access token to authorize HTTP requests to protected
  resources by setting the {@link
  com.google.api.client.auth.oauth.OAuthParameters#token} and invoking
  {@link
  com.google.api.client.auth.oauth.OAuthParameters#signRequestsUsingAuthorizationHeader}.</li>
</ol>

<p>This package depends on the {@link com.google.api.client.auth}, {@link
com.google.api.client.escape}, {@link com.google.api.client.http}, and {@link
com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.escape">
  <!-- start class com.google.api.client.escape.CharEscapers -->
  <class name="CharEscapers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="escapeUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URIs. For details
 on escaping URIs, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>.
 
 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0"
 through "9" remain the same.
 <li>The special characters ".", "-", "*", and "_" remain the same.
 <li>The space character " " is converted into a plus sign "+".
 <li>All other characters are converted into one or more bytes using UTF-8
 encoding and each byte is then represented by the 3-character string "%XY",
 where "XY" is the two-digit, uppercase, hexadecimal representation of the
 byte value.
 <ul>
 
 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase
 hexadecimal sequences. From <a href="http://www.ietf.org/rfc/rfc3986.txt">
 RFC 3986</a>:<br>
 <i>"URI producers and normalizers should use uppercase hexadecimal digits
 for all percent-encodings."</i>
 
 <p>
 This escaper has identical behavior to (but is potentially much faster
 than):
 <ul>
 <li>{@link java.net.URLEncoder#encode(String, String)} with the encoding
 name "UTF-8"
 </ul>]]>
      </doc>
    </method>
    <method name="decodeUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Percent-decodes a US-ASCII string into a Unicode string. UTF-8 encoding is
 used to determine what characters are represented by any consecutive
 sequences of the form "%<i>XX</i>".
 
 <p>
 This replaces each occurrence of '+' with a space, ' '. So this method
 should not be used for non application/x-www-form-urlencoded strings such
 as host and path.
 
 @param uri a percent-encoded US-ASCII string
 @return a Unicode string]]>
      </doc>
    </method>
    <method name="escapeUriPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URI path segments.
 For details on escaping URIs, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.
 
 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0"
 through "9" remain the same.
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
 <li>The general delimiters "@" and ":" remain the same.
 <li>The subdelimiters "!", "$", "&amp;", "'", "(", ")", "*", ",", ";", and
 "=" remain the same.
 <li>The space character " " is converted into %20.
 <li>All other characters are converted into one or more bytes using UTF-8
 encoding and each byte is then represented by the 3-character string "%XY",
 where "XY" is the two-digit, uppercase, hexadecimal representation of the
 byte value.
 </ul>
 
 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase
 hexadecimal sequences. From <a href="http://www.ietf.org/rfc/rfc3986.txt">
 RFC 3986</a>:<br>
 <i>"URI producers and normalizers should use uppercase hexadecimal digits
 for all percent-encodings."</i>]]>
      </doc>
    </method>
    <method name="escapeUriQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URI query string
 segments. When the query string consists of a sequence of name=value pairs
 separated by &amp;, the names and values should be individually encoded. If
 you escape an entire query string in one pass with this escaper, then the
 "=" and "&amp;" characters used as separators will also be escaped.
 
 <p>
 This escaper is also suitable for escaping fragment identifiers.
 
 <p>
 For details on escaping URIs, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.
 
 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0"
 through "9" remain the same.
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
 <li>The general delimiters "@" and ":" remain the same.
 <li>The path delimiters "/" and "?" remain the same.
 <li>The subdelimiters "!", "$", "'", "(", ")", "*", ",", and ";", remain
 the same.
 <li>The space character " " is converted into %20.
 <li>The equals sign "=" is converted into %3D.
 <li>The ampersand "&amp;" is converted into %26.
 <li>All other characters are converted into one or more bytes using UTF-8
 encoding and each byte is then represented by the 3-character string "%XY",
 where "XY" is the two-digit, uppercase, hexadecimal representation of the
 byte value.
 </ul>
 
 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase
 hexadecimal sequences. From <a href="http://www.ietf.org/rfc/rfc3986.txt">
 RFC 3986</a>:<br>
 <i>"URI producers and normalizers should use uppercase hexadecimal digits
 for all percent-encodings."</i>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility functions for dealing with {@code CharEscaper}s, and some commonly
 used {@code CharEscaper} instances.
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.escape.CharEscapers -->
  <!-- start class com.google.api.client.escape.Escaper -->
  <class name="Escaper" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Escaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="escape" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string.
 
 <p>
 Note that this method may treat input characters differently depending on
 the specific escaper implementation.
 <ul>
 <li>{@link UnicodeEscaper} handles <a
 href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> correctly, including
 surrogate character pairs. If the input is badly formed the escaper should
 throw {@link IllegalArgumentException}.
 </ul>
 
 @param string the literal string to be escaped
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if {@code string} contains badly formed
         UTF-16 or cannot be escaped for any other reason]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An object that converts literal text into a format safe for inclusion in a
 particular context (such as an XML document). Typically (but not always), the
 inverse process of "unescaping" the text is performed automatically by the
 relevant parser.
 
 <p>
 For example, an XML escaper would convert the literal string {@code
 "Foo<Bar>"} into {@code "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from
 being confused with an XML tag. When the resulting XML document is parsed,
 the parser API will return this text as the original literal string {@code
 "Foo<Bar>"}.
 
 <p>
 An {@code Escaper} instance is required to be stateless, and safe when used
 concurrently by multiple threads.
 
 <p>
 Several popular escapers are defined as constants in the class
 {@link CharEscapers}.
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.escape.Escaper -->
  <!-- start class com.google.api.client.escape.PercentEscaper -->
  <class name="PercentEscaper" extends="com.google.api.client.escape.UnicodeEscaper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PercentEscaper" type="java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a URI escaper with the specified safe characters and optional
 handling of the space character.
 
 @param safeChars a non null string specifying additional safe characters
        for this escaper (the ranges 0..9, a..z and A..Z are always safe and
        should not be specified here)
 @param plusForSpace true if ASCII space should be escaped to {@code +}
        rather than {@code %20}
 @throws IllegalArgumentException if any of the parameters were invalid]]>
      </doc>
    </constructor>
    <method name="nextEscapeIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
    </method>
    <method name="escape" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cp" type="int"/>
      <doc>
      <![CDATA[Escapes the given Unicode code point in UTF-8.]]>
      </doc>
    </method>
    <field name="SAFECHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of safe characters that mimics the behavior of
 {@link java.net.URLEncoder}.
 
 TODO: Fix escapers to be compliant with RFC 3986]]>
      </doc>
    </field>
    <field name="SAFEPATHCHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of characters that do not need to be encoded when used in URI path
 segments, as specified in RFC 3986. Note that some of these characters do
 need to be escaped when used in other parts of the URI.]]>
      </doc>
    </field>
    <field name="SAFEQUERYSTRINGCHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of characters that do not need to be encoded when used in URI
 query strings, as specified in RFC 3986. Note that some of these characters
 do need to be escaped when used in other parts of the URI.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@code UnicodeEscaper} that escapes some set of Java characters using the
 URI percent encoding scheme. The set of safe characters (those which remain
 unescaped) can be specified on construction.
 
 <p>
 For details on escaping URIs for use in web pages, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.
 
 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0"
 through "9" remain the same.
 <li>Any additionally specified safe characters remain the same.
 <li>If {@code plusForSpace} was specified, the space character " " is
 converted into a plus sign "+".
 <li>All other characters are converted into one or more bytes using UTF-8
 encoding and each byte is then represented by the 3-character string "%XY",
 where "XY" is the two-digit, uppercase, hexadecimal representation of the
 byte value.
 </ul>
 
 <p>
 RFC 2396 specifies the set of unreserved characters as "-", "_", ".", "!",
 "~", "*", "'", "(" and ")". It goes on to state:
 
 <p>
 <i>Unreserved characters can be escaped without changing the semantics of the
 URI, but this should not be done unless the URI is being used in a context
 that does not allow the unescaped character to appear.</i>
 
 <p>
 For performance reasons the only currently supported character encoding of
 this class is UTF-8.
 
 <p>
 <b>Note</b>: This escaper produces uppercase hexadecimal sequences. From <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>:<br>
 <i>"URI producers and normalizers should use uppercase hexadecimal digits for
 all percent-encodings."</i>
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.escape.PercentEscaper -->
  <!-- start class com.google.api.client.escape.UnicodeEscaper -->
  <class name="UnicodeEscaper" extends="com.google.api.client.escape.Escaper"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnicodeEscaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="escape" return="char[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cp" type="int"/>
      <doc>
      <![CDATA[Returns the escaped form of the given Unicode code point, or {@code null}
 if this code point does not need to be escaped. When called as part of an
 escaping operation, the given code point is guaranteed to be in the range
 {@code 0 <= cp <= Character#MAX_CODE_POINT}.
 
 <p>
 If an empty array is returned, this effectively strips the input character
 from the resulting text.
 
 <p>
 If the character does not need to be escaped, this method should return
 {@code null}, rather than an array containing the character representation
 of the code point. This enables the escaping algorithm to perform more
 efficiently.
 
 <p>
 If the implementation of this method cannot correctly handle a particular
 code point then it should either throw an appropriate runtime exception or
 return a suitable replacement character. It must never silently discard
 invalid input as this may constitute a security risk.
 
 @param cp the Unicode code point to escape if necessary
 @return the replacement characters, or {@code null} if no escaping was
         needed]]>
      </doc>
    </method>
    <method name="nextEscapeIndex" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Scans a sub-sequence of characters from a given {@link CharSequence},
 returning the index of the next character that requires escaping.
 
 <p>
 <b>Note:</b> When implementing an escaper, it is a good idea to override
 this method for efficiency. The base class implementation determines
 successive Unicode code points and invokes {@link #escape(int)} for each of
 them. If the semantics of your escaper are such that code points in the
 supplementary range are either all escaped or all unescaped, this method
 can be implemented more efficiently using {@link CharSequence#charAt(int)}.
 
 <p>
 Note however that if your escaper does not escape characters in the
 supplementary range, you should either continue to validate the correctness
 of any surrogate characters encountered or provide a clear warning to users
 that your escaper does not validate its input.
 
 <p>
 See {@link PercentEscaper} for an example.
 
 @param csq a sequence of characters
 @param start the index of the first character to be scanned
 @param end the index immediately after the last character to be scanned
 @throws IllegalArgumentException if the scanned sub-sequence of {@code csq}
         contains invalid surrogate pairs]]>
      </doc>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string.
 
 <p>
 If you are escaping input in arbitrary successive chunks, then it is not
 generally safe to use this method. If an input string ends with an
 unmatched high surrogate character, then this method will throw
 {@link IllegalArgumentException}. You should ensure your input is valid <a
 href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this
 method.
 
 @param string the literal string to be escaped
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if invalid surrogate characters are
         encountered]]>
      </doc>
    </method>
    <method name="escapeSlow" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string, starting at the given
 index. This method is called by the {@link #escape(String)} method when it
 discovers that escaping is required. It is protected to allow subclasses to
 override the fastpath escaping function to inline their escaping test.
 
 <p>
 This method is not reentrant and may only be invoked by the top level
 {@link #escape(String)} method.
 
 @param s the literal string to be escaped
 @param index the index to start escaping from
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if invalid surrogate characters are
         encountered]]>
      </doc>
    </method>
    <method name="codePointAt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Returns the Unicode code point of the character at the given index.
 
 <p>
 Unlike {@link Character#codePointAt(CharSequence, int)} or
 {@link String#codePointAt(int)} this method will never fail silently when
 encountering an invalid surrogate pair.
 
 <p>
 The behaviour of this method is as follows:
 <ol>
 <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
 <li><b>If the character at the specified index is not a surrogate, it is
 returned.</b>
 <li>If the first character was a high surrogate value, then an attempt is
 made to read the next character.
 <ol>
 <li><b>If the end of the sequence was reached, the negated value of the
 trailing high surrogate is returned.</b>
 <li><b>If the next character was a valid low surrogate, the code point
 value of the high/low surrogate pair is returned.</b>
 <li>If the next character was not a low surrogate value, then
 {@link IllegalArgumentException} is thrown.
 </ol>
 <li>If the first character was a low surrogate value,
 {@link IllegalArgumentException} is thrown.
 </ol>
 
 @param seq the sequence of characters from which to decode the code point
 @param index the index of the first character to decode
 @param end the index beyond the last valid character to decode
 @return the Unicode code point for the given index or the negated value of
         the trailing high surrogate character at the end of the sequence]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An {@link Escaper} that converts literal text into a format safe for
 inclusion in a particular context (such as an XML document). Typically (but
 not always), the inverse process of "unescaping" the text is performed
 automatically by the relevant parser.
 
 <p>
 For example, an XML escaper would convert the literal string {@code
 "Foo<Bar>"} into {@code "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from
 being confused with an XML tag. When the resulting XML document is parsed,
 the parser API will return this text as the original literal string {@code
 "Foo<Bar>"}.
 
 <p>
 As there are important reasons, including potential security issues, to
 handle Unicode correctly if you are considering implementing a new escaper
 you should favor using UnicodeEscaper wherever possible.
 
 <p>
 A {@code UnicodeEscaper} instance is required to be stateless, and safe when
 used concurrently by multiple threads.
 
 <p>
 Several popular escapers are defined as constants in the class
 {@link CharEscapers}. To create your own escapers extend this class and
 implement the {@link #escape(int)} method.
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.escape.UnicodeEscaper -->
  <doc>
  <![CDATA[Character escaping utilities.

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis">
  <!-- start class com.google.api.client.googleapis.GoogleHeaders -->
  <class name="GoogleHeaders" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setSlug"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <param name="fileName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code Slug} header for given file name into the given HTTP
 headers, properly escaping the header value.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP headers for Google API's.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleHeaders -->
  <!-- start class com.google.api.client.googleapis.GoogleTransport -->
  <class name="GoogleTransport" extends="com.google.api.client.http.HttpTransport"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setVersionHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="version" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "GData-Version"} header required by Google Data API's.
 
 @param version version of the Google Data API being access, for example
        {@code "2"}.]]>
      </doc>
    </method>
    <method name="setClientLoginToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the Client Login token (implemented as a {@code GoogleLogin} {@code
 Authorization} header) based on the given authentication token. This is
 primarily intended for use in the Android environment after retrieving the
 authentication token from the AccountManager.]]>
      </doc>
    </method>
    <method name="getClientLoginHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns Client Login authentication header value based on the given
 authentication token.]]>
      </doc>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildPostRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildPutRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="ENABLE_METHOD_OVERRIDE" type="boolean"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@code true}, the GData HTTP client library will use POST to send data
 to the associated GData service and will specify the actual method using
 the method override HTTP header. This can be used as a workaround for HTTP
 proxies or gateways that do not handle PUT, PATCH, or DELETE HTTP methods
 properly. If {@code false}, the regular verbs will be used.]]>
      </doc>
    </field>
    <field name="applicationName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required application name of the format {@code
 "[company-id]-[app-name]-[app-version]"}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP transport for Google API's.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleTransport -->
  <!-- start class com.google.api.client.googleapis.GoogleUrl -->
  <class name="GoogleUrl" extends="com.google.api.client.http.GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUrl encoded URL, including any existing query parameters that
        should be parsed]]>
      </doc>
    </constructor>
    <field name="prettyprint" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether to pretty print the output.]]>
      </doc>
    </field>
    <field name="alt" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Alternate wire format.]]>
      </doc>
    </field>
    <field name="fields" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Partial fields mask.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic Google URL providing for some common query parameters used in Google
 API's such as the {@link #alt} and {@link #fields} parameters.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUrl -->
  <doc>
  <![CDATA[Utilities for Google Data API's.

<p>This package depends on the {@link com.google.api.client.escape} and
{@link com.google.api.client.http}, and {@link com.google.api.client.util}
packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.auth">
  <!-- start class com.google.api.client.googleapis.auth.AuthKeyValueParser -->
  <class name="AuthKeyValueParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpParser"/>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="com.google.api.client.googleapis.auth.AuthKeyValueParser"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Singleton instance.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP parser for Google response to an Authorization request.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.AuthKeyValueParser -->
  <doc>
  <![CDATA[Utilities for Google's authentication methods as described in
<a href="http://code.google.com/apis/accounts/docs/GettingStarted.html">Getting
Started with Account Authorization</a>
.

<p>This package depends on the {@link com.google.api.client.http} and {@link
com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.auth.authsub">
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSub -->
  <class name="AuthSub" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code AuthSub} authorization header value based on the given
 authentication token.]]>
      </doc>
    </method>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="privateKey" type="java.security.PrivateKey"/>
      <param name="requestMethod" type="java.lang.String"/>
      <param name="requestUrl" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns {@code AuthSub} authorization header value based on the given
 authentication token, private key, request method, and request URL.
 
 @throws GeneralSecurityException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSub -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper -->
  <class name="AuthSubHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubHelper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setPrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="privateKey" type="java.security.PrivateKey"/>
      <doc>
      <![CDATA[Sets to the given private key for secure AuthSub or {@code null} for
 non-secure AuthSub.
 <p>
 Updates the authorization header of the Google transport (set using
 {@link #setTransport(GoogleTransport)}).]]>
      </doc>
    </method>
    <method name="setTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="com.google.api.client.googleapis.GoogleTransport"/>
      <doc>
      <![CDATA[Sets to the given Google transport whose authorization header to set or
 {@code null} to ignore (for example if using an alternative HTTP library).
 <p>
 Updates the authorization header of the Google transport.]]>
      </doc>
    </method>
    <method name="setToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets to the given single-use or session token (or resets any existing token
 if {@code null}).
 <p>
 Any previous stored single-use or session token will be forgotten. Updates
 the authorization header of the Google transport (set using
 {@link #setTransport(GoogleTransport)}).]]>
      </doc>
    </method>
    <method name="exchangeForSessionToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exchanges the single-use token for a session token as described in <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubSessionToken"
 >AuthSubSessionToken</a>. Sets the authorization header of the Google
 transport using the session token, and automatically sets the token used by
 this instance using {@link #setToken(String)}.
 <p>
 Note that Google allows at most 10 session tokens per use per web
 application, so the session token for each user must be persisted.
 
 @return session token
 @throws HttpResponseException if the authentication response has an error
         code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <method name="revokeSessionToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Revokes the session token. Clears any existing authorization header of the
 Google transport and automatically resets the token by calling {@code
 setToken(null)}.
 <p>
 See <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubRevokeToken"
 >AuthSubRevokeToken</a> for protocol details.
 
 @throws HttpResponseException if the authentication response has an error
         code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <method name="requestTokenInfo" return="com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Retries the token information as described in <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubTokenInfo"
 >AuthSubTokenInfo</a>.
 
 @throws HttpResponseException if the authentication response has an error
         code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[AuthSub token manager for a single user.
 <p>
 To properly initialize, set:
 <ul>
 <li>{@link #setToken}: single-use or session token (required)</li>
 <li>{@link #transport}: Google transport (recommended)</li>
 <li>{@link #privateKey}: private key for secure AuthSub (recommended)</li>
 </ul>
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.SessionTokenResponse -->
  <class name="AuthSubHelper.SessionTokenResponse" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubHelper.SessionTokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="sessionToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response for an AuthSubSessionToken
 request.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.SessionTokenResponse -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse -->
  <class name="AuthSubHelper.TokenInfoResponse" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubHelper.TokenInfoResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="secure" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="target" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response for an AuthSubTokenInfo request.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl -->
  <class name="AuthSubSingleUseTokenRequestUrl" extends="com.google.api.client.http.GenericUrl"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubSingleUseTokenRequestUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="nextUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(required) URL the user should be redirected to after a successful login.
 This value should be a page on the web application site, and can include
 query parameters.]]>
      </doc>
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(required) URL identifying the service(s) to be accessed; see documentation
 for the service for the correct value(s). The resulting token enables
 access to the specified service(s) only. To specify more than one scope,
 list each one separated with a space (encodes as "%20").]]>
      </doc>
    </field>
    <field name="template" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optionally use {@code "mobile"} to for a mobile version of the approval
 page or {@code null} for normal.]]>
      </doc>
    </field>
    <field name="hostedDomain" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional value identifying a particular Google Apps (hosted) domain account
 to be accessed (for example, 'mycollege.edu') or {@code null} or {@code
 "default"} for a regular Google account ('username@gmail.com').]]>
      </doc>
    </field>
    <field name="language" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional ISO 639 country code identifying what language the approval page
 should be translated in (for example, 'hl=en' for English) or {@code null}
 for the user's selected language.]]>
      </doc>
    </field>
    <field name="secure" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Boolean flag indicating whether the authorization transaction
 should issue a secure token (1) or a non-secure token (0). Secure tokens
 are available to registered applications only.]]>
      </doc>
    </field>
    <field name="session" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Boolean flag indicating whether the one-time-use token may be
 exchanged for a session token (1) or not (0).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic URL that builds an AuthSub request URL to retrieve a single-use
 token. See <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubRequest"
 >documentation</a>.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl.ResponseUrl -->
  <class name="AuthSubSingleUseTokenRequestUrl.ResponseUrl" extends="com.google.api.client.http.GenericUrl"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubSingleUseTokenRequestUrl.ResponseUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Generic URL with a token parameter that can be used to extract the AuthSub
 single-use token from the AuthSubRequest response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl.ResponseUrl -->
  <doc>
  <![CDATA[Google's legacy AuthSub authorization as specified in
<a href="http://code.google.com/apis/accounts/docs/AuthSub.html">AuthSub for
Web Applications</a>
.

<p>This package depends on the {@link com.google.api.client.auth}, {@link
com.google.api.client.googleapis}, {@link
com.google.api.client.googleapis.auth}, {@link com.google.api.client.http} and
{@link com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.auth.clientlogin">
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <class name="ClientLogin" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="authenticate" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="HttpResponseException" type="com.google.api.client.http.HttpResponseException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Authenticates based on the provided field values.
 
 @throws HttpResponseException if the authentication response has an error
         code, such as for a CAPTCHA challenge. Call {@code
         exception.response.parseAs(ClientLoginAuthenticator.ErrorInfo.class)
         * } to parse the response.
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <field name="applicationName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="authTokenType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="username" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="password" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaAnswer" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Client Login authentication method as described in <a
 href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html"
 >ClientLogin for Installed Applications</a>.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <class name="ClientLogin.ErrorInfo" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="error" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="url" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse an error response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <class name="ClientLogin.Response" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.Response"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setAuthorizationHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleTransport" type="com.google.api.client.googleapis.GoogleTransport"/>
      <doc>
      <![CDATA[Sets the authorization header for the given Google transport using the
 authentication token.]]>
      </doc>
    </method>
    <field name="auth" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <doc>
  <![CDATA[Google's legacy ClientLogin authentication method as described in
<a href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html">ClientLogin
for Installed Applications</a>
.

<p>This package depends on the {@link com.google.api.client.googleapis},
{@link com.google.api.client.googleapis.auth}, {@link
com.google.api.client.http}, and {@link com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.auth.oauth">
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthAuthorizeTemporaryTokenUrl -->
  <class name="GoogleOAuthAuthorizeTemporaryTokenUrl" extends="com.google.api.client.auth.oauth.OAuthAuthorizeTemporaryTokenUrl"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthAuthorizeTemporaryTokenUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="template" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optionally use {@code "mobile"} to for a mobile version of the approval
 page or {@code null} for normal.]]>
      </doc>
    </field>
    <field name="hostedDomain" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional value identifying a particular Google Apps (hosted) domain account
 to be accessed (for example, 'mycollege.edu') or {@code null} or {@code
 "default"} for a regular Google account ('username@gmail.com').]]>
      </doc>
    </field>
    <field name="language" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional ISO 639 country code identifying what language the approval page
 should be translated in (for example, 'hl=en' for English) or {@code null}
 for the user's selected language.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google OAuth 1.0a URL builder for a Google Accounts web page to allow the end
 user to authorize the temporary token.
 <p>
 The {@link #temporaryToken} should be set from the
 {@link OAuthCredentialsResponse#token} returned by
 {@link GoogleOAuthGetTemporaryToken#execute()}. Use {@link #build()} to build
 the authorization URL. If a {@link OAuthGetTemporaryToken#callback} was
 specified, after the end user grants the authorization, the Google
 authorization server will redirect to that callback URL. To parse the
 response, use {@link OAuthCallbackUrl}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthAuthorizeTemporaryTokenUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation -->
  <class name="GoogleOAuthDomainWideDelegation" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpExecuteIntercepter"/>
    <constructor name="GoogleOAuthDomainWideDelegation"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
    </method>
    <method name="signRequests"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="com.google.api.client.http.HttpTransport"/>
      <param name="parameters" type="com.google.api.client.auth.oauth.OAuthParameters"/>
      <doc>
      <![CDATA[Performs OAuth HTTP request signing via query parameter for the {@code
 xoauth_requestor_id} and the {@code Authorization} header as the final HTTP
 request execute intercepter for the given HTTP request execute manager.
 
 @param transport HTTP transport
 @param parameters OAuth parameters; the {@link OAuthParameters#signer} and
        {@link OAuthParameters#consumerKey} should be set]]>
      </doc>
    </method>
    <field name="requestorId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Email address of the user whose data you are trying to access.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google's OAuth domain-wide delegation requires an e-mail address of the user
 whose data you are trying to access via {@link #requestorId} on every HTTP
 request.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation.Url -->
  <class name="GoogleOAuthDomainWideDelegation.Url" extends="com.google.api.client.googleapis.GoogleUrl"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthDomainWideDelegation.Url" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUrl encoded URL, including any existing query parameters
        that should be parsed]]>
      </doc>
    </constructor>
    <field name="requestorId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Email address of the user whose data you are trying to access.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic URL that extends {@link GoogleUrl} and also provides the
 {@link #requestorId} parameter.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation.Url -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken -->
  <class name="GoogleOAuthGetAccessToken" extends="com.google.api.client.auth.oauth.OAuthGetAccessToken"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthGetAccessToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="revokeAccessToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameters" type="com.google.api.client.auth.oauth.OAuthParameters"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Revokes the long-lived access token.
 
 @param parameters OAuth parameters
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generic Google OAuth 1.0a URL to request to exchange the temporary
 credentials token (or "request token") for a long-lived credentials token (or
 "access token") from the Google Authorization server.
 <p>
 Use {@link #execute()} to execute the request. The long-lived access token
 acquired with this request is found in {@link OAuthCredentialsResponse#token}
 . This token must be stored. It may then be used to authorize HTTP requests
 to protected resources in Google services by setting the
 {@link OAuthParameters#token}, and invoking
 {@link OAuthParameters#signRequestsUsingAuthorizationHeader(HttpTransport)}.
 <p>
 To revoke the stored access token, use {@link #revokeAccessToken}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetTemporaryToken -->
  <class name="GoogleOAuthGetTemporaryToken" extends="com.google.api.client.auth.oauth.OAuthGetTemporaryToken"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthGetTemporaryToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createParameters" return="com.google.api.client.auth.oauth.OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="displayName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional string identifying the application or {@code null} for none. This
 string is displayed to end users on Google's authorization confirmation
 page. For registered applications, the value of this parameter overrides
 the name set during registration and also triggers a message to the user
 that the identity can't be verified. For unregistered applications, this
 parameter enables them to specify an application name, In the case of
 unregistered applications, if this parameter is not set, Google identifies
 the application using the URL value of oauth_callback; if neither parameter
 is set, Google uses the string "anonymous".]]>
      </doc>
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required URL identifying the service(s) to be accessed. The resulting token
 enables access to the specified service(s) only. Scopes are defined by each
 Google service; see the service's documentation for the correct value. To
 specify more than one scope, list each one separated with a space.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic Google OAuth 1.0a URL to request a temporary credentials token (or
 "request token") from the Google Authorization server.
 <p>
 Use {@link #execute()} to execute the request. Google verifies that the
 requesting application has been registered with Google or is using an
 approved signature (in the case of installed applications). The temporary
 token acquired with this request is found in
 {@link OAuthCredentialsResponse#token} . This temporary token is used in
 {@link GoogleOAuthAuthorizeTemporaryTokenUrl#temporaryToken} to direct the
 end user to a Google Accounts web page to allow the end user to authorize the
 temporary token.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetTemporaryToken -->
  <doc>
  <![CDATA[Google's additions to OAuth 1.0a authorization as specified in
<a href="http://code.google.com/apis/accounts/docs/OAuth_ref.html">Google's
OAuth API Reference </a>
(see package description for an overview).
<p>Before using this library, you need to set up your application as
follows:</p>
<ol>
  <li>For a web application, you should first register your application at
  the <a
    href="http://code.google.com/apis/accounts/docs/RegistrationForWebAppsAuto.html">registration
  page</a>. You will be provided with two pieces of information you will need:
  <ul>
    <li>OAuth Consumer Key: use this as the {@code consumerKey} on every
    OAuth request, for example in {@link
    com.google.api.client.auth.oauth.AbstractOAuthGetToken#consumerKey}.</li>
    <li>OAuth Consumer Secret: use this as the {@link
    com.google.api.client.auth.oauth.OAuthHmacSigner#clientSharedSecret} when
    using the {@code "HMAC-SHA1"} signature method.</li>
  </ul>
  </li>
  <li>For an installed application, an unregistered web application, or a
  web application running on localhost, you must use the {@code "HMAC-SHA1"}
  signature method. Use {@code "anonymous"} for the {@code consumerKey} and
  {@code clientSharedSecret}.</li>
  <li>For the {@code "HMAC-SHA1"} signature method, use {@link
  com.google.api.client.auth.oauth.OAuthHmacSigner}.</li>
  <li>For the {@code "RSA-SHA1"} signature method, use {@link
  com.google.api.client.auth.oauth.OAuthRsaSigner}. See the instructions for <a
    href="http://code.google.com/apis/gdata/docs/auth/oauth.html#GeneratingKeyCert">generating
  a self-signing private key and public certificate </a>.</li>
</ol>
<p>After the set up has been completed, the typical application flow is:</p>
<ol>
  <li>Request a temporary credentials token ("request token") from the
  Google Authorization server using {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetTemporaryToken}. A
  callback URL should be specified for web applications, but does not need to be
  specified for installed applications.</li>
  <li>Direct the end user to a Google Accounts web page to allow the end
  user to authorize the temporary token using using {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthAuthorizeTemporaryTokenUrl}.</li>
  <li>After the user has granted the authorization:
  <ul>
    <li>For web applications, the user's browser will be redirected to the
    callback URL which may be parsed using {@link
    com.google.api.client.auth.oauth.OAuthCallbackUrl}.</li>
    <li>For installed applications, use {@code ""} for the verification
    code.</li>
  </ul>
  </li>
  <li>Request to exchange the temporary token for a long-lived access token
  from the Google Authorization server using {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken}. This
  access token must be stored.</li>
  <li>Use the stored access token to authorize HTTP requests to protected
  resources in Google services by setting the {@link
  com.google.api.client.auth.oauth.OAuthParameters#token} and invoking
  {@link
  com.google.api.client.auth.oauth.OAuthParameters#signRequestsUsingAuthorizationHeader}.</li>
  <li>For 2-legged OAuth, use {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation}
  as a request execute intercepter to set the e-mail address of the user on
  every HTTP request, or {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation.Url}
  as a generic URL builder with the requestor ID parameter.</li>
  <li>To revoke an access token, use {@link
  com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken#revokeAccessToken}.
  Users can also manually revoke tokens from Google's <a
    href="https://www.google.com/accounts/IssuedAuthSubTokens">change
  authorized websites</a> page.</li>
</ol>
For example:
<pre><code>
import com.google.api.client.auth.*;
import com.google.api.client.auth.oauth.*;
import com.google.api.client.googleapis.*;
import com.google.api.client.googleapis.auth.oauth.*;
import com.google.api.client.http.*;

import java.io.*;
import java.net.*;
import java.security.*;
import java.util.*;

import javax.servlet.http.*;

public class PicasaSample extends HttpServlet {

  private static final String CONSUMER_KEY = "...";

  /**
   * OAuth type. This is only needed for a general-purpose sample. In a real
   * application, normally only one kind of auth is used.
   */
  enum OAuthType {
    REGISTERED_RSA, REGISTERED_HMAC, UNREGISTERED_HMAC
  }

  static final OAuthType OAUTH_TYPE = OAuthType.REGISTERED_RSA;

  private static final String CONSUMER_KEY =
      OAUTH_TYPE == OAuthType.UNREGISTERED_HMAC ? "anonymous" : "...";

  /**
   * In-memory access token store. But this is bad practice! For example, if the
   * process dies, all tokens would be lost. Instead, the long-lived access
   * token credentials should be stored in a long-lived location for example in
   * a database.
   */
  static Map&lt;String , TokenInfo&gt; OAUTH_TOKENS = new HashMap&lt;String, TokenInfo&gt;();

  static final class TokenInfo {
    final boolean temporary;
    final String token;
    final String tokenSecret;

    TokenInfo(OAuthCredentialsResponse response) {
      this.token = response.token;
      this.tokenSecret = response.tokenSecret;
      this.temporary = response.callbackConfirmed != null;
    }

    OAuthParameters createParameters() throws IOException {
      OAuthParameters result = new OAuthParameters();
      result.consumerKey = CONSUMER_KEY;
      result.signer = createSigner(this);
      result.token = token;
      return result;
    }
  }

  private static TokenInfo execute(AbstractOAuthGetToken request)
      throws IOException {
    OAuthCredentialsResponse response = request.execute(); 
    TokenInfo result = new TokenInfo(response);
    OAUTH_TOKENS.put(getCurrentUserId(), result);
    return result;
  }

  private static final String SCOPE = "http://picasaweb.google.com/data";

  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    PrintWriter writer = response.getWriter();
    GoogleTransport transport = new GoogleTransport();
    transport.applicationName = "...";
    transport.setVersionHeader(PicasaWebAlbums.VERSION);
    try {
      String thisURL = request.getRequestURI();
      String userId = getCurrentUserId();
      TokenInfo tokenInfo = OAUTH_TOKENS.get(userId);
      StringBuffer fullUrlBuf = request.getRequestURL();
      if (request.getQueryString() != null) {
        fullUrlBuf.append('?').append(request.getQueryString());
      }
      String fullUrl = fullUrlBuf.toString();
      OAuthCallbackUrl authorizeResponse = new OAuthCallbackUrl(fullUrl);
      if (tokenInfo != null && tokenInfo.temporary
          && authorizeResponse.verifier == null) {
        tokenInfo = null;
      }
      OAuthSigner signer = createSigner(tokenInfo);
      if (tokenInfo == null) {
        GoogleOAuthGetTemporaryToken requestToken =
            new GoogleOAuthGetTemporaryToken();
        requestToken.signer = signer;
        requestToken.consumerKey = CONSUMER_KEY;
        requestToken.scope = SCOPE;
        requestToken.callback = request.getRequestURL().toString();
        tokenInfo = execute(requestToken);
        GoogleOAuthAuthorizeTemporaryTokenUrl authorizeUrl =
            new GoogleOAuthAuthorizeTemporaryTokenUrl();
        authorizeUrl.temporaryToken = tokenInfo.token;
        response.sendRedirect(authorizeUrl.build());
        return;
      }
      if (tokenInfo.temporary) {
        GoogleOAuthGetAccessToken accessToken =
            new GoogleOAuthGetAccessToken();
        accessToken.temporaryToken = tokenInfo.token;
        accessToken.signer = signer;
        accessToken.consumerKey = CONSUMER_KEY;
        accessToken.verifier = authorizeResponse.verifier;
        tokenInfo = execute(accessToken);
        signer = createSigner(tokenInfo);
      }
      tokenInfo.createParameters().signRequestsUsingAuthorizationHeader(
          transport);
      run(writer, transport);
    } catch (Exception e) {
      handleException(writer, e);
    }
  }

  private static OAuthSigner createSigner(TokenInfo tokenInfo)
      throws IOException {
    if (OAUTH_TYPE == OAuthType.REGISTERED_RSA) {
      OAuthRsaSigner result = new OAuthRsaSigner();
      result.privateKey = getPrivateKey();
      return result;
    }
    OAuthHmacSigner result = new OAuthHmacSigner();
    result.clientSharedSecret =
        OAUTH_TYPE == OAuthType.UNREGISTERED_HMAC ? "anonymous" : "...";
    if (tokenInfo != null) {
      result.tokenSharedSecret = tokenInfo.tokenSecret;
    }
    return result;
  }

  private static PrivateKey getPrivateKey() throws IOException {
    if (privateKey == null) {
      try {
        privateKey =
            RsaSha.getPrivateKeyFromKeystore(new FileInputStream(
                "WEB-INF/....jks"), "...", "...", "...");
      } catch (GeneralSecurityException e) {
        throw new IOException(e);
      }
    }
    return privateKey;
  }
}
</code></pre>
To later revoke the token:
<pre><code>
    for (Map.Entry&lt;String, TokenInfo&gt; entry : OAUTH_TOKENS.entrySet()) {
      TokenInfo tokenInfo = entry.getValue();
      if (!tokenInfo.temporary) {
        String user = entry.getKey();
        try {
          OAuthParameters parameters = tokenInfo.createParameters();
          GoogleOAuthGetAccessToken.revokeAccessToken(parameters);
        } catch (Exception e) {
          handleException(writer, e);
        }
      }
    }
    OAUTH_TOKENS.clear();
</code></pre>

<p>This package depends on the {@link com.google.api.client.auth.oauth},
{@link com.google.api.client.googleapis}, {@link com.google.api.client.http},
and {@link com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.json">
  <!-- start class com.google.api.client.googleapis.json.AbstractJsonFeedParser -->
  <class name="AbstractJsonFeedParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="parseFeed" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse the feed and return a new parsed instance of the feed class. This
 method can be skipped if all you want are the items.]]>
      </doc>
    </method>
    <method name="parseNextItem" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse the next item in the feed and return a new parsed instanceof of the
 item class. If there is no item to parse, it will return {@code null} and
 automatically close the parser (in which case there is no need to call
 {@link #close()}.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the underlying parser.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract base class for a Google JSON-C feed parser when the feed class is
 known in advance.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.AbstractJsonFeedParser -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument -->
  <class name="DiscoveryDocument" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="com.google.api.client.googleapis.json.DiscoveryDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="api" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a request for the JSON-formatted discovery document.
 
 @param api API name
 @return discovery document
 @throws IOException I/O exception executing request]]>
      </doc>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fullyQualifiedMethodName" type="java.lang.String"/>
      <param name="parameters" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates an HTTP request based on the given method name and parameters.
 
 @param fullyQualifiedMethodName name of method as defined in Discovery
        document of format "resourceName.methodName"
 @param parameters user defined key / value data mapping
 @return HTTP request
 @throws IOException I/O exception reading]]>
      </doc>
    </method>
    <field name="transport" type="com.google.api.client.googleapis.GoogleTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Google transport required by {@link #buildRequest}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Manages a Google API discovery document based on the JSON format.
 
 @since 2.2
 @author vbarathan@google.com (Prakash Barathan)
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument -->
  <!-- start class com.google.api.client.googleapis.json.JsonContent -->
  <class name="JsonContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="JsonContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="item" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Serializes JSON content based on the data key/value mapping object for an
 item.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonContent -->
  <!-- start class com.google.api.client.googleapis.json.JsonFeedParser -->
  <class name="JsonFeedParser" extends="com.google.api.client.googleapis.json.AbstractJsonFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonFeedParser" type="com.google.api.client.googleapis.json.JsonParser, java.lang.Class&lt;T&gt;, java.lang.Class&lt;I&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parseNextItem" return="I"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google JSON-C feed parser when the item class is known in advance.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonFeedParser -->
  <!-- start class com.google.api.client.googleapis.json.JsonHttp -->
  <class name="JsonHttp" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonHttp"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="useFeedParser" return="com.google.api.client.googleapis.json.JsonFeedParser&lt;T, I&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="itemClass" type="java.lang.Class&lt;I&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="useMultiKindFeedParser" return="com.google.api.client.googleapis.json.JsonMultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="itemClasses" type="java.lang.Class[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="classToInstantiateAndParse" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processAsJsonParser" return="com.google.api.client.googleapis.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonHttp -->
  <!-- start class com.google.api.client.googleapis.json.JsonMultiKindFeedParser -->
  <class name="JsonMultiKindFeedParser" extends="com.google.api.client.googleapis.json.AbstractJsonFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonMultiKindFeedParser" type="com.google.api.client.googleapis.json.JsonParser, java.lang.Class&lt;T&gt;, java.lang.Class[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Google JSON-C feed parser when the item class can be computed from the kind.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonMultiKindFeedParser -->
  <!-- start class com.google.api.client.googleapis.json.JsonParser -->
  <class name="JsonParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpParser"/>
    <constructor name="JsonParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Parses HTTP JSON response content into an data class of key/value pairs.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonParser -->
  <doc>
  <![CDATA[Google's JSON-C as specified in
<a href="http://code.google.com/apis/youtube/2.0/developers_guide_jsonc.html">YouTube
Developer's Guide: JSON-C / JavaScript</a>
(see package description for an overview).

<p>User-defined Partial JSON data models allow you to defined Plain Old Java
Objects (POJO's) to define how the library should parse/serialize JSON. Each
non-static field that should be included must have an @{@link
com.google.api.client.util.Key} annotation. By default, the field name is used
as the JSON key. To override this behavior, simply specify the JSON key use the
optional value parameter of the annotation, for example {@code @Key("name")}.
Any unrecognized keys from the JSON are normally simply ignored and not stored.
If the ability to store unknown keys is important, use {@link
com.google.api.client.json.GenericJson}.</p>

<p>Let's take a look at a typical partial JSON-C video feed from the YouYube
Data API:</p>

<pre><code>
 "data":{
    "updated":"2010-01-07T19:58:42.949Z",
    "totalItems":800,
    "startIndex":1,
    "itemsPerPage":1,
    "items":[
        {"id":"hYB0mn5zh2c",
         "updated":"2010-01-07T13:26:50.000Z",
         "title":"Google Developers Day US - Maps API Introduction",
         "description":"Google Maps API Introduction ...",
         "tags":[
            "GDD07","GDD07US","Maps"
         ],
         "player":{
            "default":"http://www.youtube.com/watch?v\u003dhYB0mn5zh2c"
         },
...
        }
    ]
 }
</code></pre>

<p>Here's one possible way to design the Java data classes for this (each
class in its own Java file):</p>

<pre><code>
import com.google.api.client.util.*;
import java.util.List;

  public class VideoFeed {
    &#64;Key public int itemsPerPage;
    &#64;Key public int startIndex;
    &#64;Key public int totalItems;
    &#64;Key public DateTime updated;
    &#64;Key public List&lt;Video&gt; items;
  }

  public class Video {
    &#64;Key public String id;
    &#64;Key public String title;
    &#64;Key public DateTime updated;
    &#64;Key public String description;
    &#64;Key public List&lt;String&gt; tags;
    &#64;Key public Player player;
  }

  public class Player {
    // "default" is a Java keyword, so need to specify the JSON key manually
    &#64;Key("default")
    public String defaultUrl;
  }
</code></pre>

<p>You can also use the @{@link com.google.api.client.util.Key} annotation
to defined query parameters for a URL. For example:</p>

<pre><code>
public class YouTubeUrl extends GoogleUrl {

  &#64;Key
  public String author;

  &#64;Key("max-results")
  public Integer maxResults;

  public YouTubeUrl(String encodedUrl) {
    super(encodedUrl);
    this.alt = "jsonc";
  }
</code></pre>

<p>To work with the YouTube API, you first need to set up the {@link
com.google.api.client.googleapis.GoogleTransport}. For example:</p>

<pre><code>
  private static GoogleTransport setUpGoogleTransport() throws IOException {
    GoogleTransport transport = new GoogleTransport();
    transport.applicationName = "google-youtubejsoncsample-1.0";
    transport.setVersionHeader(YouTube.VERSION);
    transport.addParser(new JsonParser());
    // insert authentication code...
    return transport;
  }
</code></pre>

<p>Now that we have a transport, we can execute a request to the YouTube API
and parse the result:</p>

<pre><code>
  public static VideoFeed list(GoogleTransport transport, YouTubeUrl url)
      throws IOException {
    HttpRequest request = transport.buildGetRequest();
    request.url = url;
    return request.execute().parseAs(VideoFeed.class);
  }
</code></pre>

<p>If the server responds with an error the {@link
com.google.api.client.http.HttpRequest#execute} method will throw an {@link
com.google.api.client.http.HttpResponseException}, which has an {@link
com.google.api.client.http.HttpResponse} field which can be parsed the same way
as a success response inside of a catch block. For example:</p>

<pre><code>
    try {
...
    } catch (HttpResponseException e) {
      if (e.response.getParser() != null) {
        Error error = e.response.parseAs(Error.class);
        // process error response
      } else {
        String errorContentString = e.response.parseAsString();
        // process error response as string
      }
      throw e;
    }
</code></pre>

<p>NOTE: As you might guess, the library uses reflection to populate the
user-defined data model. It's not quite as fast as writing the wire format
parsing code yourself can potentially be, but it's a lot easier.</p>

<p>NOTE: If you prefer to use your favorite JSON parsing library instead
(there are many of them listed for example on <a href="http://json.org">json.org</a>),
that's supported as well. Just call {@link
com.google.api.client.http.HttpRequest#execute()} and parse the returned byte
stream.</p>

<p>This package depends on the {@link com.google.api.client.http}, {@link
com.google.api.client.json}, {@link com.google.api.client.util}, and {@link
org.codehaus.jackson} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.googleapis.xml.atom">
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <class name="AtomPatchContent" extends="com.google.api.client.xml.atom.AtomContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.GData -->
  <class name="GData" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFieldsFor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs.
 It cannot be a {@link Map}, {@link GenericData} or a {@link Collection}.]]>
      </doc>
    </method>
    <method name="getFeedFields" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="feedClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs
 for the feed class and for the entry class. This should only be used if the
 feed class does not contain the entry class as a field. The data classes
 cannot be a {@link Map}, {@link GenericData} or a {@link Collection}.]]>
      </doc>
    </method>
    <method name="computePatch" return="com.google.api.client.util.ArrayMap&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="patched" type="java.lang.Object"/>
      <param name="original" type="java.lang.Object"/>
    </method>
    <method name="computePatchInternal" return="com.google.api.client.util.ArrayMap&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldsMask" type="com.google.api.client.googleapis.xml.atom.GData.FieldsMask"/>
      <param name="patchedObject" type="java.lang.Object"/>
      <param name="originalObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Utilities for working with the Atom XML of Google Data API's.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.GData -->
  <!-- start class com.google.api.client.googleapis.xml.atom.GDataHttp -->
  <class name="GDataHttp" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="GD_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.GDataHttp -->
  <!-- start class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
  <class name="MultiKindFeedParser" extends="com.google.api.client.xml.atom.AbstractAtomFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiKindFeedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setEntryClasses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entryClasses" type="java.lang.Class[]"/>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="create" return="com.google.api.client.googleapis.xml.atom.MultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClasses" type="java.lang.Class[]"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[GData Atom feed parser when the entry class can be computed from the kind.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
  <!-- start class com.google.api.client.googleapis.xml.atom.PatchRelativeToOriginalContent -->
  <class name="PatchRelativeToOriginalContent" extends="com.google.api.client.xml.XmlContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PatchRelativeToOriginalContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="patchedEntry" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="originalEntry" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.PatchRelativeToOriginalContent -->
  <doc>
  <![CDATA[Google's Atom XML implementation (see package description for an overview).

<p>User-defined Partial XML data models allow you to defined Plain Old Java
Objects (POJO's) to define how the library should parse/serialize XML. Each
non-static field that should be included must have an @{@link
com.google.api.client.util.Key} annotation.</p>

<p>The optional value parameter of this @{@link
com.google.api.client.util.Key} annotation specifies the XPath name to use to
represent the field. For example, an XML attribute <code>a</code> has an XPath
name of <code>@a</code>, an XML element <code>&lt;a&gt;</code> has an XPath name
of <code>a</code>, and an XML text content has an XPath name of <code>text()</code>.
These are named based on their usage with the <a
  href="http://code.google.com/apis/gdata/docs/2.0/reference.html#PartialResponse">partial
response/update syntax</a> for Google API's. If the @{@link
com.google.api.client.util.Key} annotation is missing, the default is to use the
Atom XML namespace and the Java field's name as the local XML name. By default,
the field name is used as the JSON key. Any unrecognized XML is normally simply
ignored and not stored. If the ability to store unknown keys is important, use
{@link com.google.api.client.xml.GenericXml}.</p>

<p>Let's take a look at a typical partial Atom XML album feed from the
Picasa Web Albums Data API:</p>

<pre><code>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;feed xmlns='http://www.w3.org/2005/Atom'
    xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/'
    xmlns:gphoto='http://schemas.google.com/photos/2007'&gt;
  &lt;link rel='http://schemas.google.com/g/2005#post'
    type='application/atom+xml'
    href='http://picasaweb.google.com/data/feed/api/user/liz' /&gt;
  &lt;author&gt;
    &lt;name&gt;Liz&lt;/name&gt;
  &lt;/author&gt;
  &lt;openSearch:totalResults&gt;1&lt;/openSearch:totalResults&gt;
  &lt;entry gd:etag='"RXY8fjVSLyp7ImA9WxVVGE8KQAE."'&gt;
    &lt;category scheme='http://schemas.google.com/g/2005#kind'
      term='http://schemas.google.com/photos/2007#album' /&gt;
    &lt;title&gt;lolcats&lt;/title&gt;
    &lt;summary&gt;Hilarious Felines&lt;/summary&gt;
    &lt;gphoto:access&gt;public&lt;/gphoto:access&gt;
  &lt;/entry&gt;
&lt;/feed&gt;
</code></pre>

<p>Here's one possible way to design the Java data classes for this (each
class in its own Java file):</p>

<pre><code>
import com.google.api.client.util.*;
import java.util.List;

  public class Link {

    &#64;Key("&#64;href")
    public String href;

    &#64;Key("&#64;rel")
    public String rel;

    public static String find(List&lt;Link&gt; links, String rel) {
      if (links != null) {
        for (Link link : links) {
          if (rel.equals(link.rel)) {
            return link.href;
          }
        }
      }
      return null;
    }
  }

  public class Category {

    &#64;Key("&#64;scheme")
    public String scheme;

    &#64;Key("&#64;term")
    public String term;

    public static Category newKind(String kind) {
      Category category = new Category();
      category.scheme = "http://schemas.google.com/g/2005#kind";
      category.term = "http://schemas.google.com/photos/2007#" + kind;
      return category;
    }
  }

  public class AlbumEntry {

    &#64;Key
    public String summary;

    &#64;Key
    public String title;

    &#64;Key("gphoto:access")
    public String access;

    public Category category = newKind("album");
    
    private String getEditLink() {
      return Link.find(links, "edit");
    }
  }

  public class Author {

    &#64;Key
    public String name;
  }

  public class AlbumFeed {

    &#64;Key
    public Author author;

    &#64;Key("openSearch:totalResults")
    public int totalResults;

    &#64;Key("entry")
    public List&lt;AlbumEntry&gt; photos;

    &#64;Key("link")
    public List&lt;Link&gt; links;

    private String getPostLink() {
      return Link.find(links, "http://schemas.google.com/g/2005#post");
    }
  }
</code></pre>

<p>You can also use the @{@link com.google.api.client.util.Key} annotation
to defined query parameters for a URL. For example:</p>

<pre><code>
public class PicasaUrl extends GoogleUrl {

  &#64;Key("max-results")
  public Integer maxResults;

  &#64;Key
  public String kinds;

  public PicasaUrl(String url) {
    super(url);
  }

  public static PicasaUrl fromRelativePath(String relativePath) {
    PicasaUrl result = new PicasaUrl(PicasaWebAlbums.ROOT_URL);
    result.path += relativePath;
    return result;
  }
}
</code></pre>

<p>To work with a Google API, you first need to set up the {@link
com.google.api.client.googleapis.GoogleTransport}. For example:</p>

<pre><code>
  private static GoogleTransport setUpGoogleTransport() throws IOException {
    GoogleTransport transport = new GoogleTransport();
    transport.applicationName = "google-picasaatomsample-1.0";
    transport.setVersionHeader(PicasaWebAlbums.VERSION);
    AtomParser parser = new AtomParser();
    parser.namespaceDictionary = PicasaWebAlbumsAtom.NAMESPACE_DICTIONARY;
    transport.addParser(parser);
    // insert authentication code...
    return transport;
  }
</code></pre>

<p>Now that we have a transport, we can execute a partial GET request to the
Picasa Web Albums API and parse the result:</p>

<pre><code>
  public static AlbumFeed executeGet(GoogleTransport transport, PicasaUrl url)
      throws IOException {
    url.fields = GData.getFieldsFor(AlbumFeed.class);
    url.kinds = "photo";
    url.maxResults = 5;
    HttpRequest request = transport.buildGetRequest();
    request.url = url;
    return request.execute().parseAs(AlbumFeed.class);
  }
</code></pre>

<p>If the server responds with an error the {@link
com.google.api.client.http.HttpRequest#execute} method will throw an {@link
com.google.api.client.http.HttpResponseException}, which has an {@link
com.google.api.client.http.HttpResponse} field which can be parsed the same way
as a success response inside of a catch block. For example:</p>

<pre><code>
    try {
...
    } catch (HttpResponseException e) {
      if (e.response.getParser() != null) {
        Error error = e.response.parseAs(Error.class);
        // process error response
      } else {
        String errorContentString = e.response.parseAsString();
        // process error response as string
      }
      throw e;
    }
</code></pre>

<p>To update an album, we use the transport to execute an efficient partial
update request using the PATCH method to the Picasa Web Albums API:</p>

<pre><code>
  public AlbumEntry executePatchRelativeToOriginal(GoogleTransport transport,
      AlbumEntry original) throws IOException {
    HttpRequest request = transport.buildPatchRequest();
    request.setUrl(getEditLink());
    request.headers.ifMatch = etag;
    PatchRelativeToOriginalContent content =
        new PatchRelativeToOriginalContent();
    content.namespaceDictionary = PicasaWebAlbumsAtom.NAMESPACE_DICTIONARY;
    content.originalEntry = original;
    content.patchedEntry = this;
    request.content = content;
    return request.execute().parseAs(AlbumEntry.class);
  }

  private static AlbumEntry updateTitle(GoogleTransport transport,
      AlbumEntry album) throws IOException {
    AlbumEntry patched = album.clone();
    patched.title = "An alternate title";
    return patched.executePatchRelativeToOriginal(transport, album);
  }
</code></pre>

<p>To insert an album, we use the transport to execute a POST request to the
Picasa Web Albums API:</p>

<pre><code>
  public AlbumEntry insertAlbum(GoogleTransport transport, AlbumEntry entry)
      throws IOException {
    HttpRequest request = transport.buildPostRequest();
    request.setUrl(getPostLink());
    AtomContent content = new AtomContent();
    content.namespaceDictionary = PicasaWebAlbumsAtom.NAMESPACE_DICTIONARY;
    content.entry = entry;
    request.content = content;
    return request.execute().parseAs(AlbumEntry.class);
  }
</code></pre>

<p>To delete an album, we use the transport to execute a DELETE request to
the Picasa Web Albums API:</p>

<pre><code>
  public void executeDelete(GoogleTransport transport) throws IOException {
    HttpRequest request = transport.buildDeleteRequest();
    request.setUrl(getEditLink());
    request.headers.ifMatch = etag;
    request.execute().ignore();
  }
</code></pre>

<p>NOTE: As you might guess, the library uses reflection to populate the
user-defined data model. It's not quite as fast as writing the wire format
parsing code yourself can potentially be, but it's a lot easier.</p>

<p>NOTE: If you prefer to use your favorite XML parsing library instead
(there are many of them), that's supported as well. Just call {@link
com.google.api.client.http.HttpRequest#execute()} and parse the returned byte
stream.</p>

<p>This package depends on the {@link com.google.api.client.http}, {@link
com.google.api.client.util}, {@link com.google.api.client.xml}, {@link
com.google.api.client.xml.atom}, and {@code org.xmlpull.v1} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.http">
  <!-- start class com.google.api.client.http.GenericUrl -->
  <class name="GenericUrl" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GenericUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GenericUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs from an encoded URL.
 <p>
 Any known query parameters with pre-defined fields as data keys will be
 parsed based on their data type. Any unrecognized query parameter will
 always be parsed as a string.
 
 @param encodedUrl encoded URL, including any existing query parameters that
        should be parsed
 @throws IllegalArgumentException if URL has a syntax error]]>
      </doc>
    </constructor>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.http.GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the string representation of the URL, including the path
 specified by {@link #path} and the query parameters specified by this
 generic URL.]]>
      </doc>
    </method>
    <field name="scheme" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Scheme (lowercase), for example {@code "https"}.]]>
      </doc>
    </field>
    <field name="host" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Host, for example {@code "www.google.com"}.]]>
      </doc>
    </field>
    <field name="port" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Port number or {@code -1} if undefined, for example {@code 443}.]]>
      </doc>
    </field>
    <field name="path" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Path component or {@code null} for none, for example {@code
 "/m8/feeds/contacts/default/full"}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[URL builder in which the query parameters are specified as generic data
 key/value pairs.
 
 <p>
 The query parameters are specified with the data key name as the parameter
 name, and the data value as the parameter value. Subclasses can declare
 fields for known query parameters using the {@link Key} annotation. {@code
 null} parameter names are not allowed, but {@code null} query values are
 allowed.
 </p>
 
 <p>
 The following features are not supported:
 <ul>
 <li>Repeated query parameters</li>
 <li>User-information or fragment components.</li>
 <li>Encoded slash character ('/') in the path</li>
 </ul>
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.GenericUrl -->
  <!-- start interface com.google.api.client.http.HttpContent -->
  <interface name="HttpContent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content length or less than zero if not known.]]>
      </doc>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content encoding (for example {@code "gzip"}) or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type.]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content to the given output stream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes HTTP request content into an output stream.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpContent -->
  <!-- start interface com.google.api.client.http.HttpExecuteIntercepter -->
  <interface name="HttpExecuteIntercepter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Invoked at the start of {@link HttpRequest#execute()}.
 
 @throws IOException any I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP request execute intercepter invoked at the start of
 {@link HttpRequest#execute()}.
 <p>
 Useful for example for signing HTTP requests during authentication. Care
 should be taken to ensure that intercepters not interfere with each other
 since there are no guarantees regarding their independence. In particular,
 the order in which the intercepters are invoked is important.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpExecuteIntercepter -->
  <!-- start class com.google.api.client.http.HttpHeaders -->
  <class name="HttpHeaders" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clone" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="acceptEncoding" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "Accept-Encoding"} header.]]>
      </doc>
    </field>
    <field name="userAgent" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "User-Agent"} header.]]>
      </doc>
    </field>
    <field name="authorization" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "Authorization"} header.]]>
      </doc>
    </field>
    <field name="ifMatch" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "If-Match"} header.]]>
      </doc>
    </field>
    <field name="ifNoneMatch" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "If-None-Match"} header.]]>
      </doc>
    </field>
    <field name="mimeVersion" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "MIME-Version"} header.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Stores HTTP headers used in an HTTP request. {@code null} is not allowed as a
 name or value of a header.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpHeaders -->
  <!-- start interface com.google.api.client.http.HttpParser -->
  <interface name="HttpParser"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type.]]>
      </doc>
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given HTTP response into a new instance of the the given data
 class of key/value pairs.
 <p>
 How the parsing is performed is not restricted by this interface, and is
 instead defined by the concrete implementation. Implementations should
 check {@link HttpResponse#isSuccessStatusCode} to know whether they are
 parsing a success or error response.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Parses HTTP response content into an data class of key/value pairs.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpParser -->
  <!-- start class com.google.api.client.http.HttpRequest -->
  <class name="HttpRequest" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="setUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link #url} based on the given encoded URL string.]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.http.HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Execute the HTTP request and returns the HTTP response.
 <p>
 Note that regardless of the returned status code, the HTTP response content
 has not been parsed yet, and must be parsed by the calling code.
 <p>
 Almost all details of the request and response are logged if
 {@link Level#CONFIG} is loggable. The only exception is the value of the
 {@code Authorization} header which is only logged if {@link Level#ALL} is
 loggable.
 
 @return HTTP response for an HTTP success code
 @throws HttpResponseException for an HTTP error code
 @see HttpResponse#isSuccessStatusCode]]>
      </doc>
    </method>
    <field name="headers" type="com.google.api.client.http.HttpHeaders"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP request headers.]]>
      </doc>
    </field>
    <field name="disableContentLogging" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether to disable request content logging during {@link #execute()}
 (unless {@link Level#ALL} is loggable which forces all logging).
 <p>
 Useful for example if content has sensitive data such as an authentication
 information. Defaults to {@code false}.]]>
      </doc>
    </field>
    <field name="content" type="com.google.api.client.http.HttpContent"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP request content or {@code null} for none.]]>
      </doc>
    </field>
    <field name="method" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP request method.]]>
      </doc>
    </field>
    <field name="url" type="com.google.api.client.http.GenericUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP request URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP request.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpRequest -->
  <!-- start class com.google.api.client.http.HttpResponse -->
  <class name="HttpResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getContent" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content of the HTTP response.
 <p>
 The result is cached, so subsequent calls will be fast.
 
 @return input stream content of the HTTP response or {@code null} for none
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="ignore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Gets the content of the HTTP response from {@link #getContent()} and
 ignores the content if there is any.
 
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="getParser" return="com.google.api.client.http.HttpParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response content parser to use for the content type of
 this HTTP response or {@code null} for none.]]>
      </doc>
    </method>
    <method name="parseAs" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the content of the HTTP response from {@link #getContent()} and
 reads it into a data class of key/value pairs using the parser returned by
 {@link #getParser()} .
 
 @return parsed data class or {@code null} for no content
 @throws IOException I/O exception
 @throws IllegalArgumentException if no parser is defined for the given
         content type or if there is no content type defined in the HTTP
         response]]>
      </doc>
    </method>
    <method name="parseAsString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the content of the HTTP response from {@link #getContent()} and
 reads it into a string.
 
 @return parsed string or {@code null} for no content
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="isSuccessStatusCode" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Returns whether the given HTTP response status code is a success code
 {@code >= 200 and < 300}.]]>
      </doc>
    </method>
    <field name="contentEncoding" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content encoding or {@code null}.]]>
      </doc>
    </field>
    <field name="contentType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content type or {@code null} for none.]]>
      </doc>
    </field>
    <field name="headers" type="com.google.api.client.http.HttpHeaders"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP headers. Note that only if a header name is used for multiple headers,
 only the last one is retained.]]>
      </doc>
    </field>
    <field name="isSuccessStatusCode" type="boolean"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether received a successful status code {@code >= 200 && < 300}.]]>
      </doc>
    </field>
    <field name="statusCode" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code.]]>
      </doc>
    </field>
    <field name="statusMessage" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status message or {@code null}.]]>
      </doc>
    </field>
    <field name="transport" type="com.google.api.client.http.HttpTransport"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport.]]>
      </doc>
    </field>
    <field name="disableContentLogging" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether to disable response content logging during {@link #getContent()}
 (unless {@link Level#ALL} is loggable which forces all logging).
 <p>
 Useful for example if content has sensitive data such as an authentication
 token. Defaults to {@code false}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP response.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpResponse -->
  <!-- start class com.google.api.client.http.HttpResponseException -->
  <class name="HttpResponseException" extends="java.io.IOException"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpResponseException" type="com.google.api.client.http.HttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param response HTTP response]]>
      </doc>
    </constructor>
    <method name="computeMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <doc>
      <![CDATA[Returns an exception message to use for the given HTTP response.]]>
      </doc>
    </method>
    <field name="response" type="com.google.api.client.http.HttpResponse"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP response.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Exception thrown when an error status code is detected in an HTTP response.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpResponseException -->
  <!-- start class com.google.api.client.http.HttpTransport -->
  <class name="HttpTransport" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setLowLevelHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lowLevelHttpTransport" type="com.google.api.client.http.LowLevelHttpTransport"/>
      <doc>
      <![CDATA[Sets to the given low level HTTP transport.
 
 @param lowLevelHttpTransport low level HTTP transport or {@code null} to
        use the default of {@code java.net} transport]]>
      </doc>
    </method>
    <method name="useLowLevelHttpTransport" return="com.google.api.client.http.LowLevelHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the low-level HTTP transport to use. If
 {@link #setLowLevelHttpTransport(LowLevelHttpTransport)} hasn't been
 called, it uses the default of {@code java.net} transport.]]>
      </doc>
    </method>
    <method name="addParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="com.google.api.client.http.HttpParser"/>
      <doc>
      <![CDATA[Adds an HTTP response content parser.
 <p>
 If there is already a previous parser defined for this new parser (as
 defined by {@link #getParser(String)} then the previous parser will be
 removed.]]>
      </doc>
    </method>
    <method name="getParser" return="com.google.api.client.http.HttpParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the HTTP response content parser to use for the given content type
 or {@code null} if none is defined.
 
 @param contentType content type or {@code null} for {@code null} result]]>
      </doc>
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a {@code DELETE} request.]]>
      </doc>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a {@code GET} request.]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a {@code POST} request.]]>
      </doc>
    </method>
    <method name="buildPutRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a {@code PUT} request.]]>
      </doc>
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a {@code PATCH} request.]]>
      </doc>
    </method>
    <field name="defaultHeaders" type="com.google.api.client.http.HttpHeaders"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default HTTP headers. These transport default headers are put into a
 request's headers when its build method is called.]]>
      </doc>
    </field>
    <field name="intercepters" type="java.util.List&lt;com.google.api.client.http.HttpExecuteIntercepter&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP request execute intercepters. The intercepters will be invoked in the
 order of the {@link List#iterator()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP transport.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpTransport -->
  <!-- start class com.google.api.client.http.InputStreamContent -->
  <class name="InputStreamContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="InputStreamContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setFileInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <doc>
      <![CDATA[Sets the {@link #inputStream} from a file input stream based on the given
 file, and the {@link #length} based on the file's length.]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="type" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required content type.]]>
      </doc>
    </field>
    <field name="length" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content length or less than zero if not known. Defaults to {@code -1}.]]>
      </doc>
    </field>
    <field name="inputStream" type="java.io.InputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required input stream to read from.]]>
      </doc>
    </field>
    <field name="encoding" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content encoding (for example {@code "gzip"}) or {@code null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Serializes HTTP request content from an input stream into an output stream.
 <p>
 The {@code contentType} is required. The {@link #inputStream} and
 {@link #length} are also required to specify the input stream to use and its
 content length. For a file input stream, they should be specified using
 {@link #setFileInput(File)}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.InputStreamContent -->
  <!-- start class com.google.api.client.http.LowLevelHttpRequest -->
  <class name="LowLevelHttpRequest" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LowLevelHttpRequest"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addHeader"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a header to the HTTP request.
 
 @param name header name
 @param value header value]]>
      </doc>
    </method>
    <method name="setContent"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <doc>
      <![CDATA[Sets the HTTP request content.]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.http.LowLevelHttpResponse"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes the request and returns a low-level HTTP response object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Low-level HTTP request.
 <p>
 This allows providing a different implementation of the HTTP request that is
 more compatible with the Java environment used.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.LowLevelHttpRequest -->
  <!-- start class com.google.api.client.http.LowLevelHttpResponse -->
  <class name="LowLevelHttpResponse" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LowLevelHttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContent" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the HTTP response content input stream or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content encoding (for example {@code "gzip"}) or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="getContentLength" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content length or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getStatusLine" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the response status line or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getStatusCode" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the response status code or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="getReasonPhrase" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP reason phrase or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getHeaderCount" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response header count.]]>
      </doc>
    </method>
    <method name="getHeaderName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the HTTP response header name at the given zero-based index.]]>
      </doc>
    </method>
    <method name="getHeaderValue" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the HTTP response header value at the given zero-based index.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Low-level HTTP response.
 <p>
 This allows providing a different implementation of the HTTP response that is
 more compatible with the Java environment used.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.LowLevelHttpResponse -->
  <!-- start class com.google.api.client.http.LowLevelHttpTransport -->
  <class name="LowLevelHttpTransport" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LowLevelHttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="supportsPatch" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this HTTP transport implementation supports the {@code
 PATCH} request method.]]>
      </doc>
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code DELETE} request.]]>
      </doc>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code GET} request.]]>
      </doc>
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code PATCH} request. Won't be called if {@link #supportsPatch()}
 returns {@code false}.]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code POST} request.]]>
      </doc>
    </method>
    <method name="buildPutRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code PUT} request.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Low-level HTTP transport.
 <p>
 This allows providing a different implementation of the HTTP transport that
 is more compatible with the Java environment used.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.LowLevelHttpTransport -->
  <!-- start class com.google.api.client.http.MultipartContent -->
  <class name="MultipartContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="MultipartContent" type="com.google.api.client.http.HttpContent, com.google.api.client.http.HttpContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="forRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Multi-part related content.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.MultipartContent -->
  <!-- start class com.google.api.client.http.UrlEncodedContent -->
  <class name="UrlEncodedContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="UrlEncodedContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the content input from the given key/value data.]]>
      </doc>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implements support for HTTP form content encoding serialization of type
 {@code application/x-www-form-urlencoded} as specified in the <a href=
 "http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#h-17.13.4.1"
 >HTML 4.0 Specification</a>.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.UrlEncodedContent -->
  <!-- start class com.google.api.client.http.UrlEncodedParser -->
  <class name="UrlEncodedParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpParser"/>
    <constructor name="UrlEncodedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="java.lang.String"/>
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Parses the given content into the given data object of key/value pairs.]]>
      </doc>
    </method>
    <field name="disableContentLogging" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether to disable response content logging (unless {@link Level#ALL} is
 loggable which forces all logging).
 <p>
 Useful for example if content has sensitive data such as an authentication
 token. Defaults to {@code false}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Implements support for HTTP form content encoding parsing of type {@code
 application/x-www-form-urlencoded} as specified in the <a href=
 "http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#h-17.13.4.1"
 >HTML 4.0 Specification</a>.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.UrlEncodedParser -->
  <doc>
  <![CDATA[Subset of HTTP 1.1 needed from the specification in
<a href="http://tools.ietf.org/html/rfc2616">RFC 2616: Hypertext Transfer
Protocol -- HTTP/1.1</a>
.

<p>This package depends on the {@link com.google.api.client.auth}, {@link
com.google.api.client.escape}, and {@link com.google.api.client.util} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.javanet">
  <!-- start class com.google.api.client.javanet.NetHttpTransport -->
  <class name="NetHttpTransport" extends="com.google.api.client.http.LowLevelHttpTransport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="supportsPatch" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="buildPostRequest" return="com.google.api.client.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="buildPutRequest" return="com.google.api.client.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="com.google.api.client.javanet.NetHttpTransport"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Singleton instance of this transport.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP low-level transport based on the {@code java.net} package.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.javanet.NetHttpTransport -->
  <doc>
  <![CDATA[HTTP Transport library for Google API's based on the {@code java.net} package.

<p>This package depends on the {@link com.google.api.client.http} package.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.json">
  <!-- start class com.google.api.client.json.CustomizeJsonParser -->
  <class name="CustomizeJsonParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CustomizeJsonParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stopAt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing at the given key of the given context
 object.]]>
      </doc>
    </method>
    <method name="handleUnrecognizedKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Called when the given unrecognized key is encountered in the given context
 object.]]>
      </doc>
    </method>
    <method name="newInstanceForArray" return="java.util.Collection&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns a new instance value for the given field in the given context
 object for a JSON array or {@code null} for the default behavior.]]>
      </doc>
    </method>
    <method name="newInstanceForObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="fieldClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new instance value for the given field class in the given context
 object for JSON Object or {@code null} for the default behavior.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Customizes the behavior of a JSON parser.
 <p>
 All methods have a default trivial implementation, so subclasses need only
 implement the methods whose behavior needs customization.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.CustomizeJsonParser -->
  <!-- start class com.google.api.client.json.GenericJson -->
  <class name="GenericJson" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericJson"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.json.GenericJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Generic JSON data that stores all unknown key name/value pairs.
 <p>
 Subclasses can declare fields for known data keys using the {@link Key}
 annotation. {@code null} unknown data key names are not allowed, but {@code
 null} data values are allowed.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.GenericJson -->
  <!-- start class com.google.api.client.json.Json -->
  <class name="Json" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Json"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="item" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a debug JSON string representation for the given item intended for
 use in {@link Object#toString()}.
 
 @param item data key/value pairs
 @return debug JSON string representation]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="generator" type="JsonGenerator"/>
      <param name="value" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes the given JSON value object using the given JSON generator.]]>
      </doc>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Object from the given JSON parser (which is closed after
 parsing completes) into the given destination class, optionally using the
 given parser customizer.
 
 @param <T> destination class type
 @param parser JSON parser
 @param destinationClass destination class that has a public default
        constructor to use to create a new instance
 @param customizeParser optional parser customizer or {@code null} for none
 @return new instance of the parsed destination class
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="skipToKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <param name="keyToFind" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Skips the values of all keys in the current object until it finds the given
 key.
 <p>
 The current token will either be the {@link JsonToken#END_OBJECT} of the
 current object if the key is not found, or the value of the key that was
 found.
 
 @param parser JSON parser
 @param keyToFind key to find
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="parseAndClose"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <param name="destination" type="java.lang.Object"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Object from the given JSON parser (which is closed after
 parsing completes) into the given destination object, optionally using the
 given parser customizer.
 
 @param parser JSON parser
 @param destination destination object
 @param customizeParser optional parser customizer or {@code null} for none
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Object from the given JSON parser into the given destination
 class, optionally using the given parser customizer.
 
 @param <T> destination class type
 @param parser JSON parser
 @param destinationClass destination class that has a public default
        constructor to use to create a new instance
 @param customizeParser optional parser customizer or {@code null} for none
 @return new instance of the parsed destination class
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="JsonParser"/>
      <param name="destination" type="java.lang.Object"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Object from the given JSON parser into the given destination
 object, optionally using the given parser customizer.
 
 @param parser JSON parser
 @param destination destination object
 @param customizeParser optional parser customizer or {@code null} for none
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <field name="JSON_FACTORY" type="JsonFactory"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[JSON factory.]]>
      </doc>
    </field>
    <field name="CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[JSON content type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[JSON utilities.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.Json -->
  <doc>
  <![CDATA[JSON as specified in
<a href="http://json.org/">Introducing JSON</a>
.

<p>This package depends on the {@link com.google.api.client.util} and {@link
org.codehaus.jackson} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.util">
  <!-- start class com.google.api.client.util.ArrayMap -->
  <class name="ArrayMap" extends="java.util.AbstractMap&lt;K, V&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="ArrayMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an array map with initial capacity of zero.
 Equivalent to calling the default constructor, except without the need to
 specify the type parameters. For example: {@code ArrayMap<String, String>
 map = ArrayMap.create();}.]]>
      </doc>
    </method>
    <method name="create" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialCapacity" type="int"/>
      <doc>
      <![CDATA[Returns a new instance of an array map of the given initial capacity. For
 example: {@code ArrayMap<String, String> map = ArrayMap.create(8);}.]]>
      </doc>
    </method>
    <method name="of" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyValuePairs" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns a new instance of an array map of the given key value pairs in
 alternating order. For example: {@code ArrayMap<String, String> map =
 ArrayMap.of("key1", "value1", "key2", "value2", ...);}.
 <p>
 WARNING: there is no compile-time checking of the {@code keyValuePairs}
 parameter to ensure that the keys or values have the correct type, so if
 the wrong type is passed in, any problems will occur at runtime. Also,
 there is no checking that the keys are unique, which the caller must ensure
 is true.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of key-value pairs set.]]>
      </doc>
    </method>
    <method name="getKey" return="K"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the key at the given index or {@code null} if out of bounds.]]>
      </doc>
    </method>
    <method name="getValue" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the value at the given index or {@code null} if out of bounds.]]>
      </doc>
    </method>
    <method name="set" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the key/value mapping at the given index, overriding any existing
 key/value mapping.
 <p>
 There is no checking done to ensure that the key does not already exist.
 Therefore, this method is dangerous to call unless the caller can be
 certain the key does not already exist in the map.
 
 @return previous value or {@code null} for none
 @throws IndexOutOfBoundsException if index is negative]]>
      </doc>
    </method>
    <method name="set" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the value at the given index, overriding any existing value mapping.
 
 @return previous value or {@code null} for none
 @throws IndexOutOfBoundsException if index is negative or {@code >=} size]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Adds the key/value mapping at the end of the list. Behaves identically to
 {@code set(size(), key, value)}.
 
 @throws IndexOutOfBoundsException if index is negative]]>
      </doc>
    </method>
    <method name="remove" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes the key/value mapping at the given index, or ignored if the index
 is out of bounds.
 
 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="containsKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns whether there is a mapping for the given key.]]>
      </doc>
    </method>
    <method name="getIndexOfKey" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <doc>
      <![CDATA[Returns the index of the given key or {@code -1} if there is no such key.]]>
      </doc>
    </method>
    <method name="get" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value set for the given key or {@code null} if there is no such
 mapping or if the mapping value is {@code null}.]]>
      </doc>
    </method>
    <method name="put" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the value for the given key, overriding any existing value.
 
 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="remove" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Removes the key-value pair of the given key, or ignore if the key cannot be
 found.
 
 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="trim"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Trims the internal array storage to minimize memory usage.]]>
      </doc>
    </method>
    <method name="ensureCapacity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minCapacity" type="int"/>
      <doc>
      <![CDATA[Ensures that the capacity of the internal arrays is at least a given
 capacity.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="entrySet" return="java.util.Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Memory-efficient map of keys to values with list-style random-access
 semantics.
 <p>
 Conceptually, the keys and values are stored in a simpler array in order to
 minimize memory use and provide for fast access to a key/value at a certain
 index (for example {@link #getKey(int)}). However, traditional mapping
 operations like {@link #get(Object)} and {@link #put(Object, Object)} are
 slower because they need to look up all key/value pairs in the worst case.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ArrayMap -->
  <!-- start class com.google.api.client.util.Base64 -->
  <class name="Base64" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="encode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <doc>
      <![CDATA[Encodes a byte array into Base64 notation.
 Equivalent to calling
 {@code encodeBytes(source, 0, source.length)}

 @param source The data to convert
 @since 1.4]]>
      </doc>
    </method>
    <method name="encodeWebSafe" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="doPadding" type="boolean"/>
      <doc>
      <![CDATA[Encodes a byte array into web safe Base64 notation.

 @param source The data to convert
 @param doPadding is {@code true} to pad result with '=' chars
        if it does not fall on 3 byte boundaries]]>
      </doc>
    </method>
    <method name="encode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <param name="alphabet" type="byte[]"/>
      <param name="doPadding" type="boolean"/>
      <doc>
      <![CDATA[Encodes a byte array into Base64 notation.

 @param source The data to convert
 @param off Offset in array where conversion should begin
 @param len Length of data to convert
 @param alphabet is the encoding alphabet
 @param doPadding is {@code true} to pad result with '=' chars
        if it does not fall on 3 byte boundaries
 @since 1.4]]>
      </doc>
    </method>
    <method name="encode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <param name="alphabet" type="byte[]"/>
      <param name="maxLineLength" type="int"/>
      <doc>
      <![CDATA[Encodes a byte array into Base64 notation.

 @param source The data to convert
 @param off Offset in array where conversion should begin
 @param len Length of data to convert
 @param alphabet is the encoding alphabet
 @param maxLineLength maximum length of one line.
 @return the BASE64-encoded byte array]]>
      </doc>
    </method>
    <method name="decode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes data from Base64 notation.
 
 @param s the string to decode (decoded in {@code "UTF-8"} encoding)
 @return the decoded data
 @since 1.4]]>
      </doc>
    </method>
    <method name="decodeWebSafe" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes data from web safe Base64 notation.
 Web safe encoding uses '-' instead of '+', '_' instead of '/'

 @param s the string to decode (decoded in {@code "UTF-8"} encoding)
 @return the decoded data]]>
      </doc>
    </method>
    <method name="decode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes Base64 content in byte array format and returns
 the decoded byte array.

 @param source The Base64 encoded data
 @return decoded data
 @since 1.3
 @throws Base64DecoderException]]>
      </doc>
    </method>
    <method name="decodeWebSafe" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes web safe Base64 content in byte array format and returns
 the decoded data.
 Web safe encoding uses '-' instead of '+', '_' instead of '/'

 @param source the string to decode (decoded in default encoding)
 @return the decoded data]]>
      </doc>
    </method>
    <method name="decode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes Base64 content in byte array format and returns
 the decoded byte array.

 @param source The Base64 encoded data
 @param off    The offset of where to begin decoding
 @param len    The length of characters to decode
 @return decoded data
 @since 1.3
 @throws Base64DecoderException]]>
      </doc>
    </method>
    <method name="decodeWebSafe" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes web safe Base64 content in byte array format and returns
 the decoded byte array.
 Web safe encoding uses '-' instead of '+', '_' instead of '/'

 @param source The Base64 encoded data
 @param off    The offset of where to begin decoding
 @param len    The length of characters to decode
 @return decoded data]]>
      </doc>
    </method>
    <method name="decode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <param name="decodabet" type="byte[]"/>
      <exception name="Base64DecoderException" type="com.google.api.client.util.Base64DecoderException"/>
      <doc>
      <![CDATA[Decodes Base64 content using the supplied decodabet and returns
 the decoded byte array.

 @param source    The Base64 encoded data
 @param off       The offset of where to begin decoding
 @param len       The length of characters to decode
 @param decodabet the decodabet for decoding Base64 content
 @return decoded data]]>
      </doc>
    </method>
    <field name="ALPHABET" type="byte[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The 64 valid Base64 values.
 TODO(lizlooney) - This array is mutable and public. It should probably be
 made private and a method that returns a clone can be added.]]>
      </doc>
    </field>
    <field name="WEBSAFE_ALPHABET" type="byte[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The 64 valid web safe Base64 values.
 TODO(lizlooney) - This array is mutable and public. It should probably be
 made private and a method that returns a clone can be added.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Base64 converter class. This code is not a full-blown MIME encoder;
 it simply converts binary data to base64 data and back.
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Base64 -->
  <!-- start class com.google.api.client.util.Base64DecoderException -->
  <class name="Base64DecoderException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Base64DecoderException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Base64DecoderException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Exception thrown when encountering an invalid Base64 input character.
 
 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Base64DecoderException -->
  <!-- start class com.google.api.client.util.ClassInfo -->
  <class name="ClassInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="of" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the class information for the given class.
 
 @param clazz class or {@code null} for {@code null} result
 @return class information or {@code null} for {@code null} input]]>
      </doc>
    </method>
    <method name="getFieldInfo" return="com.google.api.client.util.FieldInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the information for the given data key name or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="getField" return="java.lang.reflect.Field"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the field for the given data key name or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getKeyCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of data key name/value pairs associated with this data
 class.]]>
      </doc>
    </method>
    <method name="getKeyNames" return="java.lang.Iterable&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key names associated with this data class.]]>
      </doc>
    </method>
    <method name="newInstance" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Creates a new instance of the given class using reflection.]]>
      </doc>
    </method>
    <method name="newCollectionInstance" return="java.util.Collection&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="collectionClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new instance of the given collection class.]]>
      </doc>
    </method>
    <method name="newMapInstance" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new instance of the given map class.]]>
      </doc>
    </method>
    <method name="getCollectionParameter" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns the type parameter for the given field assuming it is of type
 collection.]]>
      </doc>
    </method>
    <method name="getMapValueParameter" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns the type parameter for the given field assuming it is of type map.]]>
      </doc>
    </method>
    <method name="getMapValueParameter" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="genericType" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns the type parameter for the given genericType assuming it is of
 type map.]]>
      </doc>
    </method>
    <field name="clazz" type="java.lang.Class&lt;?&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Class.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Parses class information to determine data key name/value pairs associated
 with the class.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ClassInfo -->
  <!-- start class com.google.api.client.util.DataUtil -->
  <class name="DataUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="mapOf" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the map to use for the given key/value data.
 
 @param data any key value data, represented by an object or a map, or
        {@code null}
 @return if {@code data} is a map returns {@code data}; else if {@code data}
         is {@code null}, returns an empty map; else returns
         {@link ReflectionMap} on the data object]]>
      </doc>
    </method>
    <method name="clone" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="T"/>
      <doc>
      <![CDATA[Returns a deep clone of the given key/value data, such that the result is a
 completely independent copy.
 <p>
 Note that final fields cannot be changed and therefore their value won't be
 copied.
 
 @param data key/value data object or map to clone or {@code null} for a
        {@code null} return value
 @return deep clone or {@code null} for {@code null} input]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for working with key/value data.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.DataUtil -->
  <!-- start class com.google.api.client.util.DateTime -->
  <class name="DateTime" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DateTime" type="java.util.Date, java.util.TimeZone"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DateTime" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DateTime" type="java.util.Date"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DateTime" type="long, java.lang.Integer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DateTime" type="boolean, long, java.lang.Integer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toStringRfc3339" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Formats the value as an RFC 3339 date/time string.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="parseRfc3339" return="com.google.api.client.util.DateTime"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="NumberFormatException" type="java.lang.NumberFormatException"/>
      <doc>
      <![CDATA[Parses an RFC 3339 date/time value.]]>
      </doc>
    </method>
    <field name="value" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Date/time value expressed as the number of ms since the Unix epoch.
 
 If the time zone is specified, this value is normalized to UTC, so to
 format this date/time value, the time zone shift has to be applied.]]>
      </doc>
    </field>
    <field name="dateOnly" type="boolean"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies whether this is a date-only value.]]>
      </doc>
    </field>
    <field name="tzShift" type="java.lang.Integer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Time zone shift from UTC in minutes. If {@code null}, no time zone is set,
 and the time is always interpreted as local time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Immutable representation of a date with an optional time and an optional time
 zone based on RFC 3339.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.DateTime -->
  <!-- start class com.google.api.client.util.FieldInfo -->
  <class name="FieldInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="of" return="com.google.api.client.util.FieldInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns the field information for the given field.
 
 @param field field or {@code null} for {@code null} result
 @return field information or {@code null} if the field has no {@link Key}
         annotation or for {@code null} input]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value of the field in the given object instance using
 reflection.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets to the given value of the field in the given object instance using
 reflection.
 <p>
 If the field is final, it checks that value being set is identical to the
 existing value.]]>
      </doc>
    </method>
    <method name="getClassInfo" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the class information of the field's declaring class.]]>
      </doc>
    </method>
    <method name="isPrimitive" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns whether the given field class is one of the supported primitive
 types like number and date/time.]]>
      </doc>
    </method>
    <method name="isPrimitive" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns whether to given value is {@code null} or its class is primitive as
 defined by {@link #isPrimitive(Class)}.]]>
      </doc>
    </method>
    <method name="getFieldValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value of the given field in the given object instance using
 reflection.]]>
      </doc>
    </method>
    <method name="setFieldValue"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets to the given value of the given field in the given object instance
 using reflection.
 <p>
 If the field is final, it checks that value being set is identical to the
 existing value.]]>
      </doc>
    </method>
    <field name="isFinal" type="boolean"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether the field is final.]]>
      </doc>
    </field>
    <field name="isPrimitive" type="boolean"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether the field class is "primitive" as defined by
 {@link FieldInfo#isPrimitive(Class)}.]]>
      </doc>
    </field>
    <field name="type" type="java.lang.Class&lt;?&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field class.]]>
      </doc>
    </field>
    <field name="field" type="java.lang.reflect.Field"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field.]]>
      </doc>
    </field>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Data key name associated with the field. This string is interned.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Parses field information to determine data key name/value pair associated
 with the field.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.FieldInfo -->
  <!-- start class com.google.api.client.util.GenericData -->
  <class name="GenericData" extends="java.util.AbstractMap&lt;java.lang.String, java.lang.Object&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericData"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.Object"/>
    </method>
    <method name="put" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the given field value (may be {@code null}) for the given field name.
 Any existing value for the field will be overwritten. It may be more
 slightly more efficient than {@link #put(String, Object)} because it avoids
 accessing the field's original value.]]>
      </doc>
    </method>
    <method name="putAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;? extends java.lang.String, ?&gt;"/>
    </method>
    <method name="remove" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.Object"/>
    </method>
    <method name="entrySet" return="java.util.Set&lt;java.util.Map.Entry&lt;java.lang.String, java.lang.Object&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.util.GenericData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="unknownFields" type="com.google.api.client.util.ArrayMap&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Map of unknown fields.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic data that stores all unknown data key name/value pairs.
 <p>
 Subclasses can declare fields for known data keys using the {@link Key}
 annotation. {@code null} unknown data key names are not allowed, but {@code
 null} data values are allowed.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.GenericData -->
  <!-- start class com.google.api.client.util.Key -->
  <class name="Key"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Use this annotation to specify that a field is a data key, optionally
 providing the data key name to use.
 <p>
 If the data key name is not specifies, the default data key name is the
 field's name. For example:
 
 <code><pre>public class A {
 
   // uses data key name of "dataKeyNameMatchesFieldName" 
   &#64;Key
   public String dataKeyNameMatchesFieldName;
   
   // uses data key name of "some_other_name"
   &#64;Key("some_other_name") 
   private String dataKeyNameIsOverriden;
   
   // not a data key
   private String notADataKey; 
 }</pre></code>
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Key -->
  <!-- start class com.google.api.client.util.ReflectionMap -->
  <class name="ReflectionMap" extends="java.util.AbstractMap&lt;java.lang.String, java.lang.Object&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ReflectionMap" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="entrySet" return="java.util.Set&lt;java.util.Map.Entry&lt;java.lang.String, java.lang.Object&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Map that uses {@link ClassInfo} to parse the key/value pairs into a map.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ReflectionMap -->
  <!-- start class com.google.api.client.util.Strings -->
  <class name="Strings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="LINE_SEPARATOR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Line separator to use for this OS, i.e. {@code "\n"} or {@code "\r\n"}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for strings.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Strings -->
  <doc>
  <![CDATA[General utilities used throughout this library.

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.xml">
  <!-- start class com.google.api.client.xml.DefaultXmlParserFactory -->
  <class name="DefaultXmlParserFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.xml.XmlParserFactory"/>
    <method name="getInstance" return="com.google.api.client.xml.DefaultXmlParserFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Returns the only instance of the default XML parser factory.]]>
      </doc>
    </method>
    <method name="createParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="createSerializer" return="XmlSerializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <doc>
    <![CDATA[Default XML parser factory that uses the default specified in
 {@link XmlPullParserFactory}.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.DefaultXmlParserFactory -->
  <!-- start class com.google.api.client.xml.GenericXml -->
  <class name="GenericXml" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericXml"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clone" return="com.google.api.client.xml.GenericXml"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional XML element local name prefixed by its namespace alias -- for
 example {@code "atom:entry"} -- or {@code null} if not set.]]>
      </doc>
    </field>
    <field name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional namespace dictionary or {@code null} if not set.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic XML data that stores all unknown key name/value pairs.
 <p>
 Each data key name maps into the name of the XPath expression value for the
 XML element, attribute, or text content (using {@code "text()"}). Subclasses
 can declare fields for known XML content using the {@link Key} annotation.
 {@code null} unknown data key names are not allowed, but {@code null} data
 values are allowed.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.GenericXml -->
  <!-- start class com.google.api.client.xml.Xml -->
  <class name="Xml" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createSerializer" return="XmlSerializer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new XML serializer.
 
 @throws IllegalArgumentException if encountered an
         {@link XmlPullParserException}]]>
      </doc>
    </method>
    <method name="createParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Returns a new XML pull parser.]]>
      </doc>
    </method>
    <method name="toStringOf" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.Object"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value
 pairs.
 <p>
 It will make up something for the element name and XML namespaces. If those
 are known, it is better to use
 {@link XmlNamespaceDictionary#toStringOf(String, Object)}.
 
 @param element element data object of key/value pairs ({@link GenericXml},
        {@link Map}, or any object with public fields)]]>
      </doc>
    </method>
    <method name="parseElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="XmlPullParser"/>
      <param name="destination" type="java.lang.Object"/>
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="customizeParser" type="com.google.api.client.xml.Xml.CustomizeParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses an XML elment using the given XML pull parser into the given
 destination object.
 <p>
 Requires the the current event be {@link XmlPullParser#START_TAG} (skipping
 any initial {@link XmlPullParser#START_DOCUMENT}) of the element being
 parsed. At normal parsing completion, the current event will either be
 {@link XmlPullParser#END_TAG} of the element being parsed, or the
 {@link XmlPullParser#START_TAG} of the requested {@code atom:entry}.
 
 @param parser XML pull parser
 @param destination optional destination object to parser into or {@code
        null} to ignore XML content
 @param namespaceDictionary XML namespace dictionary to store unknown
        namespaces
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <field name="parserFactory" type="com.google.api.client.xml.XmlParserFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML Parser factory.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[XML utilities.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.Xml -->
  <!-- start class com.google.api.client.xml.Xml.CustomizeParser -->
  <class name="Xml.CustomizeParser" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Xml.CustomizeParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stopBeforeStartTag" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing when reaching the start tag of an XML
 element before it has been processed. Only called if the element is
 actually being processed. By default, returns {@code false}, but
 subclasses may override.
 
 @param namespace XML element's namespace URI
 @param localName XML element's local name]]>
      </doc>
    </method>
    <method name="stopAfterEndTag" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing when reaching the end tag of an XML
 element after it has been processed. Only called if the element is
 actually being processed. By default, returns {@code false}, but
 subclasses may override.
 
 @param namespace XML element's namespace URI
 @param localName XML element's local name]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Customizes the behavior of XML parsing. Subclasses may override any methods
 they need to customize behavior.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.Xml.CustomizeParser -->
  <!-- start class com.google.api.client.xml.XmlContent -->
  <class name="XmlContent" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="XmlContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default implementation returns {@code null}, but subclasses may override.]]>
      </doc>
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default implementation returns {@code -1}, but subclasses may override.]]>
      </doc>
    </method>
    <field name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Abstract XML HTTP serializer.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.XmlContent -->
  <!-- start class com.google.api.client.xml.XmlNamespaceDictionary -->
  <class name="XmlNamespaceDictionary" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlNamespaceDictionary"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a known namespace of the given alias and URI.
 
 @param alias alias
 @param uri namespace URI]]>
      </doc>
    </method>
    <method name="toStringOf" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value
 pairs.
 
 @param element element data object ({@link GenericXml}, {@link Map}, or any
        object with public fields)
 @param elementName optional XML element local name prefixed by its
        namespace alias -- for example {@code "atom:entry"} -- or {@code
        null} to make up something]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <param name="elementNamespaceUri" type="java.lang.String"/>
      <param name="elementLocalName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value
 pairs.
 
 @param element element data object ({@link GenericXml}, {@link Map}, or any
        object with public fields)
 @param elementNamespaceUri XML namespace URI or {@code null} for no
        namespace
 @param elementLocalName XML local name
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <param name="elementName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value
 pairs.
 
 @param element element data object ({@link GenericXml}, {@link Map}, or any
        object with public fields)
 @param elementName XML element local name prefixed by its namespace alias
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <field name="namespaceAliasToUriMap" type="java.util.HashMap&lt;java.lang.String, java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.XmlNamespaceDictionary -->
  <!-- start class com.google.api.client.xml.XmlParser -->
  <class name="XmlParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpParser"/>
    <constructor name="XmlParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Default implementation parses the content of the response into the data
 class of key/value pairs, but subclasses may override.]]>
      </doc>
    </method>
    <field name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Abstract XML HTTP parser into an data class of key/value pairs.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.XmlParser -->
  <!-- start interface com.google.api.client.xml.XmlParserFactory -->
  <interface name="XmlParserFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Creates a new XML pull parser.
 
 @throws XmlPullParserException if parser could not be created]]>
      </doc>
    </method>
    <method name="createSerializer" return="XmlSerializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Creates a new XML serializer.
 
 @throws XmlPullParserException if serializer could not be created]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Factory for creating new XML pull parsers and XML serializers.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.xml.XmlParserFactory -->
  <doc>
  <![CDATA[XML.
<p>This package depends on the {@link com.google.api.client.util}, {@link
com.google.api.client.http}, and {@code org.xmlpull.v1} packages.</p>

<p>This package depends on the {@link com.google.api.client.util} and {@link
org.codehaus.jackson} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.client.xml.atom">
  <!-- start class com.google.api.client.xml.atom.AbstractAtomFeedParser -->
  <class name="AbstractAtomFeedParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAtomFeedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parseFeed" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parse the feed and return a new parsed instance of the feed type. This
 method can be skipped if all you want are the items.
 
 @throws XmlPullParserException]]>
      </doc>
    </method>
    <method name="parseNextEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parse the next item in the feed and return a new parsed instanceof of the
 item type. If there is no item to parse, it will return {@code null} and
 automatically close the parser (in which case there is no need to call
 {@link #close()}.
 
 @throws XmlPullParserException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the underlying parser.]]>
      </doc>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <field name="parser" type="XmlPullParser"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="inputStream" type="java.io.InputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="feedClass" type="java.lang.Class&lt;T&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Abstract base class for an Atom feed parser when the feed type is known in
 advance.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.AbstractAtomFeedParser -->
  <!-- start class com.google.api.client.xml.atom.Atom -->
  <class name="Atom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="checkContentType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
    </method>
    <field name="ATOM_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.Atom -->
  <!-- start class com.google.api.client.xml.atom.AtomContent -->
  <class name="AtomContent" extends="com.google.api.client.xml.XmlContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="entry" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.AtomContent -->
  <!-- start class com.google.api.client.xml.atom.AtomFeedParser -->
  <class name="AtomFeedParser" extends="com.google.api.client.xml.atom.AbstractAtomFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomFeedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parseNextEntry" return="I"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="create" return="com.google.api.client.xml.atom.AtomFeedParser&lt;T, I&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;I&gt;"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="entryClass" type="java.lang.Class&lt;I&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Atom feed parser when the item class is known in advance.
 
 @since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.AtomFeedParser -->
  <!-- start class com.google.api.client.xml.atom.AtomParser -->
  <class name="AtomParser" extends="com.google.api.client.xml.XmlParser"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@since 2.2
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.AtomParser -->
  <doc>
  <![CDATA[Atom XML.

<p>This package depends on the {@link com.google.api.client.http}, {@link
com.google.api.client.util}, {@link com.google.api.client.xml}, and {@code
org.xmlpull.v1} packages.</p>

<p><b>Warning: this package is experimental, and its content may be
changed in incompatible ways or possibly entirely removed in a future version of
the library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.analytics.v2">
  <!-- start class com.google.api.data.analytics.v2.GoogleAnalytics -->
  <class name="GoogleAnalytics" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Analytics Data Export API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.analytics.v2.GoogleAnalytics -->
  <doc>
  <![CDATA[Small optional Java library for Google Analytics Data Export API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.analytics.v2.atom">
  <!-- start class com.google.api.data.analytics.v2.atom.GoogleAnalyticsAtom -->
  <class name="GoogleAnalyticsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Analytics Data Export API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.analytics.v2.atom.GoogleAnalyticsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Analytics Data
    Export API version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.blogger.v2">
  <!-- start class com.google.api.data.blogger.v2.Blogger -->
  <class name="Blogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Blogger Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.blogger.v2.Blogger -->
  <doc>
  <![CDATA[Small optional Java library for Blogger Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.blogger.v2.atom">
  <!-- start class com.google.api.data.blogger.v2.atom.BloggerAtom -->
  <class name="BloggerAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Blogger Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.blogger.v2.atom.BloggerAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Blogger Data API version
    2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.books.v1">
  <!-- start class com.google.api.data.books.v1.GoogleBookSearch -->
  <class name="GoogleBookSearch" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Book Search Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.books.v1.GoogleBookSearch -->
  <doc>
  <![CDATA[Small optional Java library for Google Book Search Data API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.books.v1.atom">
  <!-- start class com.google.api.data.books.v1.atom.GoogleBookSearchAtom -->
  <class name="GoogleBookSearchAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Book Search Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.books.v1.atom.GoogleBookSearchAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Book Search Data
    API version 1.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.buzz.v1">
  <!-- start class com.google.api.data.buzz.v1.Buzz -->
  <class name="Buzz" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Buzz API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.buzz.v1.Buzz -->
  <doc>
  <![CDATA[Small optional Java library for Google Buzz API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.buzz.v1.atom">
  <!-- start class com.google.api.data.buzz.v1.atom.BuzzAtom -->
  <class name="BuzzAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Buzz API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.buzz.v1.atom.BuzzAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Buzz API version
    1.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.calendar.v2">
  <!-- start class com.google.api.data.calendar.v2.GoogleCalendar -->
  <class name="GoogleCalendar" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Calendar Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.calendar.v2.GoogleCalendar -->
  <doc>
  <![CDATA[Small optional Java library for Google Calendar Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.calendar.v2.atom">
  <!-- start class com.google.api.data.calendar.v2.atom.GoogleCalendarAtom -->
  <class name="GoogleCalendarAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Calendar Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.calendar.v2.atom.GoogleCalendarAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Calendar Data API
    version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.codesearch.v2">
  <!-- start class com.google.api.data.codesearch.v2.GoogleCodeSearch -->
  <class name="GoogleCodeSearch" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Code Search Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.codesearch.v2.GoogleCodeSearch -->
  <doc>
  <![CDATA[Small optional Java library for Google Code Search Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.codesearch.v2.atom">
  <!-- start class com.google.api.data.codesearch.v2.atom.GoogleCodeSearchAtom -->
  <class name="GoogleCodeSearchAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Code Search Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.codesearch.v2.atom.GoogleCodeSearchAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Code Search Data
    API version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.contacts.v3">
  <!-- start class com.google.api.data.contacts.v3.GoogleContacts -->
  <class name="GoogleContacts" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Contacts Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.contacts.v3.GoogleContacts -->
  <doc>
  <![CDATA[Small optional Java library for Google Contacts Data API version 3.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.contacts.v3.atom">
  <!-- start class com.google.api.data.contacts.v3.atom.GoogleContactsAtom -->
  <class name="GoogleContactsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Contacts Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.contacts.v3.atom.GoogleContactsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Contacts Data API
    version 3.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.docs.v3">
  <!-- start class com.google.api.data.docs.v3.GoogleDocumentsList -->
  <class name="GoogleDocumentsList" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Documents List Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.docs.v3.GoogleDocumentsList -->
  <doc>
  <![CDATA[Small optional Java library for Google Documents List Data API version 3.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.docs.v3.atom">
  <!-- start class com.google.api.data.docs.v3.atom.GoogleDocumentsListAtom -->
  <class name="GoogleDocumentsListAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Documents List Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.docs.v3.atom.GoogleDocumentsListAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Documents List
    Data API version 3.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.finance.v2">
  <!-- start class com.google.api.data.finance.v2.GoogleFinance -->
  <class name="GoogleFinance" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Finance Portfolio Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.finance.v2.GoogleFinance -->
  <doc>
  <![CDATA[Small optional Java library for Google Finance Portfolio Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.finance.v2.atom">
  <!-- start class com.google.api.data.finance.v2.atom.GoogleFinanceAtom -->
  <class name="GoogleFinanceAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Finance Portfolio Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.finance.v2.atom.GoogleFinanceAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Finance Portfolio
    Data API version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.gbase.v2">
  <!-- start class com.google.api.data.gbase.v2.GoogleBase -->
  <class name="GoogleBase" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Base Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.gbase.v2.GoogleBase -->
  <doc>
  <![CDATA[Small optional Java library for Google Base Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.gbase.v2.atom">
  <!-- start class com.google.api.data.gbase.v2.atom.GoogleBaseAtom -->
  <class name="GoogleBaseAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Base Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.gbase.v2.atom.GoogleBaseAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Base Data API
    version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.health.v2">
  <!-- start class com.google.api.data.health.v2.GoogleHealth -->
  <class name="GoogleHealth" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Health Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.health.v2.GoogleHealth -->
  <doc>
  <![CDATA[Small optional Java library for Google Health Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.health.v2.atom">
  <!-- start class com.google.api.data.health.v2.atom.GoogleHealthAtom -->
  <class name="GoogleHealthAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Health Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.health.v2.atom.GoogleHealthAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Health Data API
    version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.latitude.v1">
  <!-- start class com.google.api.data.latitude.v1.GoogleLatitude -->
  <class name="GoogleLatitude" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Latitude API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.latitude.v1.GoogleLatitude -->
  <doc>
  <![CDATA[Small optional Java library for Google Latitude API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.latitude.v1.atom">
  <!-- start class com.google.api.data.latitude.v1.atom.GoogleLatitudeAtom -->
  <class name="GoogleLatitudeAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Latitude API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.latitude.v1.atom.GoogleLatitudeAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Latitude API
    version 1.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.maps.v2">
  <!-- start class com.google.api.data.maps.v2.GoogleMaps -->
  <class name="GoogleMaps" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Maps Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.maps.v2.GoogleMaps -->
  <doc>
  <![CDATA[Small optional Java library for Google Maps Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.maps.v2.atom">
  <!-- start class com.google.api.data.maps.v2.atom.GoogleMapsAtom -->
  <class name="GoogleMapsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Maps Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.maps.v2.atom.GoogleMapsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Maps Data API
    version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.migration.v1">
  <!-- start class com.google.api.data.migration.v1.GoogleAppsEmailMigration -->
  <class name="GoogleAppsEmailMigration" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Apps Email Migration API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.migration.v1.GoogleAppsEmailMigration -->
  <doc>
  <![CDATA[Small optional Java library for Google Apps Email Migration API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.migration.v1.atom">
  <!-- start class com.google.api.data.migration.v1.atom.GoogleAppsEmailMigrationAtom -->
  <class name="GoogleAppsEmailMigrationAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Apps Email Migration API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.migration.v1.atom.GoogleAppsEmailMigrationAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Apps Email
    Migration API version 1.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.moderator.v1">
  <!-- start class com.google.api.data.moderator.v1.GoogleModerator -->
  <class name="GoogleModerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Moderator API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.moderator.v1.GoogleModerator -->
  <doc>
  <![CDATA[Small optional Java library for Google Moderator API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.picasa.v2">
  <!-- start class com.google.api.data.picasa.v2.PicasaWebAlbums -->
  <class name="PicasaWebAlbums" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Picasa Web Albums Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.picasa.v2.PicasaWebAlbums -->
  <doc>
  <![CDATA[Small optional Java library for Picasa Web Albums Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.picasa.v2.atom">
  <!-- start class com.google.api.data.picasa.v2.atom.PicasaWebAlbumsAtom -->
  <class name="PicasaWebAlbumsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Picasa Web Albums Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.picasa.v2.atom.PicasaWebAlbumsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Picasa Web Albums Data
    API version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.sidewiki.v2">
  <!-- start class com.google.api.data.sidewiki.v2.GoogleSidewiki -->
  <class name="GoogleSidewiki" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Sidewiki Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.sidewiki.v2.GoogleSidewiki -->
  <doc>
  <![CDATA[Small optional Java library for Google Sidewiki Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.sidewiki.v2.atom">
  <!-- start class com.google.api.data.sidewiki.v2.atom.GoogleSidewikiAtom -->
  <class name="GoogleSidewikiAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Sidewiki Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.sidewiki.v2.atom.GoogleSidewikiAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Sidewiki Data API
    version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.sites.v1">
  <!-- start class com.google.api.data.sites.v1.GoogleSites -->
  <class name="GoogleSites" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Sites Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.sites.v1.GoogleSites -->
  <doc>
  <![CDATA[Small optional Java library for Google Sites Data API version 1.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.sites.v1.atom">
  <!-- start class com.google.api.data.sites.v1.atom.GoogleSitesAtom -->
  <class name="GoogleSitesAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Sites Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.sites.v1.atom.GoogleSitesAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Sites Data API
    version 1.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.spreadsheet.v3">
  <!-- start class com.google.api.data.spreadsheet.v3.GoogleSpreadsheets -->
  <class name="GoogleSpreadsheets" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Spreadsheets Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.spreadsheet.v3.GoogleSpreadsheets -->
  <doc>
  <![CDATA[Small optional Java library for Google Spreadsheets Data API version 3.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.spreadsheet.v3.atom">
  <!-- start class com.google.api.data.spreadsheet.v3.atom.GoogleSpreadsheetsAtom -->
  <class name="GoogleSpreadsheetsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Spreadsheets Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.spreadsheet.v3.atom.GoogleSpreadsheetsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Spreadsheets Data
    API version 3.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.webmastertools.v2">
  <!-- start class com.google.api.data.webmastertools.v2.GoogleWebmasterTools -->
  <class name="GoogleWebmasterTools" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the Google Webmaster Tools Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.webmastertools.v2.GoogleWebmasterTools -->
  <doc>
  <![CDATA[Small optional Java library for Google Webmaster Tools Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.webmastertools.v2.atom">
  <!-- start class com.google.api.data.webmastertools.v2.atom.GoogleWebmasterToolsAtom -->
  <class name="GoogleWebmasterToolsAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the Google Webmaster Tools Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.webmastertools.v2.atom.GoogleWebmasterToolsAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for Google Webmaster Tools
    Data API version 2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.youtube.v2">
  <!-- start class com.google.api.data.youtube.v2.YouTube -->
  <class name="YouTube" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Version name.]]>
      </doc>
    </field>
    <field name="ROOT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Root URL.]]>
      </doc>
    </field>
    <field name="AUTH_TOKEN_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The authentication token type used for Client Login.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for the YouTube Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.youtube.v2.YouTube -->
  <doc>
  <![CDATA[Small optional Java library for YouTube Data API version 2.

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>
<package name="com.google.api.data.youtube.v2.atom">
  <!-- start class com.google.api.data.youtube.v2.atom.YouTubeAtom -->
  <class name="YouTubeAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="NAMESPACE_DICTIONARY" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for the Atom XML format of the YouTube Data API.

 @since 2.2]]>
    </doc>
  </class>
  <!-- end class com.google.api.data.youtube.v2.atom.YouTubeAtom -->
  <doc>
  <![CDATA[Small optional Java library for the Atom XML format for YouTube Data API version
    2.

<p>This package depends on the {@link com.google.api.client.xml} package.</p>

<p><b>Warning: this package is experimental, and its content may be changed in
    incompatible ways or possibly entirely removed in a future version of the
    library</b></p>

@since 2.2]]>
  </doc>
</package>

</api>
