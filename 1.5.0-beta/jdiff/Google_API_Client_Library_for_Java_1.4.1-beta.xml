<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Fri Jul 29 06:23:56 EDT 2011 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Google API Client Library for Java 1.4.1-beta"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/yanivi/programs/jdiff-1.1.1/jdiff.jar:/home/yanivi/programs/jdiff-1.1.1/xerces.jar -d /tmp/google-api-java-client/javadoc/1.5.0-beta/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-nodeps.jar:/usr/share/ant/lib/ant-trax.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant.jar:/usr/local/buildtools/java/jdk6-google-v4/lib/tools.jar -sourcepath /tmp/google-api-java-client/1.4.1-beta/google-api-client-googleapis/src/main/java:/tmp/google-api-java-client/1.4.1-beta/google-api-client-googleapis-extensions/src/main/java:/tmp/google-api-java-client/1.4.1-beta/google-api-client-googleapis-extensions-android2/src/main/java -apiname Google API Client Library for Java 1.4.1-beta -baseURI http://www.w3.org -apidir /tmp/google-api-java-client/javadoc/1.5.0-beta/jdiff -source 1.5 -->
<package name="com.google.api.client.googleapis">
  <!-- start class com.google.api.client.googleapis.GoogleHeaders -->
  <class name="GoogleHeaders" extends="HttpHeaders"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setSlugFromFileName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Slug"} header for the given file name, properly escaping the header value. See
 <a href="http://tools.ietf.org/html/rfc5023#section-9.7">The Slug Header</a>.]]>
      </doc>
    </method>
    <method name="setApplicationName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "User-Agent"} header of the form {@code
 "[company-id]-[app-name]/[app-version]"}, for example {@code "Google-Sample/1.0"}.]]>
      </doc>
    </method>
    <method name="setDeveloperId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="developerId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link #gdataKey} header using the given developer ID.]]>
      </doc>
    </method>
    <method name="setGoogleLogin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the Google Login {@code "Authorization"} header for the given authentication token.]]>
      </doc>
    </method>
    <method name="getGoogleLoginValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns Google Login {@code "Authorization"} header value based on the given authentication
 token.]]>
      </doc>
    </method>
    <field name="SLUG_ESCAPER" type="PercentEscaper"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Escaper for the {@link #slug} header.]]>
      </doc>
    </field>
    <field name="gdataVersion" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "GData-Version"} header.]]>
      </doc>
    </field>
    <field name="slug" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Escaped {@code "Slug"} header value, which must be escaped using {@link #SLUG_ESCAPER}.

 @see #setSlugFromFileName(String)]]>
      </doc>
    </field>
    <field name="gdataClient" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "X-GData-Client"} header.]]>
      </doc>
    </field>
    <field name="gdataKey" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "X-GData-Key"} header, which must be of the form {@code "key=[developerId]"}.

 @see #setDeveloperId(String)]]>
      </doc>
    </field>
    <field name="googAcl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-acl"} header that lets you apply predefined (canned) ACLs to a bucket or object
 when you upload it or create it.]]>
      </doc>
    </field>
    <field name="googCopySource" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-copy-source"} header that specifies the destination bucket and object for a copy
 operation.]]>
      </doc>
    </field>
    <field name="googCopySourceIfMatch" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-copy-source-if-match"} header that specifies the conditions for a copy
 operation.]]>
      </doc>
    </field>
    <field name="googCopySourceIfNoneMatch" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-copy-source-if-none-match"} header that specifies the conditions for a copy
 operation.]]>
      </doc>
    </field>
    <field name="googCopySourceIfModifiedSince" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-copy-source-if-modified-since"} header that specifies the conditions for a copy
 operation.]]>
      </doc>
    </field>
    <field name="googCopySourceIfUnmodifiedSince" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-copy-source-if-unmodified-since"} header that specifies the conditions for a
 copy operation.]]>
      </doc>
    </field>
    <field name="googDate" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-date"} header that specifies a time stamp for authenticated requests.]]>
      </doc>
    </field>
    <field name="googMetadataDirective" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "x-goog-metadata-directive"} header that specifies metadata handling during a copy
 operation.]]>
      </doc>
    </field>
    <field name="methodOverride" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "X-HTTP-Method-Override"} header.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP headers for Google API's.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleHeaders -->
  <!-- start class com.google.api.client.googleapis.GoogleUrl -->
  <class name="GoogleUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUrl encoded URL, including any existing query parameters that should be parsed]]>
      </doc>
    </constructor>
    <method name="clone" return="com.google.api.client.googleapis.GoogleUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="com.google.api.client.googleapis.GoogleUrl"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedServerUrl" type="java.lang.String"/>
      <param name="pathTemplate" type="java.lang.String"/>
      <param name="parameters" type="java.lang.Object"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[Construct a GoogleUrl from a server, template and a parameter block.

 @param encodedServerUrl encoded URL of the server
 @param pathTemplate path template
 @param parameters an object with parameters designated by Key annotations. If the template has
        no variable references, parameters may be {@code null}.
 @throws IllegalArgumentException if a requested element in the pathTemplate is not in the
         parameters

 @since 1.3]]>
      </doc>
    </method>
    <field name="prettyprint" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether to pretty print the output.]]>
      </doc>
    </field>
    <field name="alt" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Alternate wire format.]]>
      </doc>
    </field>
    <field name="fields" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Partial fields mask.]]>
      </doc>
    </field>
    <field name="key" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[API key as described in the <a href="https://code.google.com/apis/console-help/">Google APIs
 Console documentation</a>.

 @since 1.3]]>
      </doc>
    </field>
    <field name="userip" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User IP used to enforce per-user limits for server-side applications, as described in the <a
 href="https://code.google.com/apis/console-help/#EnforceUserLimits">Google APIs Console
 documentation</a>.

 @since 1.3]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic Google URL providing for some common query parameters used in Google API's such as the
 {@link #alt} and {@link #fields} parameters.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUrl -->
  <!-- start class com.google.api.client.googleapis.GoogleUtils -->
  <class name="GoogleUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be removed in 1.5) Use {@link MethodOverride}">
    <method name="useMethodOverride" return="com.google.api.client.googleapis.MethodOverrideIntercepter"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.5) Use {@link MethodOverride}">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[Routes via HTTP POST all HTTP requests that don't use the GET or POST method to when running
 behind a firewall that has restrictions on HTTP methods.

 <p>
 Specifically, it add a method override intercepter {@link MethodOverrideIntercepter} as the
 first HTTP execute intercepter. The set of HTTP methods to override via POST may be customized
 in {@link MethodOverrideIntercepter#override}.
 </p>
 Sample usage:

 <pre>
 <code>
  static HttpTransport createTransport() {
    HttpTransport transport = new HttpTransport();
    MethodOverrideIntercepter methodOverrider = GoogleUtils.useMethodOverride(transport);
    return transport;
  }
 </code>
 </pre>

 @return HTTP transport
 @deprecated (scheduled to be removed in 1.5) Use {@link MethodOverride}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for the HTTP transport for Google API's.

 @since 1.3
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.5) Use {@link MethodOverride}]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUtils -->
  <!-- start class com.google.api.client.googleapis.MethodOverride -->
  <class name="MethodOverride" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MethodOverride"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Assumes not override HTTP methods unless the transport doesn't support them.]]>
      </doc>
    </constructor>
    <constructor name="MethodOverride" type="java.util.EnumSet&lt;HttpMethod&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param override HTTP methods to override (in addition to the ones the transport doesn't
        support).]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[HTTP request execute interceptor for Google API's that wraps HTTP requests -- other than GET or
 POST -- inside of a POST request and uses {@code "X-HTTP-Method-Override"} header to specify the
 actual HTTP method.
 <p>
 Use this for an HTTP transport that doesn't support PATCH like {@code NetHttpTransport} or {@code
 UrlFetchTransport}. By default, only the methods not supported by the transport will be
 overridden. When running behind a firewall that does not support certain verbs like PATCH, use
 the {@link MethodOverride#MethodOverride(EnumSet)} constructor instead to specify additional
 methods to override.
 </p>
 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new MethodOverride());
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverride -->
  <!-- start class com.google.api.client.googleapis.MethodOverrideIntercepter -->
  <class name="MethodOverrideIntercepter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.5) Use {@link MethodOverride}">
    <constructor name="MethodOverrideIntercepter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <field name="override" type="java.util.EnumSet&lt;HttpMethod&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP methods supported by the HTTP transport that nevertheless need to be overridden.
 <p>
 Any HTTP method not supported by the HTTP transport is automatically overridden, so it doesn't
 matter if those HTTP methods are specified here. By default, the methods DELETE, HEAD, PATCH,
 and PUT are all overridden. GET and POST are never overridden.
 </p>

 @since 1.3]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP request execute intercepter for Google API's that wraps HTTP requests -- other than GET or
 POST -- inside of a POST request and uses {@code "X-HTTP-Method-Override"} header to specify the
 actual HTTP method.
 <p>
 It is useful when a firewall only allows the GET and POST methods, or if the underlying HTTP
 library ({@link HttpTransport}) does not support the HTTP method.
 </p>

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.5) Use {@link MethodOverride}]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverrideIntercepter -->
</package>
<package name="com.google.api.client.googleapis.auth">
  <!-- start class com.google.api.client.googleapis.auth.AuthKeyValueParser -->
  <class name="AuthKeyValueParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="com.google.api.client.googleapis.auth.AuthKeyValueParser"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Singleton instance.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP parser for Google response to an Authorization request.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.AuthKeyValueParser -->
</package>
<package name="com.google.api.client.googleapis.auth.authsub">
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSub -->
  <class name="AuthSub" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="(scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0">
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code AuthSub} authorization header value based on the given authentication token.]]>
      </doc>
    </method>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="privateKey" type="java.security.PrivateKey"/>
      <param name="requestMethod" type="java.lang.String"/>
      <param name="requestUrl" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns {@code AuthSub} authorization header value based on the given authentication token,
 private key, request method, and request URL.

 @throws GeneralSecurityException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for AuthSub.

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSub -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper -->
  <class name="AuthSubHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0">
    <constructor name="AuthSubHelper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setPrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="privateKey" type="java.security.PrivateKey"/>
      <doc>
      <![CDATA[Sets to the given private key for secure AuthSub or {@code null} for non-secure AuthSub.
 <p>
 Updates the authorization header of the Google transport (set using
 {@link #setTransport(HttpTransport)}).]]>
      </doc>
    </method>
    <method name="setTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[Sets to the given Google transport whose authorization header to set or {@code null} to ignore
 (for example if using an alternative HTTP library).
 <p>
 Updates the authorization header of the Google transport.]]>
      </doc>
    </method>
    <method name="setToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets to the given single-use or session token (or resets any existing token if {@code null}).
 <p>
 Any previous stored single-use or session token will be forgotten. Updates the authorization
 header of the Google transport (set using {@link #setTransport(HttpTransport)}).]]>
      </doc>
    </method>
    <method name="exchangeForSessionToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exchanges the single-use token for a session token as described in <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubSessionToken"
 >AuthSubSessionToken</a>. Sets the authorization header of the Google transport using the
 session token, and automatically sets the token used by this instance using
 {@link #setToken(String)}.
 <p>
 Note that Google allows at most 10 session tokens per use per web application, so the session
 token for each user must be persisted.

 @return session token
 @throws HttpResponseException if the authentication response has an error code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <method name="revokeSessionToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Revokes the session token. Clears any existing authorization header of the Google transport and
 automatically resets the token by calling {@code setToken(null)}.
 <p>
 See <a href= "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubRevokeToken"
 >AuthSubRevokeToken</a> for protocol details.

 @throws HttpResponseException if the authentication response has an error code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <method name="requestTokenInfo" return="com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Retries the token information as described in <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubTokenInfo"
 >AuthSubTokenInfo</a>.

 @throws HttpResponseException if the authentication response has an error code
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <field name="authSubTransport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for AuthSub requests.

 @since 1.3]]>
      </doc>
    </field>
    <doc>
    <![CDATA[AuthSub token manager for a single user.
 <p>
 To properly initialize, set:
 <ul>
 <li>{@link #setToken}: single-use or session token (required)</li>
 <li>{@link #transport}: Google transport (recommended)</li>
 <li>{@link #privateKey}: private key for secure AuthSub (recommended)</li>
 </ul>

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.SessionTokenResponse -->
  <class name="AuthSubHelper.SessionTokenResponse" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubHelper.SessionTokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="sessionToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response for an AuthSubSessionToken request.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.SessionTokenResponse -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse -->
  <class name="AuthSubHelper.TokenInfoResponse" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubHelper.TokenInfoResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="secure" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="target" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response for an AuthSubTokenInfo request.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubHelper.TokenInfoResponse -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl -->
  <class name="AuthSubSingleUseTokenRequestUrl" extends="GenericUrl"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0">
    <constructor name="AuthSubSingleUseTokenRequestUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="nextUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(required) URL the user should be redirected to after a successful login. This value should be
 a page on the web application site, and can include query parameters.]]>
      </doc>
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(required) URL identifying the service(s) to be accessed; see documentation for the service for
 the correct value(s). The resulting token enables access to the specified service(s) only. To
 specify more than one scope, list each one separated with a space (encodes as "%20").]]>
      </doc>
    </field>
    <field name="template" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optionally use {@code "mobile"} to for a mobile version of the approval page or {@code null}
 for normal.]]>
      </doc>
    </field>
    <field name="hostedDomain" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional value identifying a particular Google Apps (hosted) domain account to be accessed (for
 example, 'mycollege.edu') or {@code null} or {@code "default"} for a regular Google account
 ('username@gmail.com').]]>
      </doc>
    </field>
    <field name="language" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional ISO 639 country code identifying what language the approval page should be translated
 in (for example, 'hl=en' for English) or {@code null} for the user's selected language.]]>
      </doc>
    </field>
    <field name="secure" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Boolean flag indicating whether the authorization transaction should issue a secure
 token (1) or a non-secure token (0). Secure tokens are available to registered applications
 only.]]>
      </doc>
    </field>
    <field name="session" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Boolean flag indicating whether the one-time-use token may be exchanged for a
 session token (1) or not (0).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic URL that builds an AuthSub request URL to retrieve a single-use token. See <a href=
 "http://code.google.com/apis/accounts/docs/AuthSub.html#AuthSubRequest" >documentation</a>.

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.5) Use OAuth 1.0a or OAuth 2.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl.ResponseUrl -->
  <class name="AuthSubSingleUseTokenRequestUrl.ResponseUrl" extends="GenericUrl"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AuthSubSingleUseTokenRequestUrl.ResponseUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="token" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Generic URL with a token parameter that can be used to extract the AuthSub single-use token
 from the AuthSubRequest response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.authsub.AuthSubSingleUseTokenRequestUrl.ResponseUrl -->
</package>
<package name="com.google.api.client.googleapis.auth.clientlogin">
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <class name="ClientLogin" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="authenticate" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="HttpResponseException" type="HttpResponseException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Authenticates based on the provided field values.

 @throws HttpResponseException if the authentication response has an error code, such as for a
         CAPTCHA challenge. Call {@link HttpResponseException#response exception.response}.
         {@link HttpResponse#parseAs(Class) parseAs}({@link ClientLogin.ErrorInfo
         ClientLoginAuthenticator.ErrorInfo}.class) to parse the response.
 @throws IOException some other kind of I/O exception]]>
      </doc>
    </method>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for executing request in {@link #authenticate()}.

 @since 1.3]]>
      </doc>
    </field>
    <field name="serverUrl" type="GenericUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL for the Client Login authorization server.

 <p>
 By default this is {@code "https://www.google.com"}, but it may be overridden for testing
 purposes.
 </p>

 @since 1.3]]>
      </doc>
    </field>
    <field name="applicationName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Short string identifying your application for logging purposes of the form:
 "companyName-applicationName-versionID".]]>
      </doc>
    </field>
    <field name="authTokenType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the Google service you're requesting authorization for, for example {@code "cl"} for
 Google Calendar.]]>
      </doc>
    </field>
    <field name="username" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's full email address.]]>
      </doc>
    </field>
    <field name="password" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's password.]]>
      </doc>
    </field>
    <field name="accountType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Type of account to request authorization for. Possible values are:

 <ul>
 <li>GOOGLE (get authorization for a Google account only)</li>
 <li>HOSTED (get authorization for a hosted account only)</li>
 <li>HOSTED_OR_GOOGLE (get authorization first for a hosted account; if attempt fails, get
 authorization for a Google account)</li>
 </ul>

 Use HOSTED_OR_GOOGLE if you're not sure which type of account you want authorization for. If
 the user information matches both a hosted and a Google account, only the hosted account is
 authorized.

 @since 1.1]]>
      </doc>
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Token representing the specific CAPTCHA challenge.]]>
      </doc>
    </field>
    <field name="captchaAnswer" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) String entered by the user as an answer to a CAPTCHA challenge.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Client Login authentication method as described in <a
 href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html" >ClientLogin for
 Installed Applications</a>.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <class name="ClientLogin.ErrorInfo" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="error" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="url" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse an error response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <class name="ClientLogin.Response" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.Response"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization header value to use based on the authentication token.]]>
      </doc>
    </method>
    <method name="setAuthorizationHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.5) Use {link Response} directly">
      <param name="googleTransport" type="HttpTransport"/>
      <doc>
      <![CDATA[Sets the authorization header for the given Google transport using the authentication token.

 @deprecated (scheduled to be removed in 1.5) Use {link Response} directly]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <field name="auth" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Authentication token.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport, Response response) {
    return transport.createRequestFactory(response);
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
</package>
<package name="com.google.api.client.googleapis.auth.oauth">
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthAuthorizeTemporaryTokenUrl -->
  <class name="GoogleOAuthAuthorizeTemporaryTokenUrl" extends="OAuthAuthorizeTemporaryTokenUrl"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthAuthorizeTemporaryTokenUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="template" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optionally use {@code "mobile"} to for a mobile version of the approval page or {@code null}
 for normal.]]>
      </doc>
    </field>
    <field name="hostedDomain" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional value identifying a particular Google Apps (hosted) domain account to be accessed (for
 example, 'mycollege.edu') or {@code null} or {@code "default"} for a regular Google account
 ('username@gmail.com').]]>
      </doc>
    </field>
    <field name="language" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional ISO 639 country code identifying what language the approval page should be translated
 in (for example, 'hl=en' for English) or {@code null} for the user's selected language.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google OAuth 1.0a URL builder for a Google Accounts web page to allow the end user to authorize
 the temporary token.
 <p>
 This only supports Google API's that use {@code
 "https://www.google.com/accounts/OAuthAuthorizeToken"} for authorizing temporary tokens.
 </p>
 <p>
 The {@link #temporaryToken} should be set from the {@link OAuthCredentialsResponse#token}
 returned by {@link GoogleOAuthGetTemporaryToken#execute()}. Use {@link #build()} to build the
 authorization URL. If a {@link OAuthGetTemporaryToken#callback} was specified, after the end user
 grants the authorization, the Google authorization server will redirect to that callback URL. To
 parse the response, use {@link OAuthCallbackUrl}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthAuthorizeTemporaryTokenUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation -->
  <class name="GoogleOAuthDomainWideDelegation" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthDomainWideDelegation"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="signRequests"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.5) Use {@link GoogleOAuthDomainWideDelegation}
             directly">
      <param name="transport" type="HttpTransport"/>
      <param name="parameters" type="OAuthParameters"/>
      <doc>
      <![CDATA[Performs OAuth HTTP request signing via query parameter for the {@code xoauth_requestor_id} and
 the {@code Authorization} header as the final HTTP request execute intercepter for the given
 HTTP request execute manager.

 @param transport HTTP transport
 @param parameters OAuth parameters; the {@link OAuthParameters#signer} and
        {@link OAuthParameters#consumerKey} should be set
 @deprecated (scheduled to be removed in 1.5) Use {@link GoogleOAuthDomainWideDelegation}
             directly]]>
      </doc>
    </method>
    <field name="requestorId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Email address of the user whose data you are trying to access.]]>
      </doc>
    </field>
    <field name="parameters" type="OAuthParameters"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[OAuth parameters.

 @since 1.4]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google's OAuth domain-wide delegation requires an e-mail address of the user whose data you are
 trying to access via {@link #requestorId} on every HTTP request.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    GoogleOAuthDomainWideDelegation initializer = new GoogleOAuthDomainWideDelegation();
    initializer.requestorId = "...";
    OAuthParameters parameters = new OAuthParameters();
    // parameters...
    initializer.parameters = parameters;
    return transport.createRequestFactory(initializer);
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation.Url -->
  <class name="GoogleOAuthDomainWideDelegation.Url" extends="com.google.api.client.googleapis.GoogleUrl"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthDomainWideDelegation.Url" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param encodedUrl encoded URL, including any existing query parameters that should be parsed]]>
      </doc>
    </constructor>
    <field name="requestorId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Email address of the user whose data you are trying to access.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic URL that extends {@link GoogleUrl} and also provides the {@link #requestorId}
 parameter.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthDomainWideDelegation.Url -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken -->
  <class name="GoogleOAuthGetAccessToken" extends="OAuthGetAccessToken"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthGetAccessToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="revokeAccessToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <param name="parameters" type="OAuthParameters"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Revokes the long-lived access token.

 @param parameters OAuth parameters
 @throws IOException I/O exception
 @since 1.3]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generic Google OAuth 1.0a URL to request to exchange the temporary credentials token (or "request
 token") for a long-lived credentials token (or "access token") from the Google Authorization
 server.
 <p>
 Use {@link #execute()} to execute the request. The long-lived access token acquired with this
 request is found in {@link OAuthCredentialsResponse#token} . This token must be stored. It may
 then be used to authorize HTTP requests to protected resources in Google services by using
 {@link OAuthParameters}.
 <p>
 To revoke the stored access token, use {@link #revokeAccessToken}.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetAccessToken -->
  <!-- start class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetTemporaryToken -->
  <class name="GoogleOAuthGetTemporaryToken" extends="OAuthGetTemporaryToken"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuthGetTemporaryToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createParameters" return="OAuthParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="displayName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional string identifying the application or {@code null} for none. This string is displayed
 to end users on Google's authorization confirmation page. For registered applications, the
 value of this parameter overrides the name set during registration and also triggers a message
 to the user that the identity can't be verified. For unregistered applications, this parameter
 enables them to specify an application name, In the case of unregistered applications, if this
 parameter is not set, Google identifies the application using the URL value of oauth_callback;
 if neither parameter is set, Google uses the string "anonymous".]]>
      </doc>
    </field>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Required URL identifying the service(s) to be accessed. The resulting token enables access to
 the specified service(s) only. Scopes are defined by each Google service; see the service's
 documentation for the correct value. To specify more than one scope, list each one separated
 with a space.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic Google OAuth 1.0a URL to request a temporary credentials token (or "request token") from
 the Google Authorization server.
 <p>
 Use {@link #execute()} to execute the request. Google verifies that the requesting application
 has been registered with Google or is using an approved signature (in the case of installed
 applications). The temporary token acquired with this request is found in
 {@link OAuthCredentialsResponse#token} . This temporary token is used in
 {@link GoogleOAuthAuthorizeTemporaryTokenUrl#temporaryToken} to direct the end user to a Google
 Accounts web page to allow the end user to authorize the temporary token.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth.GoogleOAuthGetTemporaryToken -->
</package>
<package name="com.google.api.client.googleapis.auth.oauth2.draft10">
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessProtectedResource -->
  <class name="GoogleAccessProtectedResource" extends="AccessProtectedResource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccessProtectedResource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param accessToken access token or {@code null} for none]]>
      </doc>
    </constructor>
    <constructor name="GoogleAccessProtectedResource" type="java.lang.String, HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param accessToken access token or {@code null} for none
 @param transport HTTP transport for executing refresh token request
 @param jsonFactory JSON factory to use for parsing response for refresh token request
 @param clientId client identifier
 @param clientSecret client secret
 @param refreshToken refresh token associated with the access token to be refreshed]]>
      </doc>
    </constructor>
    <method name="executeRefreshToken" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Thread-safe Google extension to the OAuth 2.0 (draft 10) method for specifying and refreshing the
 access token parameter as a request parameter.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactoryNoRefresh(HttpTransport transport,
      JsonFactory jsonFactory, AccessTokenResponse accessTokenResponse) {
    return transport.createRequestFactory(new GoogleAccessProtectedResource(
        accessTokenResponse.accessToken));
  }

  public static HttpRequestFactory createRequestFactory(HttpTransport transport,
      JsonFactory jsonFactory, AccessTokenResponse accessTokenResponse) {
    return transport.createRequestFactory(new GoogleAccessProtectedResource(
        accessTokenResponse.accessToken, transport, jsonFactory, "s6BhdRkqt3", "gX1fBat3bV",
        accessTokenResponse.refreshToken));
  }
 </pre>

 <p>
 If you need to persist the access token in a data store, subclass AccessProtectedResource and
 override {@link #onAccessToken(String)}.
 </p>

 <p>
 If you have a custom request initializer, request execute interceptor, or unsuccessful response
 handler, take a look at the sample usage for {@link HttpExecuteInterceptor} and
 {@link HttpUnsuccessfulResponseHandler}, which are interfaces that this class also implements.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessProtectedResource -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest -->
  <class name="GoogleAccessTokenRequest" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="AUTHORIZATION_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Authorization server URL for requesting tokens.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google extension to the OAuth 2.0 (draft 10) request for an access token.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleAssertionGrant -->
  <class name="GoogleAccessTokenRequest.GoogleAssertionGrant" extends="AssertionGrant"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccessTokenRequest.GoogleAssertionGrant"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleAccessTokenRequest.GoogleAssertionGrant" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport for executing request in {@link #execute()}
 @param jsonFactory JSON factory to use for parsing response in {@link #execute()}
 @param clientSecret client secret
 @param assertionType format of the assertion as defined by the authorization server. The
        value MUST be an absolute URI
 @param assertion assertion]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Google extension to the OAuth 2.0 Assertion Flow: request an access token based on an
 assertion.
 <p>
 Sample usage:

 <pre>
 <code>
    static void requestAccessToken() throws IOException {
      try {
        GoogleAssertionGrant request =
            new GoogleAssertionGrant(new NetHttpTransport(), new JacksonFactory(), "gX1fBat3bV",
                "urn:oasis:names:tc:SAML:2.0:", "PHNhbWxwOl...[omitted for brevity]...ZT4=");
        AccessTokenResponse response = request.execute();
        System.out.println("Access token: " + response.accessToken);
      } catch (HttpResponseException e) {
        AccessTokenErrorResponse response = e.response.parseAs(AccessTokenErrorResponse.class);
        System.out.println("Error: " + response.error);
      }
    }
 </code>
 </pre>
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleAssertionGrant -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleAuthorizationCodeGrant -->
  <class name="GoogleAccessTokenRequest.GoogleAuthorizationCodeGrant" extends="AuthorizationCodeGrant"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccessTokenRequest.GoogleAuthorizationCodeGrant"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleAccessTokenRequest.GoogleAuthorizationCodeGrant" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport required for executing request in {@link #execute()}
 @param jsonFactory JSON factory to use for parsing response in {@link #execute()}
 @param clientId client identifier
 @param clientSecret String clientSecret
 @param code authorization code received from the authorization server
 @param redirectUri redirection URI used in the initial request]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Google extension to the OAuth 2.0 Web Server Flow: request an access token based on a
 verification code.
 <p>
 Sample usage:

 <pre>
 <code>
    static void requestAccessToken() throws IOException {
      try {
        GoogleAuthorizationCodeGrant request =
            new GoogleAuthorizationCodeGrant(new NetHttpTransport(),
                new JacksonFactory(),
                "s6BhdRkqt3",
                "gX1fBat3bV",
                "i1WsRn1uB1",
                "https://client.example.com/cb");
        AccessTokenResponse response = request.execute();
        System.out.println("Access token: " + response.accessToken);
      } catch (HttpResponseException e) {
        AccessTokenErrorResponse response = e.response.parseAs(AccessTokenErrorResponse.class);
        System.out.println("Error: " + response.error);
      }
    }
 </code>
 </pre>
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleAuthorizationCodeGrant -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleRefreshTokenGrant -->
  <class name="GoogleAccessTokenRequest.GoogleRefreshTokenGrant" extends="RefreshTokenGrant"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccessTokenRequest.GoogleRefreshTokenGrant"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleAccessTokenRequest.GoogleRefreshTokenGrant" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport for executing request in {@link #execute()}
 @param jsonFactory JSON factory to use for parsing response in {@link #execute()}
 @param clientId client identifier
 @param clientSecret client secret
 @param refreshToken refresh token associated with the access token to be refreshed]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Google extension to the OAuth 2.0 request to refresh an access token.
 <p>
 Sample usage:

 <pre>
 <code>
    static void requestAccessToken() throws IOException {
      try {
        GoogleRefreshTokenGrant request = new GoogleRefreshTokenGrant(new NetHttpTransport(),
            new JacksonFactory(),
            "s6BhdRkqt3",
            "gX1fBat3bV",
            "n4E9O119d");
        AccessTokenResponse response = request.execute();
        System.out.println("Access token: " + response.accessToken);
      } catch (HttpResponseException e) {
        AccessTokenErrorResponse response = e.response.parseAs(AccessTokenErrorResponse.class);
        System.out.println("Error: " + response.error);
      }
    }
 </code>
 </pre>
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAccessTokenRequest.GoogleRefreshTokenGrant -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAuthorizationRequestUrl -->
  <class name="GoogleAuthorizationRequestUrl" extends="AuthorizationRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationRequestUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GoogleAuthorizationRequestUrl" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier
 @param redirectUri Absolute URI to which the authorization server will redirect the user-agent
        to when the end-user authorization step is completed
 @param scope scope of the access request expressed as a list of space-delimited strings. If the
        value contains multiple space-delimited strings, their order does not matter, and each
        string adds an additional access range to the requested scope.]]>
      </doc>
    </constructor>
    <field name="AUTHORIZATION_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Authorization server URL for end-user authorization.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Google extension to the OAuth 2.0 (draft 10) URL builder for an authorization web page to allow
 the end user to authorize the application to access their protected resources.
 <p>
 Use {@link AuthorizationResponse} to parse the redirect response after the end user grants/denies
 the request.
 </p>
 <p>
 Sample usage for a web application:

 <pre>
 <code>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    GoogleAuthorizationRequestUrl builder =
        new GoogleAuthorizationRequestUrl(CLIENT_ID, REDIRECT_URL, SCOPE);
    response.sendRedirect(builder.build());
    return;
  }
 </code>
 </pre>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.draft10.GoogleAuthorizationRequestUrl -->
</package>
<package name="com.google.api.client.googleapis.auth.storage">
  <!-- start class com.google.api.client.googleapis.auth.storage.GoogleStorageAuthentication -->
  <class name="GoogleStorageAuthentication" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleStorageAuthentication" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param accessKey 20 character access key that identifies the client accessing the stored data
 @param secret secret associated with the access key
 @since 1.4]]>
      </doc>
    </constructor>
    <method name="authorize"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.5) Use {@link GoogleStorageAuthentication} directly">
      <param name="transport" type="HttpTransport"/>
      <param name="accessKey" type="java.lang.String"/>
      <param name="secret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Authorization"} header for every executed HTTP request for the given HTTP
 transport.
 <p>
 Any existing HTTP request execute intercepter for Google Storage will be removed.

 @param transport HTTP transport
 @param accessKey 20 character access key that identifies the client accessing the stored data
 @param secret secret associated with the access key
 @deprecated (scheduled to be removed in 1.5) Use {@link GoogleStorageAuthentication} directly]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google Storage for Developers has a custom authentication method described in <a href=
 "https://code.google.com/apis/storage/docs/developer-guide.html#authentication"
 >Authentication</a> .

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new GoogleStorageAuthentication(...));
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.storage.GoogleStorageAuthentication -->
</package>
<package name="com.google.api.client.googleapis.extensions.android2.auth">
  <!-- start class com.google.api.client.googleapis.extensions.android2.auth.GoogleAccountManager -->
  <class name="GoogleAccountManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccountManager" type="AccountManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param manager account manager]]>
      </doc>
    </constructor>
    <constructor name="GoogleAccountManager" type="Context"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param context context from which to retrieve the account manager]]>
      </doc>
    </constructor>
    <method name="getAccounts" return="Account[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all Google accounts.

 @return array of Google accounts]]>
      </doc>
    </method>
    <method name="getAccountByName" return="Account"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accountName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the Google account of the given {@link Account#name}.

 @param accountName Google account name or {@code null} for {@code null} result
 @return Google account or {@code null} for none found or for {@code null} input]]>
      </doc>
    </method>
    <method name="invalidateAuthToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Invalidates the given Google auth token by removing it from the account manager's cache (if
 necessary) for example if the auth token has expired or otherwise become invalid.

 @param authToken auth token]]>
      </doc>
    </method>
    <field name="ACCOUNT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Google account type.]]>
      </doc>
    </field>
    <field name="manager" type="AccountManager"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Account manager.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Account manager wrapper for Google accounts.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android2.auth.GoogleAccountManager -->
</package>
<package name="com.google.api.client.googleapis.extensions.auth.helpers.oauth2.draft10">
  <!-- start class com.google.api.client.googleapis.extensions.auth.helpers.oauth2.draft10.GoogleOAuth2ThreeLeggedFlow -->
  <class name="GoogleOAuth2ThreeLeggedFlow" extends="OAuth2ThreeLeggedFlow"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleOAuth2ThreeLeggedFlow" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create the flow object with the information provided and generate the authorization url.

 @param userId Key that will be used to associate this flow object with an end user.
 @param clientId Used to identify the client server with the token server.
 @param clientSecret Secret shared between the client server and the token server.
 @param scope OAuth2 scope or space delimited list of scopes for which we require access.
 @param callbackUrl Where the authorization should redirect the user to complete the flow.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[This class performs the same function as {@link OAuth2ThreeLeggedFlow} but provides a convenience
 constructor that fills in the OAuth2 endpoints for talking to Google APIs.

 It is not safe to use one instance of this implementation from multiple threads.

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.auth.helpers.oauth2.draft10.GoogleOAuth2ThreeLeggedFlow -->
</package>
<package name="com.google.api.client.googleapis.json">
  <!-- start class com.google.api.client.googleapis.json.AbstractJsonFeedParser -->
  <class name="AbstractJsonFeedParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="parseFeed" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse the feed and return a new parsed instance of the feed class. This method can be skipped
 if all you want are the items.]]>
      </doc>
    </method>
    <method name="parseNextItem" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse the next item in the feed and return a new parsed instance of the item class. If there is
 no item to parse, it will return {@code null} and automatically close the parser (in which case
 there is no need to call {@link #close()}.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the underlying parser.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract base class for a Google JSON-C feed parser when the feed class is known in advance.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.AbstractJsonFeedParser -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument -->
  <class name="DiscoveryDocument" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be replaced in 1.5 with something based on Discovery v1)">
    <field name="apiDefinition" type="com.google.api.client.googleapis.json.DiscoveryDocument.APIDefinition"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Definition of all versions defined in this Google API.

 @since 1.1]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Manages a JSON-formatted document from the experimental Google Discovery API version 0.1.

 <p>
 Warning: this is based on an undocumented experimental Google API that may stop working or change
 in behavior at any time. Beware of this risk if running this in production code.
 </p>

 @since 1.0
 @author Yaniv Inbar
 @deprecated (scheduled to be replaced in 1.5 with something based on Discovery v1)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument.APIDefinition -->
  <class name="DiscoveryDocument.APIDefinition" extends="&lt;any&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscoveryDocument.APIDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Defines all versions of an API.

 @since 1.1]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument.APIDefinition -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceDefinition -->
  <class name="DiscoveryDocument.ServiceDefinition" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscoveryDocument.ServiceDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getResourceMethod" return="com.google.api.client.googleapis.json.DiscoveryDocument.ServiceMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="methodIdentifier" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@link ServiceMethod} definition for given method name. Method identifier is of
 format "resourceName.methodName".]]>
      </doc>
    </method>
    <field name="baseUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Base URL for service endpoint.

 @since 1.1]]>
      </doc>
    </field>
    <field name="resources" type="java.util.Map&lt;java.lang.String, com.google.api.client.googleapis.json.DiscoveryDocument.ServiceResource&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Map from the resource name to the resource definition.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Defines a specific version of an API.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceDefinition -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceMethod -->
  <class name="DiscoveryDocument.ServiceMethod" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscoveryDocument.ServiceMethod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="pathUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Path URL relative to base URL.

 @since 1.1]]>
      </doc>
    </field>
    <field name="httpMethod" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP method name.]]>
      </doc>
    </field>
    <field name="parameters" type="java.util.Map&lt;java.lang.String, com.google.api.client.googleapis.json.DiscoveryDocument.ServiceParameter&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Map from parameter name to parameter definition.]]>
      </doc>
    </field>
    <field name="methodType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Method type.

 @since 1.1]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Defines a method of a service resource.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceMethod -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceParameter -->
  <class name="DiscoveryDocument.ServiceParameter" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscoveryDocument.ServiceParameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="required" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether the parameter is required.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Defines a parameter to a service method.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceParameter -->
  <!-- start class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceResource -->
  <class name="DiscoveryDocument.ServiceResource" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscoveryDocument.ServiceResource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="methods" type="java.util.Map&lt;java.lang.String, com.google.api.client.googleapis.json.DiscoveryDocument.ServiceMethod&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Map from method name to method definition.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Defines a resource in a service definition.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.DiscoveryDocument.ServiceResource -->
  <!-- start class com.google.api.client.googleapis.json.GoogleApi -->
  <class name="GoogleApi" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be replaced in 1.5 with something based on Discovery v1)">
    <constructor name="GoogleApi"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="load"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Forces the discovery document to be loaded, even if the service definition has already been
 loaded.]]>
      </doc>
    </method>
    <method name="buildRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fullyQualifiedMethodName" type="java.lang.String"/>
      <param name="parameters" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates an HTTP request based on the given method name and parameters.
 <p>
 If the discovery document has not yet been loaded, it will call {@link #load()}.
 </p>

 @param fullyQualifiedMethodName name of method as defined in Discovery document of format
        "resourceName.methodName"
 @param parameters user defined key / value data mapping or {@code null} for none
 @return HTTP request
 @throws IOException I/O exception reading]]>
      </doc>
    </method>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(Required) Name of the Google API, for example <code>buzz</code>.]]>
      </doc>
    </field>
    <field name="version" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(Required) Version of the Google API, for example <code>v1</code>.]]>
      </doc>
    </field>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for building requests in {@link #buildRequest(String, Object)}.]]>
      </doc>
    </field>
    <field name="serviceDefinition" type="com.google.api.client.googleapis.json.DiscoveryDocument.ServiceDefinition"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Service definition, normally set by {@link #load()}.]]>
      </doc>
    </field>
    <field name="discoveryUrl" type="com.google.api.client.googleapis.GoogleUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL for the discovery endpoint.

 <p>
 URL must be compatible with behavior for Discovery version 0.1.
 </p>

 @since 1.3]]>
      </doc>
    </field>
    <field name="discoveryTransport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for loading the discovery document in {@link #load()}.

 @since 1.3]]>
      </doc>
    </field>
    <field name="jsonFactory" type="JsonFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[JSON factory to use.

 @since 1.3]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Manages HTTP requests for a version of a Google API service with a simple interface based on the
 new experimental Discovery API.

 @since 1.1
 @author Yaniv Inbar
 @deprecated (scheduled to be replaced in 1.5 with something based on Discovery v1)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleApi -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError -->
  <class name="GoogleJsonError" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given error HTTP response using the given JSON factory.

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of the Google JSON error information]]>
      </doc>
    </method>
    <field name="errors" type="java.util.List&lt;com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[List of detailed errors.]]>
      </doc>
    </field>
    <field name="code" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Error code.]]>
      </doc>
    </field>
    <field name="message" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Error message.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Data class representing the Google JSON error response content, as documented for example in <a
 href="http://code.google.com/apis/buzz/v1/using_rest.html#errors">Error Messages in Google
 Buzz</a>.

 <p>
 Parse the error response using {@link #parse(JsonFactory, HttpResponse)}. Sample usage:
 </p>

 <pre>
    try {
      request.execute();
    } catch (HttpResponseException e) {
        GoogleJsonError errorResponse = GoogleJsonError.parse(factory, e.response);
        System.err.println(errorResponse.code + " Error: " + errorResponse.message);
        for (ErrorInfo error : errorResponse.errors) {
          System.err.println(factory.toString(error));
        }
    } catch (IOException e) {
...
    }
 </pre>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <class name="GoogleJsonError.ErrorInfo" extends="GenericJson"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="domain" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies the error classification.]]>
      </doc>
    </field>
    <field name="reason" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies the error code.]]>
      </doc>
    </field>
    <field name="message" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A human readable explanation of the error.]]>
      </doc>
    </field>
    <field name="location" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies the location of the error or {@code null} for none.]]>
      </doc>
    </field>
    <field name="locationType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies the type of location of the error or {@code null} for none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Detailed error information.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport -->
  <class name="GoogleJsonRpcHttpTransport" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonRpcHttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildPostRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="JsonRpcRequest"/>
      <doc>
      <![CDATA[Builds a POST HTTP request for the JSON-RPC requests objects specified in the given JSON-RPC
 request object.
 <p>
 You may use
 {@link JsonHttpParser#parserForResponse(com.google.api.client.json.JsonFactory, HttpResponse)
 JsonHttpParser.parserForResponse}({@link #buildPostRequest(JsonRpcRequest) execute} (request))
 to get the {@link JsonParser}, and {@link JsonParser#parseAndClose(Class, CustomizeJsonParser)}
 .
 </p>

 @param request JSON-RPC request object
 @return HTTP request]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requests" type="java.util.List&lt;JsonRpcRequest&gt;"/>
      <doc>
      <![CDATA[Builds a POST HTTP request for the JSON-RPC requests objects specified in the given JSON-RPC
 request objects.
 <p>
 Note that the request will always use batching -- i.e. JSON array of requests -- even if there
 is only one request. You may use
 {@link JsonHttpParser#parserForResponse(com.google.api.client.json.JsonFactory, HttpResponse)
 JsonHttpParser.parserForResponse}({@link #buildPostRequest(List) execute} (requests)) to get
 the {@link JsonParser}, and
 {@link JsonParser#parseArrayAndClose(Collection, Class, CustomizeJsonParser)} .
 </p>

 @param requests JSON-RPC request objects
 @return HTTP request]]>
      </doc>
    </method>
    <field name="rpcServerUrl" type="GenericUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RPC server URL.]]>
      </doc>
    </field>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(REQUIRED) HTTP transport required for building requests.]]>
      </doc>
    </field>
    <field name="jsonFactory" type="JsonFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(REQUIRED) JSON factory to use for building requests.]]>
      </doc>
    </field>
    <field name="contentType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content type header to use for requests. By default this is {@code "application/json-rpc"}.]]>
      </doc>
    </field>
    <field name="accept" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Accept header to use for requests. By default this is {@code "application/json-rpc"}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[JSON-RPC 2.0 HTTP transport for RPC requests for Google API's, including both singleton and
 batched requests.

 <p>
 Warning: this is based on an undocumented experimental Google functionality that may stop working
 or change in behavior at any time. Beware of this risk if running this in production code.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonRpcHttpTransport -->
  <!-- start class com.google.api.client.googleapis.json.JsonCContent -->
  <class name="JsonCContent" extends="JsonHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonCContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Serializes JSON-C content based on the data key/value mapping object for an item, wrapped in a
 {@code "data"} envelope.
 <p>
 Sample usage:

 <pre>
 <code>
  static void setContent(HttpRequest request, Object data) {
    JsonCContent content = new JsonCContent();
    content.jsonFactory = new JacksonFactory();
    content.data = data;
    request.content = content;
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonCContent -->
  <!-- start class com.google.api.client.googleapis.json.JsonCParser -->
  <class name="JsonCParser" extends="JsonHttpParser"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonCParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parserForResponse" return="JsonParser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a JSON parser to use for parsing the given HTTP response, skipped over the {@code
 "data"} envelope.
 <p>
 The parser will be closed if any throwable is thrown. The current token will be the value of
 the {@code "data"} key.
 </p>

 @param response HTTP response
 @return JSON parser
 @throws IllegalArgumentException if content type is not {@link Json#CONTENT_TYPE} or if {@code
         "data"} key is not found
 @throws IOException I/O exception
 @since 1.3]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Parses HTTP JSON-C response content into an data class of key/value pairs, assuming the data is
 wrapped in a {@code "data"} envelope.
 <p>
 Sample usage:

 <pre>
 <code>
  static void setParser(HttpTransport transport) {
    JsonCParser parser = new JsonCParser();
    parser.jsonFactory = new JacksonFactory();
    transport.addParser(parser);
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonCParser -->
  <!-- start class com.google.api.client.googleapis.json.JsonFeedParser -->
  <class name="JsonFeedParser" extends="com.google.api.client.googleapis.json.AbstractJsonFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonFeedParser" type="JsonParser, java.lang.Class&lt;T&gt;, java.lang.Class&lt;I&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param parser JSON parser
 @param feedClass feed class
 @param itemClass item class]]>
      </doc>
    </constructor>
    <method name="parseNextItem" return="I"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="use" return="com.google.api.client.googleapis.json.JsonFeedParser&lt;T, I&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="itemClass" type="java.lang.Class&lt;I&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and item class.

 @param jsonFactory JSON factory
 @param response HTTP response
 @param feedClass feed class
 @param itemClass item class
 @since 1.3]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google JSON-C feed parser when the item class is known in advance.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonFeedParser -->
  <!-- start class com.google.api.client.googleapis.json.JsonMultiKindFeedParser -->
  <class name="JsonMultiKindFeedParser" extends="com.google.api.client.googleapis.json.AbstractJsonFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonMultiKindFeedParser" type="JsonParser, java.lang.Class&lt;T&gt;, java.lang.Class[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param parser JSON parser
 @param feedClass feed class
 @param itemClasses item classes]]>
      </doc>
    </constructor>
    <method name="use" return="com.google.api.client.googleapis.json.JsonMultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="itemClasses" type="java.lang.Class[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and item classes.

 @param jsonFactory JSON factory
 @param response HTTP response
 @param feedClass feed class
 @param itemClasses item classes
 @since 1.3]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google JSON-C feed parser when the item class can be computed from the kind.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.JsonMultiKindFeedParser -->
</package>
<package name="com.google.api.client.googleapis.xml.atom">
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <class name="AtomPatchContent" extends="AtomContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Serializes Atom XML PATCH HTTP content based on the data key/value mapping object for an Atom
 entry.
 <p>
 Default value for {@link #contentType} is {@link XmlHttpParser#CONTENT_TYPE}.
 <p>
 Sample usage:

 <pre>
 <code>
  static void setContent(
      HttpRequest request, XmlNamespaceDictionary namespaceDictionary, Object entry) {
    AtomPatchContent content = new AtomPatchContent();
    content.namespaceDictionary = namespaceDictionary;
    content.entry = entry;
    request.content = content;
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <class name="AtomPatchRelativeToOriginalContent" extends="AbstractXmlHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchRelativeToOriginalContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="patchedEntry" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Key/value pair data for the updated/patched Atom entry.]]>
      </doc>
    </field>
    <field name="originalEntry" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Key/value pair data for the original unmodified Atom entry.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Serializes an optimal Atom XML PATCH HTTP content based on the data key/value mapping object for
 an Atom entry, by comparing the original value to the patched value.
 <p>
 Sample usage:

 <pre>
 <code>
  static void setContent(HttpRequest request, XmlNamespaceDictionary namespaceDictionary,
      Object originalEntry, Object patchedEntry) {
    AtomPatchRelativeToOriginalContent content = new AtomPatchRelativeToOriginalContent();
    content.namespaceDictionary = namespaceDictionary;
    content.originalEntry = originalEntry;
    content.patchedEntry = patchedEntry;
    request.content = content;
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <class name="GoogleAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFieldsFor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs. It cannot be a
 {@link Map}, {@link GenericData} or a {@link Collection}.

 @param dataClass data class of key/value pairs]]>
      </doc>
    </method>
    <method name="getFeedFields" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="feedClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs for the feed class
 and for the entry class. This should only be used if the feed class does not contain the entry
 class as a field. The data classes cannot be a {@link Map}, {@link GenericData} or a
 {@link Collection}.

 @param feedClass feed data class
 @param entryClass entry data class]]>
      </doc>
    </method>
    <method name="computePatch" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="patched" type="java.lang.Object"/>
      <param name="original" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compute the patch object of key/value pairs from the given original and patched objects, adding
 a {@code @gd:fields} key for the fields mask.

 @param patched patched object
 @param original original object
 @return patch object of key/value pairs]]>
      </doc>
    </method>
    <field name="GD_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[GData namespace.

 @since 1.0]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for working with the Atom XML of Google Data API's.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <!-- start class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
  <class name="MultiKindFeedParser" extends="&lt;any&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiKindFeedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setEntryClasses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entryClasses" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Sets the entry classes to use when parsing.]]>
      </doc>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="create" return="com.google.api.client.googleapis.xml.atom.MultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <param name="namespaceDictionary" type="XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClasses" type="java.lang.Class[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and entry classes.

 @param <T> feed type
 @param <E> entry type
 @param response HTTP response
 @param namespaceDictionary XML namespace dictionary
 @param feedClass feed class
 @param entryClasses entry class
 @return Atom multi-kind feed pull parser
 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[GData Atom feed pull parser when the entry class can be computed from the kind.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
</package>

</api>
