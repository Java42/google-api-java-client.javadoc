<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Fri Mar 21 18:10:54 PDT 2014 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Google API Client Library for Java 1.18.0-rc"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /usr/local/jdiff-1.1.1/jdiff.jar:/usr/local/jdiff-1.1.1/xerces.jar -d /tmp/release-java-1.18.0-rc-projects-aqWK6X/javadoc/google-api-java-client/1.18.0-rc/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant-junit4.jar:/usr/share/ant/lib/junit.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-apache-xalan2.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-junit.jar:/usr/local/buildtools/java/jdk7-google-v5-64/lib/tools.jar -sourcepath /tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-servlet/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-gson/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-android/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-xml/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-appengine/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-protobuf/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-java6/src/main/java:/tmp/release-java-1.18.0-rc-projects-aqWK6X/google-api-java-client/google-api-client-jackson2/src/main/java -apiname Google API Client Library for Java 1.18.0-rc -baseURI http://www.w3.org -apidir /tmp/release-java-1.18.0-rc-projects-aqWK6X/javadoc/google-api-java-client/1.18.0-rc/jdiff -source 1.5 -->
<package name="com.google.api.client.googleapis">
  <!-- start class com.google.api.client.googleapis.GoogleUtils -->
  <class name="GoogleUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getCertificateTrustStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns the key store for trusted root certificates to use for Google APIs.

 <p>
 Value is cached, so subsequent access is fast.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <field name="MAJOR_VERSION" type="java.lang.Integer"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Major part of the current release version.

 @since 1.14]]>
      </doc>
    </field>
    <field name="MINOR_VERSION" type="java.lang.Integer"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minor part of the current release version.

 @since 1.14]]>
      </doc>
    </field>
    <field name="BUGFIX_VERSION" type="java.lang.Integer"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Bug fix part of the current release version.

 @since 1.14]]>
      </doc>
    </field>
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current release version.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utility class for the Google API Client Library.

 @since 1.12
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.GoogleUtils -->
  <!-- start class com.google.api.client.googleapis.MethodOverride -->
  <class name="MethodOverride" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MethodOverride"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Only overrides HTTP methods that the HTTP transport does not support.]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the method override header.

 @since 1.13]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Thread-safe HTTP request execute interceptor for Google API's that wraps HTTP requests inside of
 a POST request and uses {@link #HEADER} header to specify the actual HTTP method.

 <p>
 Use this for example for an HTTP transport that doesn't support PATCH like
 {@code NetHttpTransport} or {@code UrlFetchTransport}. By default, only the methods not supported
 by the transport will be overridden. When running behind a firewall that does not support certain
 verbs like PATCH, use the {@link MethodOverride.Builder#setOverrideAllMethods(boolean)}
 constructor instead to specify to override all methods. POST is never overridden.
 </p>

 <p>
 This class also allows GET requests with a long URL (> 2048 chars) to be instead sent using
 method override as a POST request.
 </p>

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new MethodOverride());
  }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverride -->
  <!-- start class com.google.api.client.googleapis.MethodOverride.Builder -->
  <class name="MethodOverride.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MethodOverride.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.MethodOverride"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds the {@link MethodOverride}.]]>
      </doc>
    </method>
    <method name="getOverrideAllMethods" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to allow all methods (except GET and POST) to be overridden regardless of
 whether the transport supports them.]]>
      </doc>
    </method>
    <method name="setOverrideAllMethods" return="com.google.api.client.googleapis.MethodOverride.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="overrideAllMethods" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to allow all methods (except GET and POST) to be overridden regardless of
 whether the transport supports them.

 <p>
 Default is {@code false}.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link MethodOverride}.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.MethodOverride.Builder -->
</package>
<package name="com.google.api.client.googleapis.apache">
  <!-- start class com.google.api.client.googleapis.apache.GoogleApacheHttpTransport -->
  <class name="GoogleApacheHttpTransport" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newTrustedTransport" return="ApacheHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of {@link ApacheHttpTransport} that uses
 {@link GoogleUtils#getCertificateTrustStore()} for the trusted certificates using
 {@link com.google.api.client.http.apache.ApacheHttpTransport.Builder#trustCertificates(KeyStore)}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for Google APIs based on {@link ApacheHttpTransport}.

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.apache.GoogleApacheHttpTransport -->
</package>
<package name="com.google.api.client.googleapis.auth.clientlogin">
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <class name="ClientLogin" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="authenticate" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Authenticates based on the provided field values.

 @throws ClientLoginResponseException if the authentication response has an error code, such as
         for a CAPTCHA challenge.]]>
      </doc>
    </method>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns Google Login {@code "Authorization"} header value based on the given authentication
 token.

 @since 1.13]]>
      </doc>
    </method>
    <field name="transport" type="HttpTransport"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP transport required for executing request in {@link #authenticate()}.

 @since 1.3]]>
      </doc>
    </field>
    <field name="serverUrl" type="GenericUrl"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL for the Client Login authorization server.

 <p>
 By default this is {@code "https://www.google.com"}, but it may be overridden for testing
 purposes.
 </p>

 @since 1.3]]>
      </doc>
    </field>
    <field name="applicationName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Short string identifying your application for logging purposes of the form:
 "companyName-applicationName-versionID".]]>
      </doc>
    </field>
    <field name="authTokenType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the Google service you're requesting authorization for, for example {@code "cl"} for
 Google Calendar.]]>
      </doc>
    </field>
    <field name="username" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's full email address.]]>
      </doc>
    </field>
    <field name="password" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User's password.]]>
      </doc>
    </field>
    <field name="accountType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Type of account to request authorization for. Possible values are:

 <ul>
 <li>GOOGLE (get authorization for a Google account only)</li>
 <li>HOSTED (get authorization for a hosted account only)</li>
 <li>HOSTED_OR_GOOGLE (get authorization first for a hosted account; if attempt fails, get
 authorization for a Google account)</li>
 </ul>

 Use HOSTED_OR_GOOGLE if you're not sure which type of account you want authorization for. If
 the user information matches both a hosted and a Google account, only the hosted account is
 authorized.

 @since 1.1]]>
      </doc>
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) Token representing the specific CAPTCHA challenge.]]>
      </doc>
    </field>
    <field name="captchaAnswer" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(optional) String entered by the user as an answer to a CAPTCHA challenge.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Client Login authentication method as described in <a
 href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html" >ClientLogin for
 Installed Applications</a>.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <class name="ClientLogin.ErrorInfo" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="error" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="url" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaToken" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="captchaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Key/value data to parse an error response.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <class name="ClientLogin.Response" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClientLogin.Response"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAuthorizationHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization header value to use based on the authentication token.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <field name="auth" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Authentication token.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Key/value data to parse a success response.

 <p>
 Sample usage, taking advantage that this class implements {@link HttpRequestInitializer}:
 </p>

 <pre>
    public static HttpRequestFactory createRequestFactory(
        HttpTransport transport, Response response) {
      return transport.createRequestFactory(response);
    }
 </pre>

 <p>
 If you have a custom request initializer, take a look at the sample usage for
 {@link HttpExecuteInterceptor}, which this class also implements.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLogin.Response -->
  <!-- start class com.google.api.client.googleapis.auth.clientlogin.ClientLoginResponseException -->
  <class name="ClientLoginResponseException" extends="HttpResponseException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDetails" return="com.google.api.client.googleapis.auth.clientlogin.ClientLogin.ErrorInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the error details or {@code null} for none.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Exception thrown when an error status code is detected in an HTTP response to a Google
 ClientLogin request in {@link ClientLogin} .

 <p>
 To get the structured details, use {@link #getDetails()}.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.clientlogin.ClientLoginResponseException -->
</package>
<package name="com.google.api.client.googleapis.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow -->
  <class name="GoogleAuthorizationCodeFlow" extends="AuthorizationCodeFlow"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeFlow" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientId client identifier
 @param clientSecret client secret
 @param scopes collection of scopes to be joined by a space separator

 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeFlow" type="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder Google authorization code flow builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="newTokenRequest" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationCode" type="java.lang.String"/>
    </method>
    <method name="newAuthorizationUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google OAuth 2.0 authorization code flow that manages and persists end-user
 credentials.

 <p>
 This is designed to simplify the flow in which an end-user authorizes the application to access
 their protected data, and then the application has access to their data based on an access token
 and a refresh token to refresh that access token when it expires.
 </p>

 <p>
 The first step is to call {@link #loadCredential(String)} based on the known user ID to check if
 the end-user's credentials are already known. If not, call {@link #newAuthorizationUrl()} and
 direct the end-user's browser to an authorization page. The web browser will then redirect to the
 redirect URL with a {@code "code"} query parameter which can then be used to request an access
 token using {@link #newTokenRequest(String)}. Finally, use
 {@link #createAndStoreCredential(TokenResponse, String)} to store and obtain a credential for
 accessing protected resources.
 </p>

 <p>
 The default for the {@code approval_prompt} and {@code access_type} parameters is {@code null}.
 For web applications that means {@code "approval_prompt=auto&access_type=online"} and for
 installed applications that means {@code "approval_prompt=force&access_type=offline"}. To
 override the default, you need to explicitly call {@link Builder#setApprovalPrompt(String)} and
 {@link Builder#setAccessType(String)}.
 </p>

 @author Yaniv Inbar
 @since 1.7]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder -->
  <class name="GoogleAuthorizationCodeFlow.Builder" extends="AuthorizationCodeFlow.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeFlow.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientId client identifier
 @param clientSecret client secret
 @param scopes collection of scopes to be joined by a space separator (or a single value
        containing multiple space-separated scopes)

 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeFlow.Builder" type="HttpTransport, JsonFactory, com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientSecrets Google client secrets
 @param scopes collection of scopes to be joined by a space separator

 @since 1.15]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDataStoreFactory" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStore" type="DataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setCredentialDataStore" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="typedDataStore" type="&lt;any&gt;"/>
    </method>
    <method name="setCredentialCreatedListener" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credentialCreatedListener" type="CredentialCreatedListener"/>
    </method>
    <method name="setCredentialStore" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="credentialStore" type="CredentialStore"/>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setMethod" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="AccessMethod"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setTransport" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setAuthorizationServerEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationServerEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[@since 1.11]]>
      </doc>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="CredentialRefreshListener"/>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.Collection&lt;CredentialRefreshListener&gt;"/>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior ({@code "auto"}
 for web applications and {@code "force"} for installed applications).

 <p>
 By default this has the value {@code null}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setAccessType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior ({@code "online"} for web
 applications and {@code "offline"} for installed applications).

 <p>
 By default this has the value {@code null}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google authorization code flow builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl -->
  <class name="GoogleAuthorizationCodeRequestUrl" extends="AuthorizationCodeRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Collection)})

 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="java.lang.String, java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param authorizationServerEncodedUrl authorization server encoded URL
 @param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Collection)})

 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeRequestUrl" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientSecrets OAuth 2.0 client secrets JSON model as specified in <a
        href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">
        client_secrets.json file format</a>
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Collection)})

 @since 1.15]]>
      </doc>
    </constructor>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior of {@code "auto"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAccessType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the access type ({@code "online"} to request online access or {@code "offline"} to
 request offline access) or {@code null} for the default behavior of {@code "online"}.]]>
      </doc>
    </method>
    <method name="setAccessType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access type ({@code "online"} to request online access or {@code "offline"} to request
 offline access) or {@code null} for the default behavior of {@code "online"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 URL builder for an authorization web page to
 allow the end user to authorize the application to access their protected resources and that
 returns an authorization code, as specified in <a
 href="https://developers.google.com/accounts/docs/OAuth2WebServer">Using OAuth 2.0 for Web Server
 Applications</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "code"}. Use
 {@link AuthorizationCodeResponseUrl} to parse the redirect response after the end user
 grants/denies the request. Using the authorization code in this response, use
 {@link GoogleAuthorizationCodeTokenRequest} to request the access token.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url =
        new GoogleAuthorizationCodeRequestUrl("812741506391.apps.googleusercontent.com",
            "https://oauth2-login-demo.appspot.com/code", Arrays.asList(
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/userinfo.profile")).setState("/profile").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest -->
  <class name="GoogleAuthorizationCodeTokenRequest" extends="AuthorizationCodeTokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAuthorizationCodeTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret
 @param code authorization code generated by the authorization server
 @param redirectUri redirect URL parameter matching the redirect URL parameter in the
        authorization request (see {@link #setRedirectUri(String)}]]>
      </doc>
    </constructor>
    <constructor name="GoogleAuthorizationCodeTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param tokenServerEncodedUrl token server encoded URL
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret
 @param code authorization code generated by the authorization server
 @param redirectUri redirect URL parameter matching the redirect URL parameter in the
        authorization request (see {@link #setRedirectUri(String)}

 @since 1.12]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="setCode" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="java.lang.String"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="execute" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 request for an access token based on an
 authorization code (as specified in <a
 href="http://code.google.com/apis/accounts/docs/OAuth2WebServer.html">Using OAuth 2.0 for Web
 Server Applications</a>).

 <p>
 Use {@link GoogleCredential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void requestAccessToken() throws IOException {
    try {
      GoogleTokenResponse response =
          new GoogleAuthorizationCodeTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              "812741506391.apps.googleusercontent.com", "{client_secret}",
              "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7", "https://oauth2-login-demo.appspot.com/code")
              .execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl -->
  <class name="GoogleBrowserClientRequestUrl" extends="BrowserClientRequestUrl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleBrowserClientRequestUrl" type="java.lang.String, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientId client identifier
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Collection)})

 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="GoogleBrowserClientRequestUrl" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, java.lang.String, java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clientSecrets OAuth 2.0 client secrets JSON model as specified in <a
        href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">
        client_secrets.json file format</a>
 @param redirectUri URI that the authorization server directs the resource owner's user-agent
        back to the client after a successful authorization grant
 @param scopes scopes (see {@link #setScopes(Collection)})

 @since 1.15]]>
      </doc>
    </constructor>
    <method name="getApprovalPrompt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the approval prompt behavior ({@code "auto"} to request auto-approval or
 {@code "force"} to force the approval UI to show) or {@code null} for the default behavior of
 {@code "auto"}.]]>
      </doc>
    </method>
    <method name="setApprovalPrompt" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="approvalPrompt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the approval prompt behavior ({@code "auto"} to request auto-approval or {@code "force"}
 to force the approval UI to show) or {@code null} for the default behavior of {@code "auto"}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setResponseTypes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseTypes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setRedirectUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUri" type="java.lang.String"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
    </method>
    <method name="setState" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 URL builder for an authorization web page to
 allow the end user to authorize the application to access their protected resources and that
 returns the access token to a browser client using a scripting language such as JavaScript, as
 specified in <a href="https://developers.google.com/accounts/docs/OAuth2UserAgent">Using OAuth
 2.0 for Client-side Applications</a>.

 <p>
 The default for {@link #getResponseTypes()} is {@code "token"}.
 </p>

 <p>
 Sample usage for a web application:
 </p>

 <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String url = new GoogleBrowserClientRequestUrl("812741506391.apps.googleusercontent.com",
        "https://oauth2-login-demo.appspot.com/oauthcallback", Arrays.asList(
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile")).setState("/profile").build();
    response.sendRedirect(url);
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleBrowserClientRequestUrl -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets -->
  <class name="GoogleClientSecrets" extends="GenericJson"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleClientSecrets"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getInstalled" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for installed applications.]]>
      </doc>
    </method>
    <method name="setInstalled" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="installed" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"/>
      <doc>
      <![CDATA[Sets the details for installed applications.]]>
      </doc>
    </method>
    <method name="getWeb" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for web applications.]]>
      </doc>
    </method>
    <method name="setWeb" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="web" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"/>
      <doc>
      <![CDATA[Sets the details for web applications.]]>
      </doc>
    </method>
    <method name="getDetails" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the details for either installed or web applications.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="load" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the {@code client_secrets.json} file from the given reader.

 @since 1.15]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 client secrets JSON model as specified in <a
 href="http://code.google.com/p/google-api-python-client/wiki/ClientSecrets">client_secrets.json
 file format</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  static GoogleClientSecrets loadClientSecretsResource(JsonFactory jsonFactory) throws IOException {
    return GoogleClientSecrets.load(
        jsonFactory, SampleClass.class.getResourceAsStream("/client_secrets.json"));
  }
 </pre>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details -->
  <class name="GoogleClientSecrets.Details" extends="GenericJson"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleClientSecrets.Details"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getClientId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client ID.]]>
      </doc>
    </method>
    <method name="setClientId" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client ID.]]>
      </doc>
    </method>
    <method name="getClientSecret" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the client secret.]]>
      </doc>
    </method>
    <method name="setClientSecret" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client secret.]]>
      </doc>
    </method>
    <method name="getRedirectUris" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the redirect URIs.]]>
      </doc>
    </method>
    <method name="setRedirectUris" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redirectUris" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the redirect URIs.]]>
      </doc>
    </method>
    <method name="getAuthUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authorization server URI.]]>
      </doc>
    </method>
    <method name="setAuthUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the authorization server URI.]]>
      </doc>
    </method>
    <method name="getTokenUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token server URI.]]>
      </doc>
    </method>
    <method name="setTokenUri" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the token server URI.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Client credential details.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.Details -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleCredential -->
  <class name="GoogleCredential" extends="Credential"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleCredential"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with the ability to access protected resources, but not refresh tokens.

 <p>
 To use with the ability to refresh tokens, use {@link Builder}.
 </p>]]>
      </doc>
    </constructor>
    <constructor name="GoogleCredential" type="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder Google credential builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="setAccessToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="setExpirationTimeMilliseconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeMilliseconds" type="java.lang.Long"/>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
    </method>
    <method name="setFromTokenResponse" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenResponse" type="TokenResponse"/>
    </method>
    <method name="executeRefreshToken" return="TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getServiceAccountId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the service account ID (typically an e-mail address) or {@code null} if not using the
 service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns a collection of OAuth scopes to use with the the service account flow or {@code null}
 if not using the service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountScopesAsString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the space-separated OAuth scopes to use with the the service account flow or
 {@code null} if not using the service account flow.

 @since 1.15]]>
      </doc>
    </method>
    <method name="getServiceAccountPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the private key to use with the the service account flow or {@code null} if not using
 the service account flow.]]>
      </doc>
    </method>
    <method name="getServiceAccountUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none or if not using the service account flow.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google-specific implementation of the OAuth 2.0 helper for accessing protected
 resources using an access token, as well as optionally refreshing the access token when it
 expires using a refresh token.

 <p>
 There are three modes supported: access token only, refresh token flow, and service account flow
 (with or without impersonating a user).
 </p>

 <p>
 If all you have is an access token, you simply pass the {@link TokenResponse} to the credential
 using {@link Builder#setFromTokenResponse(TokenResponse)}. Google credential uses
 {@link BearerToken#authorizationHeaderAccessMethod()} as the access method. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialWithAccessTokenOnly(TokenResponse tokenResponse) {
    return new GoogleCredential().setFromTokenResponse(tokenResponse);
  }
 </pre>

 <p>
 If you have a refresh token, it is similar to the case of access token only, but you additionally
 need to pass the credential the client secrets using
 {@link Builder#setClientSecrets(GoogleClientSecrets)} or
 {@link Builder#setClientSecrets(String, String)}. Google credential uses
 {@link GoogleOAuthConstants#TOKEN_SERVER_URL} as the token server URL, and
 {@link ClientParametersAuthentication} with the client ID and secret as the client
 authentication. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialWithRefreshToken(HttpTransport transport,
      JsonFactory jsonFactory, GoogleClientSecrets clientSecrets, TokenResponse tokenResponse) {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setClientSecrets(clientSecrets)
        .build()
        .setFromTokenResponse(tokenResponse);
  }
 </pre>

 <p>
 The <a href="https://developers.google.com/accounts/docs/OAuth2ServiceAccount">service account
 flow</a> is used when you want to access data owned by your client application. You download the
 private key in a {@code .p12} file from the Google APIs Console. Use
 {@link Builder#setServiceAccountId(String)},
 {@link Builder#setServiceAccountPrivateKeyFromP12File(File)}, and
 {@link Builder#setServiceAccountScopes(Collection)}. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialForServiceAccount(
      HttpTransport transport,
      JsonFactory jsonFactory,
      String serviceAccountId,
      Collection&lt;String&gt; serviceAccountScopes,
      File p12File) throws GeneralSecurityException, IOException {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setServiceAccountId(serviceAccountId)
        .setServiceAccountScopes(serviceAccountScopes)
        .setServiceAccountPrivateKeyFromP12File(p12File)
        .build();
  }
 </pre>

 <p>
 You can also use the service account flow to impersonate a user in a domain that you own. This is
 very similar to the service account flow above, but you additionally call
 {@link Builder#setServiceAccountUser(String)}. Sample usage:
 </p>

 <pre>
  public static GoogleCredential createCredentialForServiceAccountImpersonateUser(
      HttpTransport transport,
      JsonFactory jsonFactory,
      String serviceAccountId,
      Collection&lt;String&gt; serviceAccountScopes,
      File p12File,
      String serviceAccountUser) throws GeneralSecurityException, IOException {
    return new GoogleCredential.Builder().setTransport(transport)
        .setJsonFactory(jsonFactory)
        .setServiceAccountId(serviceAccountId)
        .setServiceAccountScopes(serviceAccountScopes)
        .setServiceAccountPrivateKeyFromP12File(p12File)
        .setServiceAccountUser(serviceAccountUser)
        .build();
  }
 </pre>

 <p>
 If you need to persist the access token in a data store, use {@link DataStoreFactory} and
 {@link Builder#addRefreshListener(CredentialRefreshListener)} with
 {@link DataStoreCredentialRefreshListener}.
 </p>

 <p>
 If you have a custom request initializer, request execute interceptor, or unsuccessful response
 handler, take a look at the sample usage for {@link HttpExecuteInterceptor} and
 {@link HttpUnsuccessfulResponseHandler}, which are interfaces that this class also implements.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleCredential -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder -->
  <class name="GoogleCredential.Builder" extends="Credential.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleCredential.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTransport" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[@since 1.9]]>
      </doc>
    </method>
    <method name="setClientSecrets" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientId" type="java.lang.String"/>
      <param name="clientSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client identifier and secret.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setClientSecrets" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientSecrets" type="com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets"/>
      <doc>
      <![CDATA[Sets the client secrets.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServiceAccountId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the service account ID (typically an e-mail address) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountId" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountId" type="java.lang.String"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the service account ID (typically an e-mail address) or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServiceAccountScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns a collection of OAuth scopes to use with the the service account flow or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountScopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the space-separated OAuth scopes to use with the the service account flow or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param serviceAccountScopes collection of scopes to be joined by a space separator (or a
        single value containing multiple space-separated scopes)
 @since 1.15]]>
      </doc>
    </method>
    <method name="getServiceAccountPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the private key to use with the the service account flow or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKey" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountPrivateKey" type="java.security.PrivateKey"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKeyFromP12File" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p12File" type="java.io.File"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param p12File input stream to the p12 file (closed at the end of this method in a finally
        block)]]>
      </doc>
    </method>
    <method name="setServiceAccountPrivateKeyFromPemFile" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pemFile" type="java.io.File"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the private key to use with the the service account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @param pemFile input stream to the PEM file (closed at the end of this method in a finally
        block)
 @since 1.13]]>
      </doc>
    </method>
    <method name="getServiceAccountUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setServiceAccountUser" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serviceAccountUser" type="java.lang.String"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the email address of the user the application is trying to impersonate in the service
 account flow or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="CredentialRefreshListener"/>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.Collection&lt;CredentialRefreshListener&gt;"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setTokenServerEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerEncodedUrl" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <doc>
    <![CDATA[Google credential builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken -->
  <class name="GoogleIdToken" extends="IdToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdToken" type="Header, com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload, byte[], byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param header header
 @param payload payload
 @param signatureBytes bytes of the signature
 @param signedContentBytes bytes of the signature content]]>
      </doc>
    </constructor>
    <method name="parse" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="idTokenString" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given ID token string and returns the parsed {@link GoogleIdToken}.

 @param jsonFactory JSON factory
 @param idTokenString ID token string
 @return parsed Google ID token]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verifier" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that this ID token is valid using {@link GoogleIdTokenVerifier#verify(GoogleIdToken)}.]]>
      </doc>
    </method>
    <method name="getPayload" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google ID tokens as specified in <a
 href="https://developers.google.com/accounts/docs/OAuth2Login">Using OAuth 2.0 for Login</a>.

 <p>
 Google ID tokens contain useful information about the authorized end user. Google ID tokens are
 signed and the signature must be verified using {@link #verify(GoogleIdTokenVerifier)}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload -->
  <class name="GoogleIdToken.Payload" extends="IdToken.Payload"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdToken.Payload"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUserId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getSubject()} instead.">
      <doc>
      <![CDATA[Returns the obfuscated Google user id or {@code null} for none.

 @deprecated (scheduled to be removed in 1.18) Use {@link #getSubject()} instead.]]>
      </doc>
    </method>
    <method name="setUserId" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #setSubject(String)} instead.">
      <param name="userId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the obfuscated Google user id or {@code null} for none.

 @deprecated (scheduled to be removed in 1.18) Use {@link #setSubject(String)} instead.]]>
      </doc>
    </method>
    <method name="getIssuee" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getAuthorizedParty()} instead.">
      <doc>
      <![CDATA[Returns the client ID of issuee or {@code null} for none.

 @deprecated (scheduled to be removed in 1.18) Use {@link #getAuthorizedParty()} instead.]]>
      </doc>
    </method>
    <method name="setIssuee" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #setAuthorizedParty(String)}
             instead.">
      <param name="issuee" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the client ID of issuee or {@code null} for none.

 @deprecated (scheduled to be removed in 1.18) Use {@link #setAuthorizedParty(String)}
             instead.]]>
      </doc>
    </method>
    <method name="getHostedDomain" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the hosted domain name if asserted user is a domain managed user or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setHostedDomain" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hostedDomain" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the hosted domain name if asserted user is a domain managed user or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="getEmail" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the e-mail address of the user or {@code null} if it was not requested.

 <p>
 Requires the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="setEmail" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="email" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the e-mail address of the user or {@code null} if it was not requested.

 <p>
 Used in conjunction with the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="getEmailVerified" return="java.lang.Boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} if the users e-mail address has been verified by Google.

 <p>
 Requires the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10

 <p>
 Upgrade warning: in prior version 1.16 this method accessed {@code "verified_email"}
 and returns a boolean, but starting with verison 1.17, it now accesses
 {@code "email_verified"} and returns a Boolean. Previously, if this value was not
 specified, this method would return {@code false}, but now it returns {@code null}.
 </p>]]>
      </doc>
    </method>
    <method name="setEmailVerified" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="emailVerified" type="java.lang.Boolean"/>
      <doc>
      <![CDATA[Sets whether the users e-mail address has been verified by Google or not.

 <p>
 Used in conjunction with the {@code "https://www.googleapis.com/auth/userinfo.email"} scope.
 </p>

 @since 1.10

 <p>
 Upgrade warning: in prior version 1.16 this method accessed {@code "verified_email"} and
 required a boolean parameter, but starting with verison 1.17, it now accesses
 {@code "email_verified"} and requires a Boolean parameter.
 </p>]]>
      </doc>
    </method>
    <method name="setAuthorizationTimeSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizationTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setAuthorizedParty" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorizedParty" type="java.lang.String"/>
    </method>
    <method name="setNonce" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nonce" type="java.lang.String"/>
    </method>
    <method name="setAccessTokenHash" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessTokenHash" type="java.lang.String"/>
    </method>
    <method name="setClassReference" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="classReference" type="java.lang.String"/>
    </method>
    <method name="setMethodsReferences" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="methodsReferences" type="java.util.List&lt;java.lang.String&gt;"/>
    </method>
    <method name="setExpirationTimeSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setNotBeforeTimeSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notBeforeTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setIssuedAtTimeSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuedAtTimeSeconds" type="java.lang.Long"/>
    </method>
    <method name="setIssuer" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuer" type="java.lang.String"/>
    </method>
    <method name="setAudience" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audience" type="java.lang.Object"/>
    </method>
    <method name="setJwtId" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jwtId" type="java.lang.String"/>
    </method>
    <method name="setType" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="setSubject" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="java.lang.String"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google ID token payload.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier -->
  <class name="GoogleIdTokenVerifier" extends="IdTokenVerifier"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdTokenVerifier" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdTokenVerifier" type="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param publicKeys Google public keys manager

 @since 1.17]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdTokenVerifier" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="getPublicKeysManager" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google public keys manager.

 @since 1.17]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getPublicCertsEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.">
      <doc>
      <![CDATA[Returns the public certificates encoded URL.

 @since 1.15
 @deprecated (scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.]]>
      </doc>
    </method>
    <method name="getPublicKeys" return="java.util.List&lt;java.security.PublicKey&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the public keys.

 <p>
 Upgrade warning: in prior version 1.16 it may return {@code null} and not throw any exceptions,
 but starting with version 1.17 it cannot return {@code null} and may throw
 {@link GeneralSecurityException} or {@link IOException}.
 </p>

 @deprecated (scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.]]>
      </doc>
    </method>
    <method name="getExpirationTimeMilliseconds" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getExpirationTimeMilliseconds()} instead.">
      <doc>
      <![CDATA[Returns the expiration time in milliseconds to be used with {@link Clock#currentTimeMillis()}
 or {@code 0} for none.

 @deprecated (scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#getExpirationTimeMilliseconds()} instead.]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleIdToken" type="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid using the cached public keys.

 It verifies:

 <ul>
 <li>The RS256 signature, which uses RSA and SHA-256 based on the public keys downloaded from
 the public certificate endpoint.</li>
 <li>The current time against the issued at and expiration time (allowing for a 5 minute clock
 skew).</li>
 <li>The issuer is {@code "accounts.google.com"}.</li>
 </ul>

 @param googleIdToken Google ID token
 @return {@code true} if verified successfully or {@code false} if failed]]>
      </doc>
    </method>
    <method name="verify" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idTokenString" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Verifies that the given ID token is valid using {@link #verify(GoogleIdToken)} and returns the
 ID token if succeeded.

 @param idTokenString Google ID token string
 @return Google ID token if verified successfully or {@code null} if failed
 @since 1.9]]>
      </doc>
    </method>
    <method name="loadPublicCerts" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#refresh()} instead.">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Downloads the public keys from the public certificates endpoint at
 {@link #getPublicCertsEncodedUrl}.

 <p>
 This method is automatically called if the public keys have not yet been initialized or if the
 expiration time is very close, so normally this doesn't need to be called. Only call this
 method explicitly to force the public keys to be updated.
 </p>

 @deprecated (scheduled to be removed in 1.18) Use {@link #getPublicKeysManager()} and
             {@link GooglePublicKeysManager#refresh()} instead.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Google ID token verifier.

 <p>
 Call {@link #verify(IdToken)} to verify a ID token. Use the constructor
 {@link #GoogleIdTokenVerifier(HttpTransport, JsonFactory)} for the typical simpler case if your
 application has only a single instance of {@link GoogleIdTokenVerifier}. Otherwise, ideally you
 should use {@link #GoogleIdTokenVerifier(GooglePublicKeysManager)} with a shared global instance
 of the {@link GooglePublicKeysManager} since that way the Google public keys are cached. Sample
 usage:
 </p>

 <pre>
    GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
        .setAudience(Arrays.asList("myClientId"))
        .build();
    ...
    if (!verifier.verify(googleIdToken)) {...}
 </pre>

 @since 1.7]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder -->
  <class name="GoogleIdTokenVerifier.Builder" extends="IdTokenVerifier.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleIdTokenVerifier.Builder" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="GoogleIdTokenVerifier.Builder" type="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param publicKeys Google public keys manager

 @since 1.17]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link GoogleIdTokenVerifier}.]]>
      </doc>
    </method>
    <method name="getPublicCerts" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google public keys manager.

 @since 1.17]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getPublicCertsEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use {@link #getPublicCerts()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.">
      <doc>
      <![CDATA[Returns the public certificates encoded URL.

 @since 1.15
 @deprecated (scheduled to be removed in 1.18) Use {@link #getPublicCerts()} and
             {@link GooglePublicKeysManager#getPublicCertsEncodedUrl()} instead.]]>
      </doc>
    </method>
    <method name="setPublicCertsEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.18) Use
             {@link GooglePublicKeysManager.Builder#setPublicCertsEncodedUrl(String)} instead.">
      <param name="publicKeysEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the public certificates encoded URL.

 <p>
 The default value is {@link GoogleOAuthConstants#DEFAULT_PUBLIC_CERTS_ENCODED_URL}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.15
 @deprecated (scheduled to be removed in 1.18) Use
             {@link GooglePublicKeysManager.Builder#setPublicCertsEncodedUrl(String)} instead.]]>
      </doc>
    </method>
    <method name="setIssuer" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuer" type="java.lang.String"/>
    </method>
    <method name="setAudience" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audience" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setAcceptableTimeSkewSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="acceptableTimeSkewSeconds" type="long"/>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link GoogleIdTokenVerifier}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants -->
  <class name="GoogleOAuthConstants" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="AUTHORIZATION_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Encoded URL of Google's end-user authorization server.]]>
      </doc>
    </field>
    <field name="TOKEN_SERVER_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Encoded URL of Google's token server.]]>
      </doc>
    </field>
    <field name="DEFAULT_PUBLIC_CERTS_ENCODED_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Encoded URL of Google's public certificates.

 @since 1.15]]>
      </doc>
    </field>
    <field name="OOB_REDIRECT_URI" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Redirect URI to use for an installed application as specified in <a
 href="http://code.google.com/apis/accounts/docs/OAuth2InstalledApp.html">Using OAuth 2.0 for
 Installed Applications</a>.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for Google's OAuth 2.0 implementation.

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager -->
  <class name="GooglePublicKeysManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GooglePublicKeysManager" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="GooglePublicKeysManager" type="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder]]>
      </doc>
    </constructor>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getPublicCertsEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the public certificates encoded URL.]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock.]]>
      </doc>
    </method>
    <method name="getPublicKeys" return="java.util.List&lt;java.security.PublicKey&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns an unmodifiable view of the public keys.

 <p>
 For efficiency, an in-memory cache of the public keys is used here. If this method is called
 for the first time, or the certificates have expired since last time it has been called (or are
 within 5 minutes of expiring), {@link #refresh()} will be called before returning the value.
 </p>]]>
      </doc>
    </method>
    <method name="getExpirationTimeMilliseconds" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expiration time in milliseconds to be used with {@link Clock#currentTimeMillis()}
 or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="refresh" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Forces a refresh of the public certificates downloaded from {@link #getPublicCertsEncodedUrl}.

 <p>
 This method is automatically called from {@link #getPublicKeys()} if the public keys have not
 yet been initialized or if the expiration time is very close, so normally this doesn't need to
 be called. Only call this method to explicitly force the public keys to be updated.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Google public keys manager.

 <p>
 The public keys are loaded from the public certificates endpoint at
 {@link #getPublicCertsEncodedUrl} and cached in this instance. Therefore, for maximum efficiency,
 applications should use a single globally-shared instance of the {@link GooglePublicKeysManager}.
 </p>

 @since 1.17]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager.Builder -->
  <class name="GooglePublicKeysManager.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GooglePublicKeysManager.Builder" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link GooglePublicKeysManager}.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getPublicCertsEncodedUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the public certificates encoded URL.]]>
      </doc>
    </method>
    <method name="setPublicCertsEncodedUrl" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="publicCertsEncodedUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the public certificates encoded URL.

 <p>
 The default value is {@link GoogleOAuthConstants#DEFAULT_PUBLIC_CERTS_ENCODED_URL}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getClock" return="Clock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clock.]]>
      </doc>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
      <doc>
      <![CDATA[Sets the clock.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link GooglePublicKeysManager}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.17]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GooglePublicKeysManager.Builder -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest -->
  <class name="GoogleRefreshTokenRequest" extends="RefreshTokenRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleRefreshTokenRequest" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param refreshToken refresh token issued to the client
 @param clientId client identifier issued to the client during the registration process
 @param clientSecret client secret]]>
      </doc>
    </constructor>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setScopes" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <method name="setGrantType" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grantType" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="execute" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Google-specific implementation of the OAuth 2.0 request to refresh an access token using a
 refresh token as specified in <a href="http://tools.ietf.org/html/rfc6749#section-6">Refreshing
 an Access Token</a>.

 <p>
 Use {@link GoogleCredential} to access protected resources from the resource server using the
 {@link TokenResponse} returned by {@link #execute()}. On error, it will instead throw
 {@link TokenResponseException}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void refreshAccessToken() throws IOException {
    try {
      TokenResponse response =
          new GoogleRefreshTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              "tGzv3JOkF0XG5Qx2TlKWIA", "s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw").execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (TokenResponseException e) {
      if (e.getDetails() != null) {
        System.err.println("Error: " + e.getDetails().getError());
        if (e.getDetails().getErrorDescription() != null) {
          System.err.println(e.getDetails().getErrorDescription());
        }
        if (e.getDetails().getErrorUri() != null) {
          System.err.println(e.getDetails().getErrorUri());
        }
      } else {
        System.err.println(e.getMessage());
      }
    }
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest -->
  <!-- start class com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse -->
  <class name="GoogleTokenResponse" extends="TokenResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleTokenResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setAccessToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="java.lang.String"/>
    </method>
    <method name="setTokenType" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="java.lang.String"/>
    </method>
    <method name="setExpiresInSeconds" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiresIn" type="java.lang.Long"/>
    </method>
    <method name="setRefreshToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshToken" type="java.lang.String"/>
    </method>
    <method name="setScope" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
    </method>
    <method name="getIdToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Beta} <br/>
 Returns the ID token.]]>
      </doc>
    </method>
    <method name="setIdToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idToken" type="java.lang.String"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Sets the ID token.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="parseIdToken" return="com.google.api.client.googleapis.auth.oauth2.GoogleIdToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@link Beta} <br/>
 Parses using {@link GoogleIdToken#parse(JsonFactory, String)} based on the {@link #getFactory()
 JSON factory} and {@link #getIdToken() ID token}.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Google OAuth 2.0 JSON model for a successful access token response as specified in <a
 href="http://tools.ietf.org/html/rfc6749#section-5.1">Successful Response</a>, including an ID
 token as specified in <a href="http://openid.net/specs/openid-connect-session-1_0.html">OpenID
 Connect Session Management 1.0</a>.

 <p>
 This response object is the result of {@link GoogleAuthorizationCodeTokenRequest#execute()} and
 {@link GoogleRefreshTokenRequest#execute()}. Use {@link #parseIdToken()} to parse the
 {@link GoogleIdToken} and then call {@link GoogleIdTokenVerifier#verify(GoogleIdToken)}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse -->
</package>
<package name="com.google.api.client.googleapis.batch">
  <!-- start interface com.google.api.client.googleapis.batch.BatchCallback -->
  <interface name="BatchCallback"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onSuccess"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="T"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is successful.

 @param t instance of the parsed data model class
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <method name="onFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="E"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is unsuccessful.

 @param e instance of data class representing the error response content
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Callback for an individual batch response.

 <p>
 Sample use:
 </p>

 <pre>
   batch.queue(volumesList.buildHttpRequest(), Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
 </pre>

 @param <T> Type of the data model class
 @param <E> Type of the error data model class
 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.batch.BatchCallback -->
  <!-- start class com.google.api.client.googleapis.batch.BatchRequest -->
  <class name="BatchRequest" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="BatchRequest" type="HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link BatchRequest}.

 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="setBatchUrl" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="batchUrl" type="GenericUrl"/>
      <doc>
      <![CDATA[Sets the URL that will be hit when {@link #execute()} is called. The default value is
 {@code https://www.googleapis.com/batch}.]]>
      </doc>
    </method>
    <method name="getBatchUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL that will be hit when {@link #execute()} is called.]]>
      </doc>
    </method>
    <method name="getSleeper" return="Sleeper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the sleeper.

 @since 1.15]]>
      </doc>
    </method>
    <method name="setSleeper" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sleeper" type="Sleeper"/>
      <doc>
      <![CDATA[Sets the sleeper. The default value is {@link Sleeper#DEFAULT}.

 @since 1.15]]>
      </doc>
    </method>
    <method name="queue" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequest" type="HttpRequest"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="errorClass" type="java.lang.Class&lt;E&gt;"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.BatchCallback&lt;T, E&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the specified {@link HttpRequest} for batched execution. Batched requests are executed
 when {@link #execute()} is called.

 @param <T> destination class type
 @param <E> error class type
 @param httpRequest HTTP Request
 @param dataClass Data class the response will be parsed into or {@code Void.class} to ignore
        the content
 @param errorClass Data class the unsuccessful response will be parsed into or
        {@code Void.class} to ignore the content
 @param callback Batch Callback
 @return this Batch request
 @throws IOException If building the HTTP Request fails]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of queued requests in this batch request.]]>
      </doc>
    </method>
    <method name="execute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes all queued HTTP requests in a single call, parses the responses and invokes callbacks.

 <p>
 Calling {@link #execute()} executes and clears the queued requests. This means that the
 {@link BatchRequest} object can be reused to {@link #queue} and {@link #execute()} requests
 again.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An instance of this class represents a single batch of requests.

 <p>
 Sample use:
 </p>

 <pre>
   BatchRequest batch = new BatchRequest(transport, httpRequestInitializer);
   batch.queue(volumesList, Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
   batch.queue(volumesList, Volumes.class, GoogleJsonErrorContainer.class,
       new BatchCallback&lt;Volumes, GoogleJsonErrorContainer&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonErrorContainer e, HttpHeaders responseHeaders) {
       log(e.getError().getMessage());
     }
   });
   batch.execute();
 </pre>

 <p>
 The content of each individual response is stored in memory. There is thus a potential of
 encountering an {@link OutOfMemoryError} for very large responses.
 </p>

 <p>
 Redirects are currently not followed in {@link BatchRequest}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 <p>
 Note: When setting an {@link HttpUnsuccessfulResponseHandler} by calling to
 {@link HttpRequest#setUnsuccessfulResponseHandler}, the handler is called for each unsuccessful
 part. As a result it's not recommended to use {@link HttpBackOffUnsuccessfulResponseHandler} on a
 batch request, since the back-off policy is invoked for each unsuccessful part.
 </p>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.batch.BatchRequest -->
</package>
<package name="com.google.api.client.googleapis.batch.json">
  <!-- start class com.google.api.client.googleapis.batch.json.JsonBatchCallback -->
  <class name="JsonBatchCallback" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.batch.BatchCallback&lt;T, com.google.api.client.googleapis.json.GoogleJsonErrorContainer&gt;"/>
    <constructor name="JsonBatchCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="onFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="com.google.api.client.googleapis.json.GoogleJsonErrorContainer"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="onFailure"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="com.google.api.client.googleapis.json.GoogleJsonError"/>
      <param name="responseHeaders" type="HttpHeaders"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called if the individual batch response is unsuccessful.

 @param e Google JSON error response content
 @param responseHeaders Headers of the batch response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Callback for an individual batch JSON response.

 <p>
 Sample use:
 </p>

 <pre>
   batch.queue(volumesList.buildHttpRequest(), Volumes.class, GoogleJsonErrorContainer.class,
       new JsonBatchCallback&lt;Volumes&gt;() {

     public void onSuccess(Volumes volumes, HttpHeaders responseHeaders) {
       log("Success");
       printVolumes(volumes.getItems());
     }

     public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {
       log(e.getMessage());
     }
   });
 </pre>

 @param <T> Type of the data model class
 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.batch.json.JsonBatchCallback -->
</package>
<package name="com.google.api.client.googleapis.compute">
  <!-- start class com.google.api.client.googleapis.compute.ComputeCredential -->
  <class name="ComputeCredential" extends="Credential"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ComputeCredential" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="ComputeCredential" type="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder]]>
      </doc>
    </constructor>
    <method name="executeRefreshToken" return="TokenResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="TOKEN_SERVER_ENCODED_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Metadata Service Account token server encoded URL.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google Compute Engine service accounts OAuth 2.0 credential based on <a
 href="https://developers.google.com/compute/docs/authentication">Authenticating from Google
 Compute Engine</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(
      HttpTransport transport, JsonFactory jsonFactory) {
    return transport.createRequestFactory(new GoogleComputeCredential(transport, jsonFactory));
  }
 </pre>

 <p>
 Implementation is immutable and thread-safe.
 </p>

 @since 1.15
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.compute.ComputeCredential -->
  <!-- start class com.google.api.client.googleapis.compute.ComputeCredential.Builder -->
  <class name="ComputeCredential.Builder" extends="Credential.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ComputeCredential.Builder" type="HttpTransport, JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.compute.ComputeCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTransport" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transport" type="HttpTransport"/>
    </method>
    <method name="setClock" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clock" type="Clock"/>
    </method>
    <method name="setJsonFactory" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
    </method>
    <method name="setTokenServerUrl" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerUrl" type="GenericUrl"/>
    </method>
    <method name="setTokenServerEncodedUrl" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenServerEncodedUrl" type="java.lang.String"/>
    </method>
    <method name="setClientAuthentication" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientAuthentication" type="HttpExecuteInterceptor"/>
    </method>
    <method name="setRequestInitializer" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="addRefreshListener" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListener" type="CredentialRefreshListener"/>
    </method>
    <method name="setRefreshListeners" return="com.google.api.client.googleapis.compute.ComputeCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refreshListeners" type="java.util.Collection&lt;CredentialRefreshListener&gt;"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google Compute Engine credential builder.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.compute.ComputeCredential.Builder -->
</package>
<package name="com.google.api.client.googleapis.extensions.android.accounts">
  <!-- start class com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager -->
  <class name="GoogleAccountManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccountManager" type="AccountManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param accountManager account manager]]>
      </doc>
    </constructor>
    <constructor name="GoogleAccountManager" type="Context"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param context context from which to retrieve the account manager]]>
      </doc>
    </constructor>
    <method name="getAccountManager" return="AccountManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the account manager.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getAccounts" return="Account[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all Google accounts.

 @return array of Google accounts]]>
      </doc>
    </method>
    <method name="getAccountByName" return="Account"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accountName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the Google account of the given {@link Account#name}.

 @param accountName Google account name or {@code null} for {@code null} result
 @return Google account or {@code null} for none found or for {@code null} input]]>
      </doc>
    </method>
    <method name="invalidateAuthToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Invalidates the given Google auth token by removing it from the account manager's cache (if
 necessary) for example if the auth token has expired or otherwise become invalid.

 @param authToken auth token]]>
      </doc>
    </method>
    <field name="ACCOUNT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Google account type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Account manager wrapper for Google accounts.

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager -->
</package>
<package name="com.google.api.client.googleapis.extensions.android.gms.auth">
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential -->
  <class name="GoogleAccountCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleAccountCredential" type="Context, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param context context
 @param scope scope to use on {@link GoogleAuthUtil#getToken}]]>
      </doc>
    </constructor>
    <method name="usingOAuth2" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="Context"/>
      <param name="scopes" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Constructs a new instance using OAuth 2.0 scopes.

 @param context context
 @param scopes non empty OAuth 2.0 scope list
 @return new instance

 @since 1.15]]>
      </doc>
    </method>
    <method name="usingAudience" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="Context"/>
      <param name="audience" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the audience scope to use with Google Cloud Endpoints.

 @param context context
 @param audience audience
 @return new instance]]>
      </doc>
    </method>
    <method name="setSelectedAccountName" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="accountName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the selected Google account name (e-mail address) -- for example
 {@code "johndoe@gmail.com"} -- or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
    </method>
    <method name="getContext" return="Context"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the context.]]>
      </doc>
    </method>
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scope to use on {@link GoogleAuthUtil#getToken}.]]>
      </doc>
    </method>
    <method name="getGoogleAccountManager" return="com.google.api.client.googleapis.extensions.android.accounts.GoogleAccountManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google account manager.]]>
      </doc>
    </method>
    <method name="getAllAccounts" return="Account[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all Google accounts or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getSelectedAccount" return="Account"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the selected Google account or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getBackOff" return="BackOff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the back-off policy which is used when an I/O exception is thrown inside
 {@link #getToken} or {@code null} for none.

 @since 1.15]]>
      </doc>
    </method>
    <method name="setBackOff" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="backOff" type="BackOff"/>
      <doc>
      <![CDATA[Sets the back-off policy which is used when an I/O exception is thrown inside {@link #getToken}
 or {@code null} for none.

 @since 1.15]]>
      </doc>
    </method>
    <method name="getSleeper" return="Sleeper"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the sleeper.

 @since 1.15]]>
      </doc>
    </method>
    <method name="setSleeper" return="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="sleeper" type="Sleeper"/>
      <doc>
      <![CDATA[Sets the sleeper. The default value is {@link Sleeper#DEFAULT}.

 @since 1.15]]>
      </doc>
    </method>
    <method name="getSelectedAccountName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the selected Google account name (e-mail address), for example
 {@code "johndoe@gmail.com"}, or {@code null} for none.]]>
      </doc>
    </method>
    <method name="newChooseAccountIntent" return="Intent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an intent to show the user to select a Google account, or create a new one if there are
 none on the device yet.

 <p>
 Must be run from the main UI thread.
 </p>]]>
      </doc>
    </method>
    <method name="getToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GoogleAuthException" type="GoogleAuthException"/>
      <doc>
      <![CDATA[Returns an OAuth 2.0 access token.

 <p>
 Must be run from a background thread, not the main UI thread.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Manages authorization and account selection for Google accounts.

 <p>
 When fetching a token, any thrown {@link GoogleAuthException} would be wrapped:
 <ul>
 <li>{@link GooglePlayServicesAvailabilityException} would be wrapped inside of
 {@link GooglePlayServicesAvailabilityIOException}</li>
 <li>{@link UserRecoverableAuthException} would be wrapped inside of
 {@link UserRecoverableAuthIOException}</li>
 <li>{@link GoogleAuthException} when be wrapped inside of {@link GoogleAuthIOException}</li>
 </ul>
 </p>

 <p>
 Upgrade warning: in prior version 1.14 exponential back-off was enabled by default when I/O
 exception was thrown inside {@link #getToken}, but starting with version 1.15 you need to call
 {@link #setBackOff} with {@link ExponentialBackOff} to enable it.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException -->
  <class name="GoogleAuthIOException" extends="java.io.IOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="GoogleAuthException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Wraps a {@link GoogleAuthException} into an {@link IOException} so it can be caught directly.

 <p>
 Use {@link #getCause()} to get the wrapped {@link GoogleAuthException}.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException -->
  <class name="GooglePlayServicesAvailabilityIOException" extends="com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="GooglePlayServicesAvailabilityException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConnectionStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error code to use with
 {@link GooglePlayServicesUtil#getErrorDialog(int, Activity, int)}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Wraps a {@link GooglePlayServicesAvailabilityException} into an {@link IOException} so it can be
 caught directly.

 <p>
 Use {@link #getConnectionStatusCode()} to display the error dialog. Alternatively, use
 {@link #getCause()} to get the wrapped {@link GooglePlayServicesAvailabilityException}. Example
 usage:
 </p>

 <pre>
    } catch (final GooglePlayServicesAvailabilityIOException availabilityException) {
      myActivity.runOnUiThread(new Runnable() {
        public void run() {
          Dialog dialog = GooglePlayServicesUtil.getErrorDialog(
              availabilityException.getConnectionStatusCode(),
              myActivity,
              MyActivity.REQUEST_GOOGLE_PLAY_SERVICES);
          dialog.show();
        }
      });
 </pre>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException -->
  <!-- start class com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException -->
  <class name="UserRecoverableAuthIOException" extends="com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAuthIOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCause" return="UserRecoverableAuthException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntent" return="Intent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Intent} that when supplied to
 {@link Activity#startActivityForResult(Intent, int)} will allow user intervention.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Wraps a {@link UserRecoverableAuthException} into an {@link IOException} so it can be caught
 directly.

 <p>
 Use {@link #getIntent()} to allow user interaction to recover. Alternatively, use
 {@link #getCause()} to get the wrapped {@link UserRecoverableAuthException}. Example usage:
 </p>

 <pre>
    } catch (UserRecoverableAuthIOException userRecoverableException) {
      myActivity.startActivityForResult(
          userRecoverableException.getIntent(), MyActivity.REQUEST_AUTHORIZATION);
    }
 </pre>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException -->
</package>
<package name="com.google.api.client.googleapis.extensions.appengine.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential -->
  <class name="AppIdentityCredential" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppIdentityCredential" type="java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param scopes OAuth scopes
 @since 1.15]]>
      </doc>
    </constructor>
    <constructor name="AppIdentityCredential" type="com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getAppIdentityService" return="AppIdentityService"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the App Identity Service that provides the access token.

 @since 1.12]]>
      </doc>
    </method>
    <method name="getScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the OAuth scopes (unmodifiable).

 @since 1.12]]>
      </doc>
    </method>
    <doc>
    <![CDATA[OAuth 2.0 credential in which a client Google App Engine application needs to access data that it
 owns, based on <a href="https://developers.google.com/appengine/docs/java/appidentity/
 #Java_Asserting_identity_to_Google_APIs">Asserting Identity to Google APIs</a>

 <p>
 Intercepts the request by using the access token obtained from
 {@link AppIdentityService#getAccessToken(Iterable)}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(
      HttpTransport transport, JsonFactory jsonFactory, TokenResponse tokenResponse) {
    return transport.createRequestFactory(
        new AppIdentityCredential("https://www.googleapis.com/auth/urlshortener"));
  }
 </pre>

 <p>
 Implementation is immutable and thread-safe.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential -->
  <!-- start class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder -->
  <class name="AppIdentityCredential.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppIdentityCredential.Builder" type="java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param scopes OAuth scopes
 @since 1.15]]>
      </doc>
    </constructor>
    <method name="getAppIdentityService" return="AppIdentityService"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the App Identity Service that provides the access token or {@code null} to use
 {@link AppIdentityServiceFactory#getAppIdentityService()}.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setAppIdentityService" return="com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appIdentityService" type="AppIdentityService"/>
      <doc>
      <![CDATA[Sets the App Identity Service that provides the access token or {@code null} to use
 {@link AppIdentityServiceFactory#getAppIdentityService()}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new {@link AppIdentityCredential}.]]>
      </doc>
    </method>
    <method name="getScopes" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the OAuth scopes (unmodifiable).

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link AppIdentityCredential}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.12]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.appengine.auth.oauth2.AppIdentityCredential.Builder -->
</package>
<package name="com.google.api.client.googleapis.extensions.appengine.notifications">
  <!-- start class com.google.api.client.googleapis.extensions.appengine.notifications.AppEngineNotificationServlet -->
  <class name="AppEngineNotificationServlet" extends="HttpServlet"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppEngineNotificationServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="doPost"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Webhook App Engine Servlet to receive notifications.

 <p>
 In order to use this servlet you need to register the servlet in your web.xml. You may optionally
 extend {@link AppEngineNotificationServlet} with custom behavior.
 </p>

 <p>
 It is a simple wrapper around {@link WebhookUtils#processWebhookNotification(HttpServletRequest,
 HttpServletResponse, DataStoreFactory)} that uses
 {@link AppEngineDataStoreFactory#getDefaultInstance()}, so you may alternatively call that method
 instead from your {@link HttpServlet#doPost} with no loss of functionality.
 </p>

 <b>Sample web.xml setup:</b>

 <pre>
  {@literal <}servlet{@literal >}
      {@literal <}servlet-name{@literal >}AppEngineNotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}servlet-class{@literal >}com.google.api.client.googleapis.extensions.appengine.notifications.AppEngineNotificationServlet{@literal <}/servlet-class{@literal >}
  {@literal <}/servlet{@literal >}
  {@literal <}servlet-mapping{@literal >}
      {@literal <}servlet-name{@literal >}AppEngineNotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}url-pattern{@literal >}/notifications{@literal <}/url-pattern{@literal >}
  {@literal <}/servlet-mapping{@literal >}
 </pre>

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.appengine.notifications.AppEngineNotificationServlet -->
</package>
<package name="com.google.api.client.googleapis.extensions.java6.auth.oauth2">
  <!-- start class com.google.api.client.googleapis.extensions.java6.auth.oauth2.GooglePromptReceiver -->
  <class name="GooglePromptReceiver" extends="AbstractPromptReceiver"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GooglePromptReceiver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRedirectUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Google OAuth 2.0 abstract verification code receiver that prompts user to paste the code copied
 from the browser.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.java6.auth.oauth2.GooglePromptReceiver -->
</package>
<package name="com.google.api.client.googleapis.extensions.servlet.notifications">
  <!-- start class com.google.api.client.googleapis.extensions.servlet.notifications.NotificationServlet -->
  <class name="NotificationServlet" extends="HttpServlet"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NotificationServlet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Constructor to be used for testing and demo purposes that uses
 {@link MemoryDataStoreFactory#getDefaultInstance()} which means it will NOT persist the
 notification channels when the servlet process dies, so it is a bad choice for a production
 application.]]>
      </doc>
    </constructor>
    <constructor name="NotificationServlet" type="DataStoreFactory"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Constructor which uses {@link StoredChannel#getDefaultDataStore(DataStoreFactory)} on the given
 data store factory, which is the normal use case.

 @param dataStoreFactory data store factory]]>
      </doc>
    </constructor>
    <constructor name="NotificationServlet" type="&lt;any&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor that allows a specific notification data store to be specified.

 @param channelDataStore notification channel data store]]>
      </doc>
    </constructor>
    <method name="doPost"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Webhook Servlet to receive notifications.

 <p>
 In order to use this servlet you should create a class inheriting from
 {@link NotificationServlet} and register the servlet in your web.xml.
 </p>

 <p>
 It is a simple wrapper around {@link WebhookUtils#processWebhookNotification}, so if you you may
 alternatively call that method instead from your {@link HttpServlet#doPost} with no loss of
 functionality.
 </p>

 <b>Example usage:</b>

 <pre>
  public class MyNotificationServlet extends NotificationServlet {

    private static final long serialVersionUID = 1L;

    public MyNotificationServlet() throws IOException {
      super(new SomeDataStoreFactory());
    }
  }
 </pre>

 <b>Sample web.xml setup:</b>

 <pre>
  {@literal <}servlet{@literal >}
      {@literal <}servlet-name{@literal >}MyNotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}servlet-class{@literal >}com.mypackage.MyNotificationServlet{@literal <}/servlet-class{@literal >}
  {@literal <}/servlet{@literal >}
  {@literal <}servlet-mapping{@literal >}
      {@literal <}servlet-name{@literal >}MyNotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}url-pattern{@literal >}/notifications{@literal <}/url-pattern{@literal >}
  {@literal <}/servlet-mapping{@literal >}
 </pre>

 <p>
 WARNING: by default it uses {@link MemoryDataStoreFactory#getDefaultInstance()} which means it
 will NOT persist the notification channels when the servlet process dies, so it is a BAD CHOICE
 for a production application. But it is a convenient choice when testing locally, in which case
 you don't need to override it, and can simply reference it directly in your web.xml file. For
 example:
 </p>

 <pre>
  {@literal <}servlet{@literal >}
      {@literal <}servlet-name{@literal >}NotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}servlet-class{@literal >}com.google.api.client.googleapis.extensions.servlet.notificationsNotificationServlet{@literal <}/servlet-class{@literal >}
  {@literal <}/servlet{@literal >}
  {@literal <}servlet-mapping{@literal >}
      {@literal <}servlet-name{@literal >}NotificationServlet{@literal <}/servlet-name{@literal >}
      {@literal <}url-pattern{@literal >}/notifications{@literal <}/url-pattern{@literal >}
  {@literal <}/servlet-mapping{@literal >}
 </pre>

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.servlet.notifications.NotificationServlet -->
  <!-- start class com.google.api.client.googleapis.extensions.servlet.notifications.WebhookHeaders -->
  <class name="WebhookHeaders" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="MESSAGE_NUMBER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the message number (a monotonically increasing value starting with 1).]]>
      </doc>
    </field>
    <field name="RESOURCE_STATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the {@link ResourceStates resource state}.]]>
      </doc>
    </field>
    <field name="RESOURCE_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the opaque ID for the watched resource that is stable across API versions.]]>
      </doc>
    </field>
    <field name="RESOURCE_URI" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the opaque ID (in the form of a canonicalized URI) for the watched resource
 that is sensitive to the API version.]]>
      </doc>
    </field>
    <field name="CHANNEL_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the notification channel UUID provided by the client in the watch request.]]>
      </doc>
    </field>
    <field name="CHANNEL_EXPIRATION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the notification channel expiration time.]]>
      </doc>
    </field>
    <field name="CHANNEL_TOKEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the notification channel token (an opaque string) provided by the client in
 the watch request.]]>
      </doc>
    </field>
    <field name="CHANGED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of header for the type of change performed on the resource.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Headers for Webhook notifications.

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.servlet.notifications.WebhookHeaders -->
  <!-- start class com.google.api.client.googleapis.extensions.servlet.notifications.WebhookUtils -->
  <class name="WebhookUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="processWebhookNotification"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <param name="dataStoreFactory" type="DataStoreFactory"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Utility method to process the webhook notification from {@link HttpServlet#doPost} by finding
 the notification channel in the given data store factory.

 <p>
 It is a wrapper around
 {@link #processWebhookNotification(HttpServletRequest, HttpServletResponse, DataStore)} that
 uses the data store from {@link StoredChannel#getDefaultDataStore(DataStoreFactory)}.
 </p>

 @param req an {@link HttpServletRequest} object that contains the request the client has made
        of the servlet
 @param resp an {@link HttpServletResponse} object that contains the response the servlet sends
        to the client
 @param dataStoreFactory data store factory
 @exception IOException if an input or output error is detected when the servlet handles the
            request
 @exception ServletException if the request for the POST could not be handled]]>
      </doc>
    </method>
    <method name="processWebhookNotification"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="req" type="HttpServletRequest"/>
      <param name="resp" type="HttpServletResponse"/>
      <param name="channelDataStore" type="&lt;any&gt;"/>
      <exception name="ServletException" type="ServletException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Utility method to process the webhook notification from {@link HttpServlet#doPost}.

 <p>
 The {@link HttpServletRequest#getInputStream()} is closed in a finally block inside this
 method. If it is not detected to be a webhook notification, an
 {@link HttpServletResponse#SC_BAD_REQUEST} error will be displayed. If the notification channel
 is found in the given notification channel data store, it will call
 {@link UnparsedNotificationCallback#onNotification} for the registered notification callback
 method.
 </p>

 @param req an {@link HttpServletRequest} object that contains the request the client has made
        of the servlet
 @param resp an {@link HttpServletResponse} object that contains the response the servlet sends
        to the client
 @param channelDataStore notification channel data store
 @exception IOException if an input or output error is detected when the servlet handles the
            request
 @exception ServletException if the request for the POST could not be handled]]>
      </doc>
    </method>
    <field name="TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Webhook notification channel type to use in the watch request.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Utilities for Webhook notifications.

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.extensions.servlet.notifications.WebhookUtils -->
</package>
<package name="com.google.api.client.googleapis.javanet">
  <!-- start class com.google.api.client.googleapis.javanet.GoogleNetHttpTransport -->
  <class name="GoogleNetHttpTransport" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newTrustedTransport" return="NetHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of {@link NetHttpTransport} that uses
 {@link GoogleUtils#getCertificateTrustStore()} for the trusted certificates using
 {@link com.google.api.client.http.javanet.NetHttpTransport.Builder#trustCertificates(KeyStore)}
 .

 <p>
 This helper method doesn't provide for customization of the {@link NetHttpTransport}, such as
 the ability to specify a proxy. To do use, use
 {@link com.google.api.client.http.javanet.NetHttpTransport.Builder}, for example:
 </p>

 <pre>
  static HttpTransport newProxyTransport() throws GeneralSecurityException, IOException {
    NetHttpTransport.Builder builder = new NetHttpTransport.Builder();
    builder.trustCertificates(GoogleUtils.getCertificateTrustStore());
    builder.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 3128)));
    return builder.build();
  }
 </pre>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for Google APIs based on {@link NetHttpTransport}.

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.javanet.GoogleNetHttpTransport -->
</package>
<package name="com.google.api.client.googleapis.json">
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError -->
  <class name="GoogleJsonError" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given error HTTP response using the given JSON factory.

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of the Google JSON error information
 @throws IllegalArgumentException if content type is not {@link Json#MEDIA_TYPE} or if expected
         {@code "data"} or {@code "error"} key is not found]]>
      </doc>
    </method>
    <method name="getErrors" return="java.util.List&lt;com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of detailed errors or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setErrors"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="errors" type="java.util.List&lt;com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo&gt;"/>
      <doc>
      <![CDATA[Sets the list of detailed errors or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status code of this response or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="int"/>
      <doc>
      <![CDATA[Sets the HTTP status code of this response or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human-readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human-readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Data class representing the Google JSON error response content, as documented for example in <a
 href="https://code.google.com/apis/urlshortener/v1/getting_started.html#errors">Error
 responses</a>.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <class name="GoogleJsonError.ErrorInfo" extends="GenericJson"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonError.ErrorInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDomain" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error classification or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setDomain"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="domain" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error classification or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getReason" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error reason or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setReason"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="reason" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the error reason or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the human readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the human readable explanation of the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the location in the request that caused the error or {@code null} for none or
 {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the location in the request that caused the error or {@code null} for none or
 {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="getLocationType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of location in the request that caused the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setLocationType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="locationType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type of location in the request that caused the error or {@code null} for none.

 @since 1.8]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Detailed error information.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonError.ErrorInfo -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonErrorContainer -->
  <class name="GoogleJsonErrorContainer" extends="GenericJson"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonErrorContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getError" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link GoogleJsonError}.]]>
      </doc>
    </method>
    <method name="setError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="com.google.api.client.googleapis.json.GoogleJsonError"/>
      <doc>
      <![CDATA[Sets the {@link GoogleJsonError}.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.json.GoogleJsonErrorContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.googleapis.json.GoogleJsonErrorContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Data class representing a container of {@link GoogleJsonError}.

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonErrorContainer -->
  <!-- start class com.google.api.client.googleapis.json.GoogleJsonResponseException -->
  <class name="GoogleJsonResponseException" extends="HttpResponseException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDetails" return="com.google.api.client.googleapis.json.GoogleJsonError"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google JSON error details or {@code null} for none (for example if response is not
 JSON).]]>
      </doc>
    </method>
    <method name="from" return="com.google.api.client.googleapis.json.GoogleJsonResponseException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="response" type="HttpResponse"/>
      <doc>
      <![CDATA[Returns a new instance of {@link GoogleJsonResponseException}.

 <p>
 If there is a JSON error response, it is parsed using {@link GoogleJsonError}, which can be
 inspected using {@link #getDetails()}. Otherwise, the full response content is read and
 included in the exception message.
 </p>

 @param jsonFactory JSON factory
 @param response HTTP response
 @return new instance of {@link GoogleJsonResponseException}]]>
      </doc>
    </method>
    <method name="execute" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="request" type="HttpRequest"/>
      <exception name="GoogleJsonResponseException" type="com.google.api.client.googleapis.json.GoogleJsonResponseException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes an HTTP request using {@link HttpRequest#execute()}, but throws a
 {@link GoogleJsonResponseException} on error instead of {@link HttpResponseException}.

 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = GoogleJsonResponseException.execute(jsonFactory, request);
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @param jsonFactory JSON factory
 @param request HTTP request
 @return HTTP response for an HTTP success code (or error code if
         {@link HttpRequest#getThrowExceptionOnExecuteError()})
 @throws GoogleJsonResponseException for an HTTP error code (only if not
         {@link HttpRequest#getThrowExceptionOnExecuteError()})
 @throws IOException some other kind of I/O exception
 @since 1.7]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Exception thrown when an error status code is detected in an HTTP response to a Google API that
 uses the JSON format, using the format specified in <a
 href="http://code.google.com/apis/urlshortener/v1/getting_started.html#errors">Error
 Responses</a>.

 <p>
 To execute a request, call {@link #execute(JsonFactory, HttpRequest)}. This will throw a
 {@link GoogleJsonResponseException} on an error response. To get the structured details, use
 {@link #getDetails()}.
 </p>

 <pre>
  static void executeShowingError(JsonFactory factory, HttpRequest request) throws IOException {
    try {
      GoogleJsonResponseException.execute(factory, request);
    } catch (GoogleJsonResponseException e) {
      System.err.println(e.getDetails());
    }
  }
 </pre>

 @since 1.6
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.json.GoogleJsonResponseException -->
</package>
<package name="com.google.api.client.googleapis.media">
  <!-- start class com.google.api.client.googleapis.media.MediaHttpDownloader -->
  <class name="MediaHttpDownloader" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MediaHttpDownloader" type="HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link MediaHttpDownloader}.

 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="download"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestUrl" type="GenericUrl"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media download or a resumable media download.

 <p>
 This method does not close the given output stream.
 </p>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpDownloader} must be
 instantiated before download called be called again.
 </p>

 @param requestUrl The request URL where the download requests will be sent
 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="download"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestUrl" type="GenericUrl"/>
      <param name="requestHeaders" type="HttpHeaders"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media download or a resumable media download.

 <p>
 This method does not close the given output stream.
 </p>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpDownloader} must be
 instantiated before download called be called again.
 </p>

 @param requestUrl request URL where the download requests will be sent
 @param requestHeaders request headers or {@code null} to ignore
 @param outputStream destination output stream
 @since 1.12]]>
      </doc>
    </method>
    <method name="setBytesDownloaded" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytesDownloaded" type="long"/>
      <doc>
      <![CDATA[Sets the total number of bytes that have been downloaded of the media resource.

 <p>
 If a download was aborted mid-way due to a connection failure then users can resume the
 download from the point where it left off.
 </p>

 <p>
 Use {@link #setContentRange} if you need to specify both the bytes downloaded and the last byte
 position.
 </p>

 @param bytesDownloaded The total number of bytes downloaded]]>
      </doc>
    </method>
    <method name="setContentRange" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="firstBytePos" type="long"/>
      <param name="lastBytePos" type="int"/>
      <doc>
      <![CDATA[Sets the content range of the next download request. Eg: bytes=firstBytePos-lastBytePos.

 <p>
 If a download was aborted mid-way due to a connection failure then users can resume the
 download from the point where it left off.
 </p>

 <p>
 Use {@link #setBytesDownloaded} if you only need to specify the first byte position.
 </p>

 @param firstBytePos The first byte position in the content range string
 @param lastBytePos The last byte position in the content range string.
 @since 1.13]]>
      </doc>
    </method>
    <method name="isDirectDownloadEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether direct media download is enabled or disabled. If value is set to {@code true}
 then a direct download will be done where the whole media content is downloaded in a single
 request. If value is set to {@code false} then the download uses the resumable media download
 protocol to download in data chunks. Defaults to {@code false}.]]>
      </doc>
    </method>
    <method name="setDirectDownloadEnabled" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="directDownloadEnabled" type="boolean"/>
      <doc>
      <![CDATA[Returns whether direct media download is enabled or disabled. If value is set to {@code true}
 then a direct download will be done where the whole media content is downloaded in a single
 request. If value is set to {@code false} then the download uses the resumable media download
 protocol to download in data chunks. Defaults to {@code false}.]]>
      </doc>
    </method>
    <method name="setProgressListener" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="progressListener" type="com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener"/>
      <doc>
      <![CDATA[Sets the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getProgressListener" return="com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the transport to use for requests.]]>
      </doc>
    </method>
    <method name="setChunkSize" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chunkSize" type="int"/>
      <doc>
      <![CDATA[Sets the maximum size of individual chunks that will get downloaded by single HTTP requests.
 The default value is {@link #MAXIMUM_CHUNK_SIZE}.

 <p>
 The maximum allowable value is {@link #MAXIMUM_CHUNK_SIZE}.
 </p>]]>
      </doc>
    </method>
    <method name="getChunkSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum size of individual chunks that will get downloaded by single HTTP requests.
 The default value is {@link #MAXIMUM_CHUNK_SIZE}.]]>
      </doc>
    </method>
    <method name="getNumBytesDownloaded" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the total number of bytes downloaded by this downloader.

 @return the number of bytes downloaded]]>
      </doc>
    </method>
    <method name="getLastBytePosition" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the last byte position of the media file we want to download or {@code -1} if there is no
 upper limit on the byte position.

 @return the last byte position
 @since 1.13]]>
      </doc>
    </method>
    <method name="getDownloadState" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current download state of the downloader.

 @return the download state]]>
      </doc>
    </method>
    <method name="getProgress" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the download progress denoting the percentage of bytes that have been downloaded,
 represented between 0.0 (0%) and 1.0 (100%).

 @return the download progress]]>
      </doc>
    </method>
    <field name="MAXIMUM_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default maximum number of bytes that will be downloaded from the server in any single HTTP
 request. Set to 32MB because that is the maximum App Engine request size.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Media HTTP Downloader, with support for both direct and resumable media downloads. Documentation
 is available <a
 href='http://code.google.com/p/google-api-java-client/wiki/MediaDownload'>here</a>.

 <p>
 Implementation is not thread-safe.
 </p>

 <p>
 Back-off is disabled by default. To enable it for an abnormal HTTP response and an I/O exception
 you should call {@link HttpRequest#setUnsuccessfulResponseHandler} with a new
 {@link HttpBackOffUnsuccessfulResponseHandler} instance and
 {@link HttpRequest#setIOExceptionHandler} with {@link HttpBackOffIOExceptionHandler}.
 </p>

 <p>
 Upgrade warning: in prior version 1.14 exponential back-off was enabled by default for an
 abnormal HTTP response. Starting with version 1.15 it's disabled by default.
 </p>

 @since 1.9

 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpDownloader -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState -->
  <class name="MediaHttpDownloader.DownloadState" extends="java.lang.Enum&lt;com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Download state associated with the Media HTTP downloader.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpDownloader.DownloadState -->
  <!-- start interface com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener -->
  <interface name="MediaHttpDownloaderProgressListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="progressChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="downloader" type="com.google.api.client.googleapis.media.MediaHttpDownloader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called to notify that progress has been changed.

 <p>
 This method is called multiple times depending on how many chunks are downloaded. Once the
 download completes it is called one final time.
 </p>

 <p>
 The download state can be queried by calling {@link MediaHttpDownloader#getDownloadState} and
 the progress by calling {@link MediaHttpDownloader#getProgress}.
 </p>

 @param downloader Media HTTP downloader]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for receiving progress notifications for downloads.

 <p>
 Sample usage:
 </p>

 <pre>
  public static class MyDownloadProgressListener implements MediaHttpDownloaderProgressListener {

    public void progressChanged(MediaHttpDownloader downloader) throws IOException {
      switch (downloader.getDownloadState()) {
        case MEDIA_IN_PROGRESS:
          System.out.println("Download in progress");
          System.out.println("Download percentage: " + downloader.getProgress());
          break;
        case MEDIA_COMPLETE:
          System.out.println("Download Completed!");
          break;
      }
    }
  }
 </pre>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.media.MediaHttpDownloaderProgressListener -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpUploader -->
  <class name="MediaHttpUploader" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MediaHttpUploader" type="AbstractInputStreamContent, HttpTransport, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct the {@link MediaHttpUploader}.

 <p>
 The input stream received by calling {@link AbstractInputStreamContent#getInputStream} is
 closed when the upload process is successfully completed. For resumable uploads, when the media
 content length is known, if the input stream has {@link InputStream#markSupported} as
 {@code false} then it is wrapped in an {@link BufferedInputStream} to support the
 {@link InputStream#mark} and {@link InputStream#reset} methods required for handling server
 errors. If the media content length is unknown then each chunk is stored temporarily in memory.
 This is required to determine when the last chunk is reached.
 </p>

 @param mediaContent The Input stream content of the media to be uploaded
 @param transport The transport to use for requests
 @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest} or
        {@code null} for none]]>
      </doc>
    </constructor>
    <method name="upload" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationRequestUrl" type="GenericUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes a direct media upload or resumable media upload conforming to the specifications
 listed <a href='http://code.google.com/apis/gdata/docs/resumable_upload.html'>here.</a>

 <p>
 This method is not reentrant. A new instance of {@link MediaHttpUploader} must be instantiated
 before upload called be called again.
 </p>

 <p>
 If an error is encountered during the request execution the caller is responsible for parsing
 the response correctly. For example for JSON errors:
 </p>

 <pre>
    if (!response.isSuccessStatusCode()) {
      throw GoogleJsonResponseException.from(jsonFactory, response);
    }
 </pre>

 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = batch.upload(initiationRequestUrl);
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @param initiationRequestUrl The request URL where the initiation request will be sent
 @return HTTP response]]>
      </doc>
    </method>
    <method name="getMetadata" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns HTTP content metadata for the media request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setMetadata" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadata" type="HttpContent"/>
      <doc>
      <![CDATA[Sets HTTP content metadata for the media request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getMediaContent" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content of the media to be uploaded.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the transport to use for requests.]]>
      </doc>
    </method>
    <method name="setDirectUploadEnabled" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="directUploadEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether direct media upload is enabled or disabled.

 <p>
 If value is set to {@code true} then a direct upload will be done where the whole media content
 is uploaded in a single request. If value is set to {@code false} then the upload uses the
 resumable media upload protocol to upload in data chunks.
 </p>

 <p>
 Direct upload is recommended if the content size falls below a certain minimum limit. This is
 because there's minimum block write size for some Google APIs, so if the resumable request
 fails in the space of that first block, the client will have to restart from the beginning
 anyway.
 </p>

 <p>
 Defaults to {@code false}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="isDirectUploadEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether direct media upload is enabled or disabled. If value is set to {@code true}
 then a direct upload will be done where the whole media content is uploaded in a single
 request. If value is set to {@code false} then the upload uses the resumable media upload
 protocol to upload in data chunks. Defaults to {@code false}.

 @since 1.9]]>
      </doc>
    </method>
    <method name="setProgressListener" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="progressListener" type="com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener"/>
      <doc>
      <![CDATA[Sets the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getProgressListener" return="com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the progress listener to send progress notifications to or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setChunkSize" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chunkSize" type="int"/>
      <doc>
      <![CDATA[Sets the maximum size of individual chunks that will get uploaded by single HTTP requests. The
 default value is {@link #DEFAULT_CHUNK_SIZE}.

 <p>
 The minimum allowable value is {@link #MINIMUM_CHUNK_SIZE} and the specified chunk size must be
 a multiple of {@link #MINIMUM_CHUNK_SIZE}.
 </p>]]>
      </doc>
    </method>
    <method name="getChunkSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum size of individual chunks that will get uploaded by single HTTP requests.
 The default value is {@link #DEFAULT_CHUNK_SIZE}.]]>
      </doc>
    </method>
    <method name="getDisableGZipContent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to disable GZip compression of HTTP content.

 @since 1.13]]>
      </doc>
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to disable GZip compression of HTTP content.

 <p>
 By default it is {@code false}.
 </p>

 <p>
 If {@link #setDisableGZipContent(boolean)} is set to false (the default value) then content is
 gzipped for direct media upload and resumable media uploads when content length is not known.
 Due to a current limitation, content is not gzipped for resumable media uploads when content
 length is known; this limitation will be removed in the future.
 </p>

 @since 1.13]]>
      </doc>
    </method>
    <method name="getSleeper" return="Sleeper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the sleeper.

 @since 1.15]]>
      </doc>
    </method>
    <method name="setSleeper" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sleeper" type="Sleeper"/>
      <doc>
      <![CDATA[Sets the sleeper. The default value is {@link Sleeper#DEFAULT}.

 @since 1.15]]>
      </doc>
    </method>
    <method name="getInitiationRequestMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP method used for the initiation request.

 <p>
 The default value is {@link HttpMethods#POST}.
 </p>

 @since 1.12]]>
      </doc>
    </method>
    <method name="setInitiationRequestMethod" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationRequestMethod" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP method used for the initiation request.

 <p>
 Can only be {@link HttpMethods#POST} (for media upload) or {@link HttpMethods#PUT} (for media
 update). The default value is {@link HttpMethods#POST}.
 </p>

 @since 1.12]]>
      </doc>
    </method>
    <method name="setInitiationHeaders" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initiationHeaders" type="HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP headers used for the initiation request.]]>
      </doc>
    </method>
    <method name="getInitiationHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers used for the initiation request.]]>
      </doc>
    </method>
    <method name="getNumBytesUploaded" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the total number of bytes the server received so far or {@code 0} for direct uploads when
 the content length is not known.

 @return the number of bytes the server received so far]]>
      </doc>
    </method>
    <method name="getUploadState" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current upload state of the uploader.

 @return the upload state]]>
      </doc>
    </method>
    <method name="getProgress" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Gets the upload progress denoting the percentage of bytes that have been uploaded, represented
 between 0.0 (0%) and 1.0 (100%).

 <p>
 Do not use if the specified {@link AbstractInputStreamContent} has no content length specified.
 Instead, consider using {@link #getNumBytesUploaded} to denote progress.
 </p>

 @throws IllegalArgumentException if the specified {@link AbstractInputStreamContent} has no
         content length
 @return the upload progress]]>
      </doc>
    </method>
    <field name="CONTENT_LENGTH_HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Upload content type header.

 @since 1.13]]>
      </doc>
    </field>
    <field name="CONTENT_TYPE_HEADER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Upload content length header.

 @since 1.13]]>
      </doc>
    </field>
    <field name="MINIMUM_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum number of bytes that can be uploaded to the server (set to 256KB).]]>
      </doc>
    </field>
    <field name="DEFAULT_CHUNK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default maximum number of bytes that will be uploaded to the server in any single HTTP request
 (set to 10 MB).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Media HTTP Uploader, with support for both direct and resumable media uploads. Documentation is
 available <a href='http://code.google.com/p/google-api-java-client/wiki/MediaUpload'>here</a>.

 <p>
 For resumable uploads, when the media content length is known, if the provided
 {@link InputStream} has {@link InputStream#markSupported} as {@code false} then it is wrapped in
 an {@link BufferedInputStream} to support the {@link InputStream#mark} and
 {@link InputStream#reset} methods required for handling server errors. If the media content
 length is unknown then each chunk is stored temporarily in memory. This is required to determine
 when the last chunk is reached.
 </p>

 <p>
 See {@link #setDisableGZipContent(boolean)} for information on when content is gzipped and how to
 control that behavior.
 </p>

 <p>
 Back-off is disabled by default. To enable it for an abnormal HTTP response and an I/O exception
 you should call {@link HttpRequest#setUnsuccessfulResponseHandler} with a new
 {@link HttpBackOffUnsuccessfulResponseHandler} instance and
 {@link HttpRequest#setIOExceptionHandler} with {@link HttpBackOffIOExceptionHandler}.
 </p>

 <p>
 Upgrade warning: in prior version 1.14 exponential back-off was enabled by default for an
 abnormal HTTP response and there was a regular retry (without back-off) when I/O exception was
 thrown. Starting with version 1.15 back-off is disabled and there is no retry on I/O exception by
 default.
 </p>

 <p>
 Upgrade warning: in prior version 1.16 {@link #serverErrorCallback} was public but starting with
 version 1.17 it has been removed from the public API, and changed to be package private.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.9

 @author rmistry@google.com (Ravi Mistry)
 @author peleyal@google.com (Eyal Peled)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpUploader -->
  <!-- start class com.google.api.client.googleapis.media.MediaHttpUploader.UploadState -->
  <class name="MediaHttpUploader.UploadState" extends="java.lang.Enum&lt;com.google.api.client.googleapis.media.MediaHttpUploader.UploadState&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.googleapis.media.MediaHttpUploader.UploadState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Upload state associated with the Media HTTP uploader.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.media.MediaHttpUploader.UploadState -->
  <!-- start interface com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener -->
  <interface name="MediaHttpUploaderProgressListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="progressChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uploader" type="com.google.api.client.googleapis.media.MediaHttpUploader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called to notify that progress has been changed.

 <p>
 This method is called once before and after the initiation request. For media uploads it is
 called multiple times depending on how many chunks are uploaded. Once the upload completes it
 is called one final time.
 </p>

 <p>
 The upload state can be queried by calling {@link MediaHttpUploader#getUploadState} and the
 progress by calling {@link MediaHttpUploader#getProgress}.
 </p>

 @param uploader Media HTTP uploader]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for receiving progress notifications for uploads.

 <p>
 Sample usage (if media content length is provided, else consider using
 {@link MediaHttpUploader#getNumBytesUploaded} instead of {@link MediaHttpUploader#getProgress}:
 </p>

 <pre>
  public static class MyUploadProgressListener implements MediaHttpUploaderProgressListener {

    public void progressChanged(MediaHttpUploader uploader) throws IOException {
      switch (uploader.getUploadState()) {
        case INITIATION_STARTED:
          System.out.println("Initiation Started");
          break;
        case INITIATION_COMPLETE:
          System.out.println("Initiation Completed");
          break;
        case MEDIA_IN_PROGRESS:
          System.out.println("Upload in progress");
          System.out.println("Upload percentage: " + uploader.getProgress());
          break;
        case MEDIA_COMPLETE:
          System.out.println("Upload Completed!");
          break;
      }
    }
  }
 </pre>

 @since 1.9
 @author rmistry@google.com (Ravi Mistry)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener -->
</package>
<package name="com.google.api.client.googleapis.notifications">
  <!-- start class com.google.api.client.googleapis.notifications.AbstractNotification -->
  <class name="AbstractNotification" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractNotification" type="long, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param messageNumber message number (a monotonically increasing value starting with 1)
 @param resourceState {@link ResourceStates resource state}
 @param resourceId opaque ID for the watched resource that is stable across API versions
 @param resourceUri opaque ID (in the form of a canonicalized URI) for the watched resource that
        is sensitive to the API version
 @param channelId notification channel UUID provided by the client in the watch request]]>
      </doc>
    </constructor>
    <constructor name="AbstractNotification" type="com.google.api.client.googleapis.notifications.AbstractNotification"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor based on a source notification object.]]>
      </doc>
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toStringHelper" return="Objects.ToStringHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the helper for {@link #toString()}.]]>
      </doc>
    </method>
    <method name="getMessageNumber" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message number (a monotonically increasing value starting with 1).]]>
      </doc>
    </method>
    <method name="setMessageNumber" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageNumber" type="long"/>
      <doc>
      <![CDATA[Sets the message number (a monotonically increasing value starting with 1).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getResourceState" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link ResourceStates resource state}.]]>
      </doc>
    </method>
    <method name="setResourceState" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceState" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link ResourceStates resource state}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getResourceId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the opaque ID for the watched resource that is stable across API versions.]]>
      </doc>
    </method>
    <method name="setResourceId" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the opaque ID for the watched resource that is stable across API versions.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getResourceUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the opaque ID (in the form of a canonicalized URI) for the watched resource that is
 sensitive to the API version.]]>
      </doc>
    </method>
    <method name="setResourceUri" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceUri" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the opaque ID (in the form of a canonicalized URI) for the watched resource that is
 sensitive to the API version.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getChannelId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification channel UUID provided by the client in the watch request.]]>
      </doc>
    </method>
    <method name="setChannelId" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the notification channel UUID provided by the client in the watch request.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getChannelExpiration" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification channel expiration time or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setChannelExpiration" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelExpiration" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the notification channel expiration time or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getChannelToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification channel token (an opaque string) provided by the client in the watch
 request or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setChannelToken" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the notification channel token (an opaque string) provided by the client in the watch
 request or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getChanged" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of change performed on the resource or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setChanged" return="com.google.api.client.googleapis.notifications.AbstractNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="changed" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type of change performed on the resource or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Notification metadata sent to this client about a watched resource.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.AbstractNotification -->
  <!-- start class com.google.api.client.googleapis.notifications.NotificationUtils -->
  <class name="NotificationUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="randomUuidString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new random UUID string to be used as a notification channel ID.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for notifications and notification channels.

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.NotificationUtils -->
  <!-- start class com.google.api.client.googleapis.notifications.ResourceStates -->
  <class name="ResourceStates" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="SYNC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Notification that the subscription is alive (comes with no payload).]]>
      </doc>
    </field>
    <field name="EXISTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resource exists, for example on a create or update.]]>
      </doc>
    </field>
    <field name="NOT_EXISTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resource does not exist, for example on a delete.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Standard resource states used by notifications.

 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.ResourceStates -->
  <!-- start class com.google.api.client.googleapis.notifications.StoredChannel -->
  <class name="StoredChannel" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="StoredChannel" type="com.google.api.client.googleapis.notifications.UnparsedNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with a random UUID using {@link NotificationUtils#randomUuidString()}.

 @param notificationCallback notification handler called when a notification is received for
        this subscription]]>
      </doc>
    </constructor>
    <constructor name="StoredChannel" type="com.google.api.client.googleapis.notifications.UnparsedNotificationCallback, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with a custom UUID.

 @param notificationCallback notification handler called when a notification is received for
        this subscription
 @param id subscription UUID]]>
      </doc>
    </constructor>
    <method name="store" return="com.google.api.client.googleapis.notifications.StoredChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="DataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Stores this notification channel in the notification channel data store, which is derived from
 {@link #getDefaultDataStore(DataStoreFactory)} on the given data store factory.

 <p>
 It is important that this method be called before the watch HTTP request is made in case the
 notification is received before the watch HTTP response is received.
 </p>

 @param dataStoreFactory data store factory]]>
      </doc>
    </method>
    <method name="store" return="com.google.api.client.googleapis.notifications.StoredChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStore" type="&lt;any&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Stores this notification channel in the given notification channel data store.

 <p>
 It is important that this method be called before the watch HTTP request is made in case the
 notification is received before the watch HTTP response is received.
 </p>

 @param dataStore notification channel data store]]>
      </doc>
    </method>
    <method name="getNotificationCallback" return="com.google.api.client.googleapis.notifications.UnparsedNotificationCallback"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification callback called when a notification is received for this subscription.]]>
      </doc>
    </method>
    <method name="getClientToken" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the arbitrary string provided by the client associated with this subscription that is
 delivered to the target address with each notification or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setClientToken" return="com.google.api.client.googleapis.notifications.StoredChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientToken" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the the arbitrary string provided by the client associated with this subscription that is
 delivered to the target address with each notification or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getExpiration" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the milliseconds in Unix time at which the subscription will expire or {@code null} for
 an infinite TTL.]]>
      </doc>
    </method>
    <method name="setExpiration" return="com.google.api.client.googleapis.notifications.StoredChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expiration" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the milliseconds in Unix time at which the subscription will expire or {@code null} for an
 infinite TTL.]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the subscription UUID.]]>
      </doc>
    </method>
    <method name="getTopicId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the opaque ID for the subscribed resource that is stable across API versions or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setTopicId" return="com.google.api.client.googleapis.notifications.StoredChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="topicId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the opaque ID for the subscribed resource that is stable across API versions or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDefaultDataStore" return="&lt;any&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataStoreFactory" type="DataStoreFactory"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the stored channel data store using the ID {@link #DEFAULT_DATA_STORE_ID}.

 @param dataStoreFactory data store factory
 @return stored channel data store]]>
      </doc>
    </method>
    <field name="DEFAULT_DATA_STORE_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default data store ID.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Notification channel information to be stored in a data store.

 <p>
 Implementation is thread safe.
 </p>

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.StoredChannel -->
  <!-- start class com.google.api.client.googleapis.notifications.TypedNotification -->
  <class name="TypedNotification" extends="com.google.api.client.googleapis.notifications.AbstractNotification"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TypedNotification" type="long, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param messageNumber message number (a monotonically increasing value starting with 1)
 @param resourceState {@link ResourceStates resource state}
 @param resourceId opaque ID for the watched resource that is stable across API versions
 @param resourceUri opaque ID (in the form of a canonicalized URI) for the watched resource that
        is sensitive to the API version
 @param channelId notification channel UUID provided by the client in the watch request]]>
      </doc>
    </constructor>
    <constructor name="TypedNotification" type="com.google.api.client.googleapis.notifications.UnparsedNotification"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sourceNotification source notification metadata to copy]]>
      </doc>
    </constructor>
    <method name="getContent" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parsed notification content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="T"/>
      <doc>
      <![CDATA[Sets the parsed notification content or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setMessageNumber" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageNumber" type="long"/>
    </method>
    <method name="setResourceState" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceState" type="java.lang.String"/>
    </method>
    <method name="setResourceId" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceId" type="java.lang.String"/>
    </method>
    <method name="setResourceUri" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceUri" type="java.lang.String"/>
    </method>
    <method name="setChannelId" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelId" type="java.lang.String"/>
    </method>
    <method name="setChannelExpiration" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelExpiration" type="java.lang.String"/>
    </method>
    <method name="setChannelToken" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelToken" type="java.lang.String"/>
    </method>
    <method name="setChanged" return="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="changed" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Notification metadata and parsed content sent to this client about a watched resource.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> Java type of the notification content

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.TypedNotification -->
  <!-- start class com.google.api.client.googleapis.notifications.TypedNotificationCallback -->
  <class name="TypedNotificationCallback" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.notifications.UnparsedNotificationCallback"/>
    <constructor name="TypedNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="onNotification"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="storedChannel" type="com.google.api.client.googleapis.notifications.StoredChannel"/>
      <param name="notification" type="com.google.api.client.googleapis.notifications.TypedNotification&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles a received typed notification.

 @param storedChannel stored notification channel
 @param notification typed notification]]>
      </doc>
    </method>
    <method name="getObjectParser" return="ObjectParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns an {@link ObjectParser} which can be used to parse this notification.]]>
      </doc>
    </method>
    <method name="getDataClass" return="java.lang.Class&lt;T&gt;"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the data class to parse the notification content into or {@code Void.class} if no
 notification content is expected.]]>
      </doc>
    </method>
    <method name="onNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="storedChannel" type="com.google.api.client.googleapis.notifications.StoredChannel"/>
      <param name="notification" type="com.google.api.client.googleapis.notifications.UnparsedNotification"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Callback to receive notifications for watched resource in which the . Callback which is used to
 receive typed {@link AbstractNotification}s after subscribing to a topic.

 <p>
 Must NOT be implemented in form of an anonymous class as this will break serialization.
 </p>

 <p>
 Implementation should be thread-safe.
 </p>

 <b>Example usage:</b>

 <pre>
  static class MyNotificationCallback
      extends JsonNotificationCallback{@literal <}ListResponse{@literal >} {

    private static final long serialVersionUID = 1L;

    {@literal @}Override
    protected void onNotification(
        StoredChannel subscription, Notification notification, ListResponse content) {
      switch (notification.getResourceState()) {
        case ResourceStates.SYNC:
          break;
        case ResourceStates.EXISTS:
          break;
        case ResourceStates.NOT_EXISTS:
          break;
      }
    }

    {@literal @}Override
    protected ObjectParser getObjectParser(Notification notification) throws IOException {
      return new JsonObjectParser(new JacksonFactory());
    }

    {@literal @}Override
    protected Class{@literal <}ListResponse{@literal >} getDataClass() throws IOException {
      return ListResponse.class;
    }
  }
 </pre>

 @param <T> Java type of the notification content
 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.TypedNotificationCallback -->
  <!-- start class com.google.api.client.googleapis.notifications.UnparsedNotification -->
  <class name="UnparsedNotification" extends="com.google.api.client.googleapis.notifications.AbstractNotification"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnparsedNotification" type="long, java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param messageNumber message number (a monotonically increasing value starting with 1)
 @param resourceState {@link ResourceStates resource state}
 @param resourceId opaque ID for the watched resource that is stable across API versions
 @param resourceUri opaque ID (in the form of a canonicalized URI) for the watched resource that
        is sensitive to the API version
 @param channelId notification channel UUID provided by the client in the watch request]]>
      </doc>
    </constructor>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification content media type for the content stream or {@code null} for none or
 unknown.]]>
      </doc>
    </method>
    <method name="setContentType" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the notification content media type for the content stream or {@code null} for none or
 unknown.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getContentStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the notification content input stream or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setContentStream" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentStream" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Sets the notification content content input stream or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setMessageNumber" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageNumber" type="long"/>
    </method>
    <method name="setResourceState" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceState" type="java.lang.String"/>
    </method>
    <method name="setResourceId" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceId" type="java.lang.String"/>
    </method>
    <method name="setResourceUri" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceUri" type="java.lang.String"/>
    </method>
    <method name="setChannelId" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelId" type="java.lang.String"/>
    </method>
    <method name="setChannelExpiration" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelExpiration" type="java.lang.String"/>
    </method>
    <method name="setChannelToken" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="channelToken" type="java.lang.String"/>
    </method>
    <method name="setChanged" return="com.google.api.client.googleapis.notifications.UnparsedNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="changed" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Notification metadata and unparsed content stream sent to this client about a watched resource.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.UnparsedNotification -->
  <!-- start interface com.google.api.client.googleapis.notifications.UnparsedNotificationCallback -->
  <interface name="UnparsedNotificationCallback"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="onNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="storedChannel" type="com.google.api.client.googleapis.notifications.StoredChannel"/>
      <param name="notification" type="com.google.api.client.googleapis.notifications.UnparsedNotification"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handles a received unparsed notification.

 @param storedChannel stored notification channel
 @param notification unparsed notification]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Callback to receive unparsed notifications for watched resource.

 <p>
 Must NOT be implemented in form of an anonymous class since this would break serialization.
 </p>

 <p>
 Should be thread-safe as several notifications might be processed at the same time.
 </p>

 <b>Example usage:</b>

 <pre>
  static class MyNotificationCallback implements UnparsedNotificationCallback {

    private static final long serialVersionUID = 1L;

    {@literal @}Override
    public void onNotification(StoredChannel storedChannel, UnparsedNotification notification) {
      String contentType = notification.getContentType();
      InputStream contentStream = notification.getContentStream();
      switch (notification.getResourceState()) {
        case ResourceStates.SYNC:
          break;
        case ResourceStates.EXISTS:
          break;
        case ResourceStates.NOT_EXISTS:
          break;
      }
    }
  }
 </pre>

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.notifications.UnparsedNotificationCallback -->
</package>
<package name="com.google.api.client.googleapis.notifications.json">
  <!-- start class com.google.api.client.googleapis.notifications.json.JsonNotificationCallback -->
  <class name="JsonNotificationCallback" extends="com.google.api.client.googleapis.notifications.TypedNotificationCallback&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getObjectParser" return="JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the JSON factory to use to parse the notification content.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 A {@link TypedNotificationCallback} which uses an JSON content encoding.

 <p>
 Must NOT be implemented in form of an anonymous class as this will break serialization.
 </p>

 <p>
 Implementation should be thread-safe.
 </p>

 <b>Example usage:</b>

 <pre>
  static class MyNotificationCallback
      extends JsonNotificationCallback{@literal <}ListResponse{@literal >} {

    private static final long serialVersionUID = 1L;

    {@literal @}Override
    protected void onNotification(
        StoredChannel channel, TypedNotification{@literal <}ListResponse{@literal >} notification) {
      ListResponse content = notification.getContent();
      switch (notification.getResourceState()) {
        case ResourceStates.SYNC:
          break;
        case ResourceStates.EXISTS:
          break;
        case ResourceStates.NOT_EXISTS:
          break;
      }
    }

    {@literal @}Override
    protected JsonFactory getJsonFactory() throws IOException {
      return new JacksonFactory();
    }

    {@literal @}Override
    protected Class{@literal <}ListResponse{@literal >} getDataClass() throws IOException {
      return ListResponse.class;
    }
  }
 </pre>

 @param <T> Type of the data contained within a notification
 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.json.JsonNotificationCallback -->
</package>
<package name="com.google.api.client.googleapis.notifications.json.gson">
  <!-- start class com.google.api.client.googleapis.notifications.json.gson.GsonNotificationCallback -->
  <class name="GsonNotificationCallback" extends="com.google.api.client.googleapis.notifications.json.JsonNotificationCallback&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GsonNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 A {@link TypedNotificationCallback} which uses an JSON content encoding with
 {@link GsonFactory#getDefaultInstance()}.

 <p>
 Must NOT be implemented in form of an anonymous class as this will break serialization.
 </p>

 <p>
 Implementation should be thread-safe.
 </p>

 <b>Example usage:</b>

 <pre>
  static class MyNotificationCallback
      extends GsonNotificationCallback{@literal <}ListResponse{@literal >} {

    private static final long serialVersionUID = 1L;

    {@literal @}Override
    protected void onNotification(
        StoredChannel channel, TypedNotification{@literal <}ListResponse{@literal >} notification) {
      ListResponse content = notification.getContent();
      switch (notification.getResourceState()) {
        case ResourceStates.SYNC:
          break;
        case ResourceStates.EXISTS:
          break;
        case ResourceStates.NOT_EXISTS:
          break;
      }
    }

    {@literal @}Override
    protected Class{@literal <}ListResponse{@literal >} getDataClass() throws IOException {
      return ListResponse.class;
    }
  }
 </pre>

 @param <T> Type of the data contained within a notification
 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.json.gson.GsonNotificationCallback -->
</package>
<package name="com.google.api.client.googleapis.notifications.json.jackson2">
  <!-- start class com.google.api.client.googleapis.notifications.json.jackson2.JacksonNotificationCallback -->
  <class name="JacksonNotificationCallback" extends="com.google.api.client.googleapis.notifications.json.JsonNotificationCallback&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JacksonNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 A {@link TypedNotificationCallback} which uses an JSON content encoding with
 {@link JacksonFactory#getDefaultInstance()}.

 <p>
 Must NOT be implemented in form of an anonymous class as this will break serialization.
 </p>

 <p>
 Implementation should be thread-safe.
 </p>

 <b>Example usage:</b>

 <pre>
  static class MyNotificationCallback
      extends GsonNotificationCallback{@literal <}ListResponse{@literal >} {

    private static final long serialVersionUID = 1L;

    {@literal @}Override
    protected void onNotification(
        StoredChannel channel, TypedNotification{@literal <}ListResponse{@literal >} notification) {
      ListResponse content = notification.getContent();
      switch (notification.getResourceState()) {
        case ResourceStates.SYNC:
          break;
        case ResourceStates.EXISTS:
          break;
        case ResourceStates.NOT_EXISTS:
          break;
      }
    }

    {@literal @}Override
    protected Class{@literal <}ListResponse{@literal >} getDataClass() throws IOException {
      return ListResponse.class;
    }
  }
 </pre>

 @param <T> Type of the data contained within a notification
 @author Yaniv Inbar
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.notifications.json.jackson2.JacksonNotificationCallback -->
</package>
<package name="com.google.api.client.googleapis.services">
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClient -->
  <class name="AbstractGoogleClient" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClient" type="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="getRootUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded root URL of the service, for example
 {@code "https://www.googleapis.com/"}.

 <p>
 Must end with a "/".
 </p>]]>
      </doc>
    </method>
    <method name="getServicePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 Must end with a "/" and not begin with a "/". It is allowed to be an empty string {@code ""} or
 a forward slash {@code "/"}, if it is a forward slash then it is treated as an empty string
 </p>]]>
      </doc>
    </method>
    <method name="getBaseUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded base URL of the service, for example
 {@code "https://www.googleapis.com/tasks/v1/"}.

 <p>
 Must end with a "/". It is guaranteed to be equal to {@code getRootUrl() + getServicePath()}.
 </p>]]>
      </doc>
    </method>
    <method name="getApplicationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the application name to be sent in the User-Agent header of each request or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="getRequestFactory" return="HttpRequestFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request factory.]]>
      </doc>
    </method>
    <method name="getGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getObjectParser" return="ObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the object parser or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="httpClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a {@link AbstractGoogleClientRequest} using a
 {@link GoogleClientRequestInitializer}.

 <p>
 Must be called before the Google client request is executed, preferably right after the request
 is instantiated. Sample usage:
 </p>

 <pre>
    public class Get extends HttpClientRequest {
      ...
    }

    public Get get(String userId) throws IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param httpClientRequest Google client request type]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch()
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="batch" return="com.google.api.client.googleapis.batch.BatchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Create an {@link BatchRequest} object from this Google API client instance.

 <p>
 Sample usage:
 </p>

 <pre>
     client.batch(httpRequestInitializer)
         .queue(...)
         .queue(...)
         .execute();
 </pre>

 @param httpRequestInitializer The initializer to use when creating the top-level batch HTTP
        request or {@code null} for none
 @return newly created Batch request]]>
      </doc>
    </method>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.]]>
      </doc>
    </method>
    <method name="getSuppressRequiredParameterChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery required parameter checks should be suppressed.

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract thread-safe Google client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClient -->
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClient.Builder -->
  <class name="AbstractGoogleClient.Builder" extends="java.lang.Object"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, ObjectParser, HttpRequestInitializer"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @param transport The transport to use for requests
 @param rootUrl root URL of the service. Must end with a "/"
 @param servicePath service path
 @param objectParser object parser or {@code null} for none
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.services.AbstractGoogleClient"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link AbstractGoogleClient}.]]>
      </doc>
    </method>
    <method name="getTransport" return="HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.]]>
      </doc>
    </method>
    <method name="getObjectParser" return="ObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the object parser or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRootUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded root URL of the service, for example
 {@code https://www.googleapis.com/}.

 <p>
 Must be URL-encoded and must end with a "/".
 </p>]]>
      </doc>
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URL-encoded root URL of the service, for example {@code https://www.googleapis.com/}
 .
 <p>
 If the specified root URL does not end with a "/" then a "/" is added to the end.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getServicePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 Must be URL-encoded and must end with a "/" and not begin with a "/". It is allowed to be an
 empty string {@code ""}.
 </p>]]>
      </doc>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the URL-encoded service path of the service, for example {@code "tasks/v1/"}.

 <p>
 It is allowed to be an empty string {@code ""} or a forward slash {@code "/"}, if it is a
 forward slash then it is treated as an empty string. This is determined when the library is
 generated and normally should not be changed.
 </p>

 <p>
 If the specified service path does not end with a "/" then a "/" is added to the end. If the
 specified service path begins with a "/" then the "/" is removed.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
      <doc>
      <![CDATA[Sets the Google client request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getHttpRequestInitializer" return="HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
      <doc>
      <![CDATA[Sets the HTTP request initializer or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getApplicationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the application name to be used in the UserAgent header of each request or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the application name to be used in the UserAgent header of each request or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getSuppressPatternChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery pattern checks should be suppressed on required parameters.]]>
      </doc>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
      <doc>
      <![CDATA[Sets whether discovery pattern checks should be suppressed on required parameters.

 <p>
 Default value is {@code false}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getSuppressRequiredParameterChecks" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether discovery required parameter checks should be suppressed.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
      <doc>
      <![CDATA[Sets whether discovery required parameter checks should be suppressed.

 <p>
 Default value is {@code false}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
      <doc>
      <![CDATA[Suppresses all discovery pattern and required parameter checks.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link AbstractGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClient.Builder -->
  <!-- start class com.google.api.client.googleapis.services.AbstractGoogleClientRequest -->
  <class name="AbstractGoogleClientRequest" extends="GenericData"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClient, java.lang.String, java.lang.String, HttpContent, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractGoogleClient Google client
 @param requestMethod HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param httpContent HTTP content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getDisableGZipContent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to disable GZip compression of HTTP content.]]>
      </doc>
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to disable GZip compression of HTTP content.

 <p>
 By default it is {@code false}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRequestMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP method.]]>
      </doc>
    </method>
    <method name="getUriTemplate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI template for the path relative to the base URL.]]>
      </doc>
    </method>
    <method name="getHttpContent" return="HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.services.AbstractGoogleClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Google client.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRequestHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers used for the Google client request.]]>
      </doc>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP headers used for the Google client request.

 <p>
 These headers are set on the request after {@link #buildHttpRequest} is called, this means that
 {@link HttpRequestInitializer#initialize} is called first.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getLastResponseHeaders" return="HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers of the last response or {@code null} before request has been executed.]]>
      </doc>
    </method>
    <method name="getLastStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status code of the last response or {@code -1} before request has been executed.]]>
      </doc>
    </method>
    <method name="getLastStatusMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status message of the last response or {@code null} before request has been
 executed.]]>
      </doc>
    </method>
    <method name="getResponseClass" return="java.lang.Class&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the response class to parse into.]]>
      </doc>
    </method>
    <method name="getMediaHttpUploader" return="com.google.api.client.googleapis.media.MediaHttpUploader"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the media HTTP Uploader or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initializeMediaUpload"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="mediaContent" type="AbstractInputStreamContent"/>
      <doc>
      <![CDATA[Initializes the media HTTP uploader based on the media content.

 @param mediaContent media content]]>
      </doc>
    </method>
    <method name="getMediaHttpDownloader" return="com.google.api.client.googleapis.media.MediaHttpDownloader"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the media HTTP downloader or {@code null} for none.]]>
      </doc>
    </method>
    <method name="initializeMediaDownload"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the media HTTP downloader.]]>
      </doc>
    </method>
    <method name="buildHttpRequestUrl" return="GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new instance of {@link GenericUrl} suitable for use against this service.

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return newly created {@link GenericUrl}]]>
      </doc>
    </method>
    <method name="buildHttpRequest" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a request suitable for use against this service.

 <p>
 Subclasses may override by calling the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="buildHttpRequestUsingHead" return="HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a request suitable for use against this service, but using HEAD instead of GET.

 <p>
 Only supported when the original request method is GET.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="executeUnparsed" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the raw metadata {@link HttpResponse}.

 <p>
 Callers are responsible for disconnecting the HTTP response by calling
 {@link HttpResponse#disconnect}. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeUnparsed();
     try {
       // process response..
     } finally {
       response.disconnect();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="executeMedia" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and returns the raw media {@link HttpResponse}.

 <p>
 Callers are responsible for disconnecting the HTTP response by calling
 {@link HttpResponse#disconnect}. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeMedia();
     try {
       // process response..
     } finally {
       response.disconnect();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="executeUsingHead" return="HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request using HEAD to the server and returns the raw metadata
 {@link HttpResponse} for the response headers.

 <p>
 Only supported when the original request method is GET. The response content is assumed to be
 empty and ignored. Calls {@link HttpResponse#ignore()} so there is no need to disconnect the
 response. Example usage:
 </p>

 <pre>
     HttpResponse response = request.executeUsingHead();
     // look at response.getHeaders()
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return the {@link HttpResponse}]]>
      </doc>
    </method>
    <method name="newExceptionOnError" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <doc>
      <![CDATA[Returns the exception to throw on an HTTP error response as defined by
 {@link HttpResponse#isSuccessStatusCode()}.

 <p>
 It is guaranteed that {@link HttpResponse#isSuccessStatusCode()} is {@code false}. Default
 implementation is to call {@link HttpResponseException#HttpResponseException(HttpResponse)},
 but subclasses may override.
 </p>

 @param response HTTP response
 @return exception to throw]]>
      </doc>
    </method>
    <method name="execute" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the parsed metadata response.

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return parsed HTTP response]]>
      </doc>
    </method>
    <method name="executeAsInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and returns the metadata content input stream of
 {@link HttpResponse}.

 <p>
 Callers are responsible for closing the input stream after it is processed. Example sample:
 </p>

 <pre>
     InputStream is = request.executeAsInputStream();
     try {
       // Process input stream..
     } finally {
       is.close();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return input stream of the response content]]>
      </doc>
    </method>
    <method name="executeMediaAsInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and returns the media content input stream of
 {@link HttpResponse}.

 <p>
 Callers are responsible for closing the input stream after it is processed. Example sample:
 </p>

 <pre>
     InputStream is = request.executeMediaAsInputStream();
     try {
       // Process input stream..
     } finally {
       is.close();
     }
 </pre>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @return input stream of the response content]]>
      </doc>
    </method>
    <method name="executeAndDownloadTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the metadata request to the server and writes the metadata content input stream of
 {@link HttpResponse} into the given destination output stream.

 <p>
 This method closes the content of the HTTP response from {@link HttpResponse#getContent()}.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="executeMediaAndDownloadTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sends the media request to the server and writes the media content input stream of
 {@link HttpResponse} into the given destination output stream.

 <p>
 This method closes the content of the HTTP response from {@link HttpResponse#getContent()}.
 </p>

 <p>
 Subclasses may override by calling the super implementation.
 </p>

 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="queue"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="batchRequest" type="com.google.api.client.googleapis.batch.BatchRequest"/>
      <param name="errorClass" type="java.lang.Class&lt;E&gt;"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.BatchCallback&lt;T, E&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the request into the specified batch request container using the specified error class.

 <p>
 Batched requests are then executed when {@link BatchRequest#execute()} is called.
 </p>

 @param batchRequest batch request container
 @param errorClass data class the unsuccessful response will be parsed into or
        {@code Void.class} to ignore the content
 @param callback batch callback]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="checkRequiredParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Ensures that the specified required parameter is not null or
 {@link AbstractGoogleClient#getSuppressRequiredParameterChecks()} is true.

 @param value the value of the required parameter
 @param name the name of the required parameter
 @throws IllegalArgumentException if the specified required parameter is null and
         {@link AbstractGoogleClient#getSuppressRequiredParameterChecks()} is false
 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract Google client request for a {@link AbstractGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> type of the response

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.AbstractGoogleClientRequest -->
  <!-- start class com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer -->
  <class name="CommonGoogleClientRequestInitializer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    <constructor name="CommonGoogleClientRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CommonGoogleClientRequestInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <constructor name="CommonGoogleClientRequestInitializer" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged
 @param userIp user IP or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Subclasses should call super implementation in order to set the key and userIp.

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="getKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the API key or {@code null} to leave it unchanged.]]>
      </doc>
    </method>
    <method name="getUserIp" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user IP or {@code null} to leave it unchanged.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google common client request initializer implementation for setting properties like key and
 userIp.

 <p>
 The simplest usage is to use it to set the key parameter:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new CommonGoogleClientRequestInitializer(KEY);
 </pre>

 <p>
 There is also a constructor to set both the key and userIp parameters:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new CommonGoogleClientRequestInitializer(KEY, USER_IP);
 </pre>

 <p>
 If you want to implement custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer extends CommonGoogleClientRequestInitializer {

    {@literal @}Override
    public void initialize(AbstractGoogleClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer2 extends CommonGoogleClientRequestInitializer {

    public MyRequestInitializer2() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initialize(AbstractGoogleClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      super.initialize(request); // must be called to set the key and userIp parameters
      // insert some additional logic
    }
  }
 </pre>

 <p>
 Subclasses should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer -->
  <!-- start interface com.google.api.client.googleapis.services.GoogleClientRequestInitializer -->
  <interface name="GoogleClientRequestInitializer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a Google client request.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google client request initializer.

 <p>
 For example, this might be used to set a key URL query parameter on all requests:
 </p>

 <pre>
  public class KeyRequestInitializer implements GoogleClientRequestInitializer {
    public void initialize(GoogleClientRequest<?> request) {
      request.put("key", KEY);
    }
  }
 </pre>

 <p>
 Implementations should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.googleapis.services.GoogleClientRequestInitializer -->
</package>
<package name="com.google.api.client.googleapis.services.json">
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient -->
  <class name="AbstractGoogleJsonClient" extends="com.google.api.client.googleapis.services.AbstractGoogleClient"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClient" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Factory.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe Google JSON client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient -->
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder -->
  <class name="AbstractGoogleJsonClient.Builder" extends="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClient.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJsonFactory" return="JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Factory.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Builder for {@link AbstractGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder -->
  <!-- start class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest -->
  <class name="AbstractGoogleJsonClientRequest" extends="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleJsonClientRequest" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient, java.lang.String, java.lang.String, java.lang.Object, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractGoogleJsonClient Google JSON client
 @param requestMethod HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param jsonContent POJO that can be serialized into JSON content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <method name="queue"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="batchRequest" type="com.google.api.client.googleapis.batch.BatchRequest"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.json.JsonBatchCallback&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the request into the specified batch request container.

 <p>
 Batched requests are then executed when {@link BatchRequest#execute()} is called.
 </p>
 <p>
 Example usage:
 </p>

 <pre>
     request.queue(batchRequest, new JsonBatchCallback&lt;SomeResponseType&gt;() {

       public void onSuccess(SomeResponseType content, HttpHeaders responseHeaders) {
         log("Success");
       }

       public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {
         log(e.getMessage());
       }
     });
 </pre>


 @param batchRequest batch request container
 @param callback batch callback]]>
      </doc>
    </method>
    <method name="newExceptionOnError" return="com.google.api.client.googleapis.json.GoogleJsonResponseException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
    </method>
    <method name="getJsonContent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns POJO that can be serialized into JSON content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Google JSON request for a {@link AbstractGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest -->
  <!-- start class com.google.api.client.googleapis.services.json.CommonGoogleJsonClientRequestInitializer -->
  <class name="CommonGoogleJsonClientRequestInitializer" extends="com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonGoogleJsonClientRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CommonGoogleJsonClientRequestInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <constructor name="CommonGoogleJsonClientRequestInitializer" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged
 @param userIp user IP or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="initializeJsonRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a Google JSON client request.

 <p>
 Default implementation does nothing. Called from
 {@link #initialize(AbstractGoogleClientRequest)}.
 </p>

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Google JSON client request initializer implementation for setting properties like key and userIp.

 <p>
 The simplest usage is to use it to set the key parameter:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new CommonGoogleJsonClientRequestInitializer(KEY);
 </pre>

 <p>
 There is also a constructor to set both the key and userIp parameters:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new CommonGoogleJsonClientRequestInitializer(KEY, USER_IP);
 </pre>

 <p>
 If you want to implement custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer extends CommonGoogleJsonClientRequestInitializer {

    {@literal @}Override
    public void initialize(AbstractGoogleJsonClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 </p>

 <pre>
  public static class MyKeyRequestInitializer extends CommonGoogleJsonClientRequestInitializer {

    public MyKeyRequestInitializer() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initializeJsonRequest(
        AbstractGoogleJsonClientRequest{@literal <}?{@literal >} request) throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Subclasses should be thread-safe.
 </p>

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.json.CommonGoogleJsonClientRequestInitializer -->
</package>
<package name="com.google.api.client.googleapis.services.protobuf">
  <!-- start class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient -->
  <class name="AbstractGoogleProtoClient" extends="com.google.api.client.googleapis.services.AbstractGoogleClient"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleProtoClient" type="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="ProtoObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe Google protocol buffer client.

 @since 1.16
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient -->
  <!-- start class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder -->
  <class name="AbstractGoogleProtoClient.Builder" extends="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleProtoClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, HttpRequestInitializer"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="getObjectParser" return="ProtoObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link AbstractGoogleProtoClient}.

 <p>
 Implementation is not thread-safe.
 </p>
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder -->
  <!-- start class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest -->
  <class name="AbstractGoogleProtoClientRequest" extends="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractGoogleProtoClientRequest" type="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient, java.lang.String, java.lang.String, MessageLite, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractGoogleProtoClient Google protocol buffer client
 @param requestMethod HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param message message to serialize or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <method name="queue"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="batchRequest" type="com.google.api.client.googleapis.batch.BatchRequest"/>
      <param name="callback" type="com.google.api.client.googleapis.batch.BatchCallback&lt;T, java.lang.Void&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Queues the request into the specified batch request container.

 <p>
 Batched requests are then executed when {@link BatchRequest#execute()} is called.
 </p>
 <p>
 Example usage:
 </p>

 <pre>

    request.queue(batchRequest, new BatchCallback{@literal <}SomeResponseType, Void{@literal >}() {

      public void onSuccess(SomeResponseType content, HttpHeaders responseHeaders) {
        log("Success");
      }

      public void onFailure(Void unused, HttpHeaders responseHeaders) {
        log(e.getMessage());
      }
    });
 </pre>


 @param batchRequest batch request container
 @param callback batch callback]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message to serialize or {@code null} for none.]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google protocol buffer request for a {@link AbstractGoogleProtoClient}.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> type of the response
 @since 1.16
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest -->
  <!-- start class com.google.api.client.googleapis.services.protobuf.CommonGoogleProtoClientRequestInitializer -->
  <class name="CommonGoogleProtoClientRequestInitializer" extends="com.google.api.client.googleapis.services.CommonGoogleClientRequestInitializer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonGoogleProtoClientRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CommonGoogleProtoClientRequestInitializer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <constructor name="CommonGoogleProtoClientRequestInitializer" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param key API key or {@code null} to leave it unchanged
 @param userIp user IP or {@code null} to leave it unchanged]]>
      </doc>
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="initializeProtoRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest&lt;?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a Google protocol buffer client request.

 <p>
 Default implementation does nothing. Called from
 {@link #initialize(AbstractGoogleClientRequest)}.
 </p>

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Google protocol buffer client request initializer implementation for setting properties like key
 and userIp.

 <p>
 The simplest usage is to use it to set the key parameter:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new CommonGoogleProtoClientRequestInitializer(KEY);
 </pre>

 <p>
 There is also a constructor to set both the key and userIp parameters:
 </p>

 <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new CommonGoogleProtoClientRequestInitializer(KEY, USER_IP);
 </pre>

 <p>
 If you want to implement custom logic, extend it like this:
 </p>

 <pre>
  public static class MyRequestInitializer extends CommonGoogleProtoClientRequestInitializer {

    {@literal @}Override
    public void initialize(AbstractGoogleProtoClientRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 </p>

 <pre>
  public static class MyKeyRequestInitializer extends CommonGoogleProtoClientRequestInitializer {

    public MyKeyRequestInitializer() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initializeProtoRequest(
        AbstractGoogleProtoClientRequest{@literal <}?{@literal >} request) throws IOException {
      // custom logic
    }
  }
 </pre>

 <p>
 Subclasses should be thread-safe.
 </p>

 @since 1.16
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.services.protobuf.CommonGoogleProtoClientRequestInitializer -->
</package>
<package name="com.google.api.client.googleapis.testing.json">
  <!-- start class com.google.api.client.googleapis.testing.json.GoogleJsonResponseExceptionFactoryTesting -->
  <class name="GoogleJsonResponseExceptionFactoryTesting" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleJsonResponseExceptionFactoryTesting"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="newMock" return="com.google.api.client.googleapis.json.GoogleJsonResponseException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="JsonFactory"/>
      <param name="httpCode" type="int"/>
      <param name="reasonPhrase" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Convenience factory method that builds a {@link GoogleJsonResponseException}
 from its arguments. The method builds a dummy {@link HttpRequest} and
 {@link HttpResponse}, sets the response's status to a user-specified HTTP
 error code, suppresses exceptions, and executes the request. This forces
 the underlying framework to create, but not throw, a
 {@link GoogleJsonResponseException}, which the method retrieves and returns
 to the invoker.

 @param jsonFactory the JSON factory that will create all JSON required
        by the underlying framework
 @param httpCode the desired HTTP error code. Note: do nut specify any codes
        that indicate successful completion, e.g. 2XX.
 @param reasonPhrase the HTTP reason code that explains the error. For example,
        if {@code httpCode} is {@code 404}, the reason phrase should be
        {@code NOT FOUND}.
 @return the generated {@link GoogleJsonResponseException}, as specified.
 @throws IOException if request transport fails.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Factory class that builds {@link GoogleJsonResponseException} instances for
 testing.

 @since 1.18]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.json.GoogleJsonResponseExceptionFactoryTesting -->
</package>
<package name="com.google.api.client.googleapis.testing.notifications">
  <!-- start class com.google.api.client.googleapis.testing.notifications.MockUnparsedNotificationCallback -->
  <class name="MockUnparsedNotificationCallback" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.googleapis.notifications.UnparsedNotificationCallback"/>
    <constructor name="MockUnparsedNotificationCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="wasCalled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this handler was called.]]>
      </doc>
    </method>
    <method name="onNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="storedChannel" type="com.google.api.client.googleapis.notifications.StoredChannel"/>
      <param name="notification" type="com.google.api.client.googleapis.notifications.UnparsedNotification"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Mock for the {@link UnparsedNotificationCallback} class.

 @author Yaniv Inbar
 @author Matthias Linder (mlinder)
 @since 1.16]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.notifications.MockUnparsedNotificationCallback -->
</package>
<package name="com.google.api.client.googleapis.testing.services">
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClient -->
  <class name="MockGoogleClient" extends="com.google.api.client.googleapis.services.AbstractGoogleClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClient" type="HttpTransport, java.lang.String, java.lang.String, ObjectParser, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport The transport to use for requests
 @param rootUrl root URL of the service. Must end with a "/"
 @param servicePath service path
 @param objectParser object parser or {@code null} for none
 @param httpRequestInitializer HTTP request initializer or {@code null} for none

 @since 1.14]]>
      </doc>
    </constructor>
    <constructor name="MockGoogleClient" type="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClient -->
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder -->
  <class name="MockGoogleClient.Builder" extends="com.google.api.client.googleapis.services.AbstractGoogleClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, ObjectParser, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport The transport to use for requests
 @param rootUrl root URL of the service. Must end with a "/"
 @param servicePath service path
 @param objectParser object parser or {@code null} for none
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.testing.services.MockGoogleClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Builder for {@link MockGoogleClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClient.Builder -->
  <!-- start class com.google.api.client.googleapis.testing.services.MockGoogleClientRequest -->
  <class name="MockGoogleClientRequest" extends="com.google.api.client.googleapis.services.AbstractGoogleClientRequest&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleClientRequest" type="com.google.api.client.googleapis.services.AbstractGoogleClient, java.lang.String, java.lang.String, HttpContent, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param client Google client
 @param method HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param content HTTP content or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.testing.services.MockGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.testing.services.MockGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <method name="set" return="com.google.api.client.googleapis.testing.services.MockGoogleClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google request.

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.MockGoogleClientRequest -->
</package>
<package name="com.google.api.client.googleapis.testing.services.json">
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient -->
  <class name="MockGoogleJsonClient" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClient" type="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <constructor name="MockGoogleJsonClient" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google JSON client.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient -->
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder -->
  <class name="MockGoogleJsonClient.Builder" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClient.Builder" type="HttpTransport, JsonFactory, java.lang.String, java.lang.String, HttpRequestInitializer, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param jsonFactory JSON factory
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none
 @param legacyDataWrapper whether using the legacy data wrapper in responses]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link MockGoogleJsonClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient.Builder -->
  <!-- start class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest -->
  <class name="MockGoogleJsonClientRequest" extends="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleJsonClientRequest" type="com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient, java.lang.String, java.lang.String, java.lang.Object, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param client Google client
 @param method HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param content A POJO that can be serialized into JSON or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google JSON request.

 @param <T> type of the response
 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.json.MockGoogleJsonClientRequest -->
</package>
<package name="com.google.api.client.googleapis.testing.services.protobuf">
  <!-- start class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient -->
  <class name="MockGoogleProtoClient" extends="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleProtoClient" type="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder]]>
      </doc>
    </constructor>
    <constructor name="MockGoogleProtoClient" type="HttpTransport, java.lang.String, java.lang.String, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google protocol buffer client.

 @since 1.16
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient -->
  <!-- start class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder -->
  <class name="MockGoogleProtoClient.Builder" extends="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleProtoClient.Builder" type="HttpTransport, java.lang.String, java.lang.String, HttpRequestInitializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param transport HTTP transport
 @param rootUrl root URL of the service
 @param servicePath service path
 @param httpRequestInitializer HTTP request initializer or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRootUrl" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootUrl" type="java.lang.String"/>
    </method>
    <method name="setServicePath" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="servicePath" type="java.lang.String"/>
    </method>
    <method name="setGoogleClientRequestInitializer" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="googleClientRequestInitializer" type="com.google.api.client.googleapis.services.GoogleClientRequestInitializer"/>
    </method>
    <method name="setHttpRequestInitializer" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="httpRequestInitializer" type="HttpRequestInitializer"/>
    </method>
    <method name="setApplicationName" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="applicationName" type="java.lang.String"/>
    </method>
    <method name="setSuppressPatternChecks" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressPatternChecks" type="boolean"/>
    </method>
    <method name="setSuppressRequiredParameterChecks" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressRequiredParameterChecks" type="boolean"/>
    </method>
    <method name="setSuppressAllChecks" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressAllChecks" type="boolean"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Builder for {@link MockGoogleProtoClient}.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient.Builder -->
  <!-- start class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClientRequest -->
  <class name="MockGoogleProtoClientRequest" extends="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClientRequest&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockGoogleProtoClientRequest" type="com.google.api.client.googleapis.services.protobuf.AbstractGoogleProtoClient, java.lang.String, java.lang.String, MessageLite, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param client Google client
 @param method HTTP Method
 @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
        the base path from the base URL will be stripped out. The URI template can also be a
        full URL. URI template expansion is done using
        {@link UriTemplate#expand(String, String, Object, boolean)}
 @param message message to serialize or {@code null} for none
 @param responseClass response class to parse into]]>
      </doc>
    </constructor>
    <method name="getAbstractGoogleClient" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDisableGZipContent" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="disableGZipContent" type="boolean"/>
    </method>
    <method name="setRequestHeaders" return="com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClientRequest&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="HttpHeaders"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Thread-safe mock Google protocol buffer request.

 @param <T> type of the response
 @since 1.16
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.testing.services.protobuf.MockGoogleProtoClientRequest -->
</package>
<package name="com.google.api.client.googleapis.xml.atom">
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <class name="AtomPatchContent" extends="AtomContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchContent" type="XmlNamespaceDictionary, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @param patchEntry key/value pair data for the Atom PATCH entry
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="setMediaType" return="com.google.api.client.googleapis.xml.atom.AtomPatchContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="HttpMediaType"/>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Serializes Atom XML PATCH HTTP content based on the data key/value mapping object for an Atom
 entry.

 <p>
 Default value for {@link #getType()} is {@link Xml#MEDIA_TYPE}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
<code>
  static void setContent(
      HttpRequest request, XmlNamespaceDictionary namespaceDictionary, Object patchEntry) {
    request.setContent(new AtomPatchContent(namespaceDictionary, patchEntry));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <class name="AtomPatchRelativeToOriginalContent" extends="AbstractXmlHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomPatchRelativeToOriginalContent" type="XmlNamespaceDictionary, java.lang.Object, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="HttpMediaType"/>
    </method>
    <method name="getPatchedEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key name/value pairs for the updated/patched Atom entry.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getOriginalEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key name/value pairs for the original unmodified Atom entry.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Serializes an optimal Atom XML PATCH HTTP content based on the data key/value mapping object for
 an Atom entry, by comparing the original value to the patched value.

 <p>
 Sample usage:
 </p>

 <pre>
 <code>
  static void setContent(HttpRequest request, XmlNamespaceDictionary namespaceDictionary,
      Object originalEntry, Object patchedEntry) {
    request.setContent(
        new AtomPatchRelativeToOriginalContent(namespaceDictionary, originalEntry, patchedEntry));
  }
 </code>
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.AtomPatchRelativeToOriginalContent -->
  <!-- start class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <class name="GoogleAtom" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFieldsFor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs. It cannot be a
 {@link Map}, {@link GenericData} or a {@link Collection}.

 @param dataClass data class of key/value pairs]]>
      </doc>
    </method>
    <method name="getFeedFields" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="feedClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the fields mask to use for the given data class of key/value pairs for the feed class
 and for the entry class. This should only be used if the feed class does not contain the entry
 class as a field. The data classes cannot be a {@link Map}, {@link GenericData} or a
 {@link Collection}.

 @param feedClass feed data class
 @param entryClass entry data class]]>
      </doc>
    </method>
    <method name="computePatch" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="patched" type="java.lang.Object"/>
      <param name="original" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compute the patch object of key/value pairs from the given original and patched objects, adding
 a {@code @gd:fields} key for the fields mask.

 @param patched patched object
 @param original original object
 @return patch object of key/value pairs]]>
      </doc>
    </method>
    <field name="GD_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[GData namespace.

 @since 1.0]]>
      </doc>
    </field>
    <field name="ERROR_CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Content type used on an error formatted in XML.

 @since 1.5]]>
      </doc>
    </field>
    <doc>
    <![CDATA[{@link Beta} <br/>
 Utilities for working with the Atom XML of Google Data APIs.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.GoogleAtom -->
  <!-- start class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
  <class name="MultiKindFeedParser" extends="&lt;any&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="setEntryClasses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entryClasses" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Sets the entry classes to use when parsing.]]>
      </doc>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="create" return="com.google.api.client.googleapis.xml.atom.MultiKindFeedParser&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="HttpResponse"/>
      <param name="namespaceDictionary" type="XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClasses" type="java.lang.Class[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and entry classes.

 @param <T> feed type
 @param <E> entry type
 @param response HTTP response
 @param namespaceDictionary XML namespace dictionary
 @param feedClass feed class
 @param entryClasses entry class
 @return Atom multi-kind feed pull parser
 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[{@link Beta} <br/>
 GData Atom feed pull parser when the entry class can be computed from the kind.

 @param <T> feed type

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.googleapis.xml.atom.MultiKindFeedParser -->
</package>

</api>
